// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LTIPlacement l t i placement
//
// swagger:model LTIPlacement
type LTIPlacement struct {

	// Whether this placement can accept grades from the tool provider and a grade column can be created for it. This only applies to Enum[Type]#`ContentHandler` types. All others don't support grading and will be set to false.
	AllowGrading bool `json:"allowGrading,omitempty"`

	// Whether the course tool is visible by students, or only to non-students (e.g. instructors). Defaults to true, allowing students to see the tool.
	AllowStudents bool `json:"allowStudents,omitempty"`

	// Id of the creator of the placement
	AuthorID string `json:"authorId,omitempty"`

	// availability
	Availability *LTIPlacementAvailability `json:"availability,omitempty"`

	// Custom launch parameters for the tool.
	CustomParameters map[string]string `json:"customParameters,omitempty"`

	// The description of the placement. Not required to be unique. Maximum length is 1000 characters, BAD_REQUEST error with message is returned if greater than 1000 characters.
	// Max Length: 1000
	Description string `json:"description,omitempty"`

	// The handle that uniquely identifies this placement. Required to be unique. Maximum length is 32 characters, BAD_REQUEST error with message is returned if greater than 32 characters.
	// Required: true
	// Read Only: true
	// Max Length: 32
	Handle string `json:"handle"`

	// The URL of the icon for this placement, if any. Not required to be unique, must be a complete and valid URL. Maximum length is 255 characters, BAD_REQUEST error with message is returned if greater than 255 characters or incomplete URL.
	// Max Length: 255
	IconURL string `json:"iconUrl,omitempty"`

	// The ID associated with this placement.
	// Required: true
	// Read Only: true
	ID string `json:"id"`

	// Whether an instructor created the placement or not (otherwise admin)
	InstructorCreated bool `json:"instructorCreated,omitempty"`

	// Whether this placement link should be opened in a new window or not.
	LaunchInNewWindow bool `json:"launchInNewWindow,omitempty"`

	// Generated launch link
	// Required: true
	// Read Only: true
	LaunchLink string `json:"launchLink"`

	// The name of the placement. Not required to be unique. Maximum length of 50 characters, BAD_REQUEST error with message is returned if greater than 50 characters.
	// Required: true
	// Max Length: 50
	Name *string `json:"name"`

	// The type of placement.
	//
	//
	// | Type      | Description
	//  | --------- | --------- |
	// | Application | Application or Student Tool Placement |
	// | ContentHandler | Content Type placement |
	// | ContentItemMessage | Content-item Message placement (see IMSGlobal spec)  **Since**: 3300.5.0 |
	// | System | System-level Tools |
	// | Administrator | Administrator-level Tools  **Since**: 3400.1.0 |
	// | UltraUI | Ultra-UI Extensions  **Since**: 3700.6.0 |
	// | BaseNavigation | Base Navigation |
	// | CourseNavigation | Course Navigation |
	//
	// Required: true
	// Read Only: true
	// Enum: [Application ContentHandler ContentItemMessage System Administrator UltraUI BaseNavigation CourseNavigation]
	Type string `json:"type"`

	// The URL of the tool provider. Not required to be unique, must be a complete and valid URL. Maximum length is 1024 characters, BAD_REQUEST error with message is returned if greater than 1024 characters or incomplete URL.
	// Required: true
	// Max Length: 1024
	URL *string `json:"url"`
}

// Validate validates this l t i placement
func (m *LTIPlacement) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailability(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHandle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIconURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLaunchLink(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LTIPlacement) validateAvailability(formats strfmt.Registry) error {

	if swag.IsZero(m.Availability) { // not required
		return nil
	}

	if m.Availability != nil {
		if err := m.Availability.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("availability")
			}
			return err
		}
	}

	return nil
}

func (m *LTIPlacement) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", string(m.Description), 1000); err != nil {
		return err
	}

	return nil
}

func (m *LTIPlacement) validateHandle(formats strfmt.Registry) error {

	if err := validate.RequiredString("handle", "body", string(m.Handle)); err != nil {
		return err
	}

	if err := validate.MaxLength("handle", "body", string(m.Handle), 32); err != nil {
		return err
	}

	return nil
}

func (m *LTIPlacement) validateIconURL(formats strfmt.Registry) error {

	if swag.IsZero(m.IconURL) { // not required
		return nil
	}

	if err := validate.MaxLength("iconUrl", "body", string(m.IconURL), 255); err != nil {
		return err
	}

	return nil
}

func (m *LTIPlacement) validateID(formats strfmt.Registry) error {

	if err := validate.RequiredString("id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *LTIPlacement) validateLaunchLink(formats strfmt.Registry) error {

	if err := validate.RequiredString("launchLink", "body", string(m.LaunchLink)); err != nil {
		return err
	}

	return nil
}

func (m *LTIPlacement) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 50); err != nil {
		return err
	}

	return nil
}

var lTIPlacementTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Application","ContentHandler","ContentItemMessage","System","Administrator","UltraUI","BaseNavigation","CourseNavigation"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		lTIPlacementTypeTypePropEnum = append(lTIPlacementTypeTypePropEnum, v)
	}
}

const (

	// LTIPlacementTypeApplication captures enum value "Application"
	LTIPlacementTypeApplication string = "Application"

	// LTIPlacementTypeContentHandler captures enum value "ContentHandler"
	LTIPlacementTypeContentHandler string = "ContentHandler"

	// LTIPlacementTypeContentItemMessage captures enum value "ContentItemMessage"
	LTIPlacementTypeContentItemMessage string = "ContentItemMessage"

	// LTIPlacementTypeSystem captures enum value "System"
	LTIPlacementTypeSystem string = "System"

	// LTIPlacementTypeAdministrator captures enum value "Administrator"
	LTIPlacementTypeAdministrator string = "Administrator"

	// LTIPlacementTypeUltraUI captures enum value "UltraUI"
	LTIPlacementTypeUltraUI string = "UltraUI"

	// LTIPlacementTypeBaseNavigation captures enum value "BaseNavigation"
	LTIPlacementTypeBaseNavigation string = "BaseNavigation"

	// LTIPlacementTypeCourseNavigation captures enum value "CourseNavigation"
	LTIPlacementTypeCourseNavigation string = "CourseNavigation"
)

// prop value enum
func (m *LTIPlacement) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, lTIPlacementTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *LTIPlacement) validateType(formats strfmt.Registry) error {

	if err := validate.RequiredString("type", "body", string(m.Type)); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *LTIPlacement) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("url", "body", m.URL); err != nil {
		return err
	}

	if err := validate.MaxLength("url", "body", string(*m.URL), 1024); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LTIPlacement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LTIPlacement) UnmarshalBinary(b []byte) error {
	var res LTIPlacement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// LTIPlacementAvailability Availability
//
// Settings controlling availability of the placement.
//
// swagger:model LTIPlacementAvailability
type LTIPlacementAvailability struct {

	// Whether the placement is available within the system.
	//
	//
	// | Type      | Description
	//  | --------- | --------- |
	// | Yes |  |
	// | No |  |
	//
	// Enum: [Yes No]
	Available string `json:"available,omitempty"`
}

// Validate validates this l t i placement availability
func (m *LTIPlacementAvailability) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailable(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var lTIPlacementAvailabilityTypeAvailablePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Yes","No"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		lTIPlacementAvailabilityTypeAvailablePropEnum = append(lTIPlacementAvailabilityTypeAvailablePropEnum, v)
	}
}

const (

	// LTIPlacementAvailabilityAvailableYes captures enum value "Yes"
	LTIPlacementAvailabilityAvailableYes string = "Yes"

	// LTIPlacementAvailabilityAvailableNo captures enum value "No"
	LTIPlacementAvailabilityAvailableNo string = "No"
)

// prop value enum
func (m *LTIPlacementAvailability) validateAvailableEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, lTIPlacementAvailabilityTypeAvailablePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *LTIPlacementAvailability) validateAvailable(formats strfmt.Registry) error {

	if swag.IsZero(m.Available) { // not required
		return nil
	}

	// value enum
	if err := m.validateAvailableEnum("availability"+"."+"available", "body", m.Available); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LTIPlacementAvailability) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LTIPlacementAvailability) UnmarshalBinary(b []byte) error {
	var res LTIPlacementAvailability
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
