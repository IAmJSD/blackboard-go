// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DisplayGrade display grade
//
// swagger:model DisplayGrade
type DisplayGrade struct {

	// The type of Grade Column Grading Schema used when creating the displayed grade
	//
	//
	// | Type      | Description
	//  | --------- | --------- |
	// | Percent |  |
	// | Score |  |
	// | Tabular |  |
	// | Text |  |
	// | CompleteIncomplete |  |
	//
	// Required: true
	// Read Only: true
	// Enum: [Percent Score Tabular Text CompleteIncomplete]
	ScaleType string `json:"scaleType"`

	// The displayed score
	// Required: true
	// Read Only: true
	Score float64 `json:"score"`

	// The displayed text grade, based on the Grade Column Grading Schema or Grade Notation description.
	// Required: true
	// Read Only: true
	Text string `json:"text"`
}

// Validate validates this display grade
func (m *DisplayGrade) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateScaleType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateText(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var displayGradeTypeScaleTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Percent","Score","Tabular","Text","CompleteIncomplete"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		displayGradeTypeScaleTypePropEnum = append(displayGradeTypeScaleTypePropEnum, v)
	}
}

const (

	// DisplayGradeScaleTypePercent captures enum value "Percent"
	DisplayGradeScaleTypePercent string = "Percent"

	// DisplayGradeScaleTypeScore captures enum value "Score"
	DisplayGradeScaleTypeScore string = "Score"

	// DisplayGradeScaleTypeTabular captures enum value "Tabular"
	DisplayGradeScaleTypeTabular string = "Tabular"

	// DisplayGradeScaleTypeText captures enum value "Text"
	DisplayGradeScaleTypeText string = "Text"

	// DisplayGradeScaleTypeCompleteIncomplete captures enum value "CompleteIncomplete"
	DisplayGradeScaleTypeCompleteIncomplete string = "CompleteIncomplete"
)

// prop value enum
func (m *DisplayGrade) validateScaleTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, displayGradeTypeScaleTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DisplayGrade) validateScaleType(formats strfmt.Registry) error {

	if err := validate.RequiredString("scaleType", "body", string(m.ScaleType)); err != nil {
		return err
	}

	// value enum
	if err := m.validateScaleTypeEnum("scaleType", "body", m.ScaleType); err != nil {
		return err
	}

	return nil
}

func (m *DisplayGrade) validateScore(formats strfmt.Registry) error {

	if err := validate.Required("score", "body", float64(m.Score)); err != nil {
		return err
	}

	return nil
}

func (m *DisplayGrade) validateText(formats strfmt.Registry) error {

	if err := validate.RequiredString("text", "body", string(m.Text)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DisplayGrade) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DisplayGrade) UnmarshalBinary(b []byte) error {
	var res DisplayGrade
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
