// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CourseChild course child
//
// swagger:model CourseChild
type CourseChild struct {

	// The child course associated with this cross-listing.
	// Required: true
	ChildCourse *Course `json:"childCourse"`

	// The date this course cross-listing was created.
	// Required: true
	// Read Only: true
	// Format: date-time
	Created strfmt.DateTime `json:"created"`

	// The ID of the data source associated with this course cross-listing.  This may optionally be the data source's externalId using the syntax "externalId:math101".
	DataSourceID string `json:"dataSourceId,omitempty"`

	// The primary ID of the child course associated with this cross-listing.
	// Required: true
	// Read Only: true
	ID string `json:"id"`

	// The primary ID of the parent course associated with this cross-listing.
	// Required: true
	// Read Only: true
	ParentID string `json:"parentId"`
}

// Validate validates this course child
func (m *CourseChild) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChildCourse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CourseChild) validateChildCourse(formats strfmt.Registry) error {

	if err := validate.Required("childCourse", "body", m.ChildCourse); err != nil {
		return err
	}

	if m.ChildCourse != nil {
		if err := m.ChildCourse.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("childCourse")
			}
			return err
		}
	}

	return nil
}

func (m *CourseChild) validateCreated(formats strfmt.Registry) error {

	if err := validate.Required("created", "body", strfmt.DateTime(m.Created)); err != nil {
		return err
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CourseChild) validateID(formats strfmt.Registry) error {

	if err := validate.RequiredString("id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *CourseChild) validateParentID(formats strfmt.Registry) error {

	if err := validate.RequiredString("parentId", "body", string(m.ParentID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CourseChild) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CourseChild) UnmarshalBinary(b []byte) error {
	var res CourseChild
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
