// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InstitutionRole institution role
//
// swagger:model InstitutionRole
type InstitutionRole struct {

	// Indicates if this institution role is custom.
	// Required: true
	// Read Only: true
	Custom bool `json:"custom"`

	// The description of this institution role.
	Description string `json:"description,omitempty"`

	// The id associated with this institution role.
	// Required: true
	// Read Only: true
	ID string `json:"id"`

	// The title of this institution role.
	// Required: true
	Name *string `json:"name"`

	// The String role key associated with this institution role.
	// Required: true
	// Read Only: true
	RoleID string `json:"roleId"`
}

// Validate validates this institution role
func (m *InstitutionRole) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoleID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InstitutionRole) validateCustom(formats strfmt.Registry) error {

	if err := validate.Required("custom", "body", bool(m.Custom)); err != nil {
		return err
	}

	return nil
}

func (m *InstitutionRole) validateID(formats strfmt.Registry) error {

	if err := validate.RequiredString("id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *InstitutionRole) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *InstitutionRole) validateRoleID(formats strfmt.Registry) error {

	if err := validate.RequiredString("roleId", "body", string(m.RoleID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InstitutionRole) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InstitutionRole) UnmarshalBinary(b []byte) error {
	var res InstitutionRole
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
