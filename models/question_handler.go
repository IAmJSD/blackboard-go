// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// QuestionHandler question handler
//
// swagger:model QuestionHandler
type QuestionHandler struct {

	// Type of Question supported.
	//
	//
	// | Type      | Description
	//  | --------- | --------- |
	// | Presentation |   **Since**: 3300.9.0 |
	// | EitherOr | Read Only  **Since**: 3300.9.0 |
	// | Essay | Read Only  **Since**: 3300.9.0 |
	// | MultipleAnswer | Read Only  **Since**: 3400.4.0 |
	// | Numeric | Read Only  **Since**: 3400.4.0 |
	// | MultipleChoice | Read Only  **Since**: 3400.4.0 |
	// | Ordering | Read Only  **Since**: 3400.4.0 |
	// | Matching | Read Only  **Since**: 3400.4.0 |
	// | FillInTheBlank | Read Only  **Since**: 3400.4.0 |
	// | Calculated | Read Only  **Since**: 3400.4.0 |
	// | FileResponse | Read Only  **Since**: 3400.4.0 |
	// | LikertOpinionScale | Read Only  **Since**: 3400.4.0 |
	// | QuizBowl | Read Only  **Since**: 3400.4.0 |
	// | HotSpot | Read Only  **Since**: 3400.4.0 |
	// | JumbledSentence | Read Only  **Since**: 3400.4.0 |
	// | FillInTheBlankPlus | Read Only  **Since**: 3400.4.0 |
	// | QuestionBlock | Read Only  **Since**: 3700.2.0 |
	//
	// Required: true
	// Read Only: true
	// Enum: [Presentation EitherOr Essay MultipleAnswer Numeric MultipleChoice Ordering Matching FillInTheBlank Calculated FileResponse LikertOpinionScale QuizBowl HotSpot JumbledSentence FillInTheBlankPlus QuestionBlock]
	Type string `json:"type"`
}

// Validate validates this question handler
func (m *QuestionHandler) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var questionHandlerTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Presentation","EitherOr","Essay","MultipleAnswer","Numeric","MultipleChoice","Ordering","Matching","FillInTheBlank","Calculated","FileResponse","LikertOpinionScale","QuizBowl","HotSpot","JumbledSentence","FillInTheBlankPlus","QuestionBlock"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		questionHandlerTypeTypePropEnum = append(questionHandlerTypeTypePropEnum, v)
	}
}

const (

	// QuestionHandlerTypePresentation captures enum value "Presentation"
	QuestionHandlerTypePresentation string = "Presentation"

	// QuestionHandlerTypeEitherOr captures enum value "EitherOr"
	QuestionHandlerTypeEitherOr string = "EitherOr"

	// QuestionHandlerTypeEssay captures enum value "Essay"
	QuestionHandlerTypeEssay string = "Essay"

	// QuestionHandlerTypeMultipleAnswer captures enum value "MultipleAnswer"
	QuestionHandlerTypeMultipleAnswer string = "MultipleAnswer"

	// QuestionHandlerTypeNumeric captures enum value "Numeric"
	QuestionHandlerTypeNumeric string = "Numeric"

	// QuestionHandlerTypeMultipleChoice captures enum value "MultipleChoice"
	QuestionHandlerTypeMultipleChoice string = "MultipleChoice"

	// QuestionHandlerTypeOrdering captures enum value "Ordering"
	QuestionHandlerTypeOrdering string = "Ordering"

	// QuestionHandlerTypeMatching captures enum value "Matching"
	QuestionHandlerTypeMatching string = "Matching"

	// QuestionHandlerTypeFillInTheBlank captures enum value "FillInTheBlank"
	QuestionHandlerTypeFillInTheBlank string = "FillInTheBlank"

	// QuestionHandlerTypeCalculated captures enum value "Calculated"
	QuestionHandlerTypeCalculated string = "Calculated"

	// QuestionHandlerTypeFileResponse captures enum value "FileResponse"
	QuestionHandlerTypeFileResponse string = "FileResponse"

	// QuestionHandlerTypeLikertOpinionScale captures enum value "LikertOpinionScale"
	QuestionHandlerTypeLikertOpinionScale string = "LikertOpinionScale"

	// QuestionHandlerTypeQuizBowl captures enum value "QuizBowl"
	QuestionHandlerTypeQuizBowl string = "QuizBowl"

	// QuestionHandlerTypeHotSpot captures enum value "HotSpot"
	QuestionHandlerTypeHotSpot string = "HotSpot"

	// QuestionHandlerTypeJumbledSentence captures enum value "JumbledSentence"
	QuestionHandlerTypeJumbledSentence string = "JumbledSentence"

	// QuestionHandlerTypeFillInTheBlankPlus captures enum value "FillInTheBlankPlus"
	QuestionHandlerTypeFillInTheBlankPlus string = "FillInTheBlankPlus"

	// QuestionHandlerTypeQuestionBlock captures enum value "QuestionBlock"
	QuestionHandlerTypeQuestionBlock string = "QuestionBlock"
)

// prop value enum
func (m *QuestionHandler) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, questionHandlerTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *QuestionHandler) validateType(formats strfmt.Registry) error {

	if err := validate.RequiredString("type", "body", string(m.Type)); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *QuestionHandler) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QuestionHandler) UnmarshalBinary(b []byte) error {
	var res QuestionHandler
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
