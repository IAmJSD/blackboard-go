// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LTIDomainConfig l t i domain config
//
// swagger:model LTIDomainConfig
type LTIDomainConfig struct {

	// Whether this domain configuration is editable by system admins. The "internal" apps created by Blackboard are non-editable. They are created or updated automatically or via Dev Portal, and they are locked to system admins or anyone with public REST access to change them.
	//
	// **Since**: 3800.17.0
	// Required: true
	// Read Only: true
	AllowEdit bool `json:"allowEdit"`

	// Whether the Tool is allowed to call the LTI Assignment and Grades service and manage line items and grades.
	//
	// **Since**: 3600.0.0
	AllowGradesService bool `json:"allowGradesService,omitempty"`

	// Whether the Tool is allowed to call the LTI Names and Roles service and get the course memberships.
	AllowMembershipService bool `json:"allowMembershipService,omitempty"`

	// The client id associated with this configuration. Only applicable for LTI versions 1.3+, excluding 2.0
	//
	// **Since**: 3600.0.0
	ClientID string `json:"clientId,omitempty"`

	// The custom parameters for the given domain.
	CustomParameters map[string]string `json:"customParameters,omitempty"`

	// The ID associated with this domainConfig.
	// Required: true
	// Read Only: true
	ID string `json:"id"`

	// The JWKS URL of the tool, if specified. It is optional and can be null
	//
	// **Since**: 3800.17.0
	JwksURL string `json:"jwksUrl,omitempty"`

	// If true, a new link to this LTI domain must supply its own key and secret. If false, the key and secret for this domain are already configured system-wide. This is a read-only property that is determined by the presence of a key and secret.
	// Required: true
	// Read Only: true
	PerLinkCredentials bool `json:"perLinkCredentials"`

	// The primary domain name associated with this configuration.
	PrimaryDomain string `json:"primaryDomain,omitempty"`

	// The public key of the tool, if specified. It is optional and can be null
	//
	// **Since**: 3800.17.0
	PublicKey string `json:"publicKey,omitempty"`

	// Whether the user's email address can be sent to the LTI tool provider.
	SendEmail bool `json:"sendEmail,omitempty"`

	// Whether the user's name can be sent to the LTI tool provider.
	SendName bool `json:"sendName,omitempty"`

	// Whether the user's role can be sent to the LTI tool provider.
	SendRole bool `json:"sendRole,omitempty"`

	// Enum indicating when user data can be sent to the LTI tool provider.
	//
	//
	// | Type      | Description
	//  | --------- | --------- |
	// | Never |  |
	// | Sslonly |  |
	// | Always |   **Since**: 3300.9.0 |
	//
	// Enum: [Never Sslonly Always]
	SendUserDataType string `json:"sendUserDataType,omitempty"`

	// Enum that indicates if the set of domains associated with this config can or cannot be linked to.
	//
	//
	// | Type      | Description
	//  | --------- | --------- |
	// | Approved |  |
	// | Excluded |  |
	// | NeedsApproval |   **Since**: 3300.9.0 |
	//
	// Enum: [Approved Excluded NeedsApproval]
	Status string `json:"status,omitempty"`

	// Whether a splash screen is shown before launching the LTI link.
	//
	// Cannot be set to true if allowMembershipService is true.
	UseSplashScreen bool `json:"useSplashScreen,omitempty"`
}

// Validate validates this l t i domain config
func (m *LTIDomainConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllowEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePerLinkCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSendUserDataType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LTIDomainConfig) validateAllowEdit(formats strfmt.Registry) error {

	if err := validate.Required("allowEdit", "body", bool(m.AllowEdit)); err != nil {
		return err
	}

	return nil
}

func (m *LTIDomainConfig) validateID(formats strfmt.Registry) error {

	if err := validate.RequiredString("id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *LTIDomainConfig) validatePerLinkCredentials(formats strfmt.Registry) error {

	if err := validate.Required("perLinkCredentials", "body", bool(m.PerLinkCredentials)); err != nil {
		return err
	}

	return nil
}

var lTIDomainConfigTypeSendUserDataTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Never","Sslonly","Always"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		lTIDomainConfigTypeSendUserDataTypePropEnum = append(lTIDomainConfigTypeSendUserDataTypePropEnum, v)
	}
}

const (

	// LTIDomainConfigSendUserDataTypeNever captures enum value "Never"
	LTIDomainConfigSendUserDataTypeNever string = "Never"

	// LTIDomainConfigSendUserDataTypeSslonly captures enum value "Sslonly"
	LTIDomainConfigSendUserDataTypeSslonly string = "Sslonly"

	// LTIDomainConfigSendUserDataTypeAlways captures enum value "Always"
	LTIDomainConfigSendUserDataTypeAlways string = "Always"
)

// prop value enum
func (m *LTIDomainConfig) validateSendUserDataTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, lTIDomainConfigTypeSendUserDataTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *LTIDomainConfig) validateSendUserDataType(formats strfmt.Registry) error {

	if swag.IsZero(m.SendUserDataType) { // not required
		return nil
	}

	// value enum
	if err := m.validateSendUserDataTypeEnum("sendUserDataType", "body", m.SendUserDataType); err != nil {
		return err
	}

	return nil
}

var lTIDomainConfigTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Approved","Excluded","NeedsApproval"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		lTIDomainConfigTypeStatusPropEnum = append(lTIDomainConfigTypeStatusPropEnum, v)
	}
}

const (

	// LTIDomainConfigStatusApproved captures enum value "Approved"
	LTIDomainConfigStatusApproved string = "Approved"

	// LTIDomainConfigStatusExcluded captures enum value "Excluded"
	LTIDomainConfigStatusExcluded string = "Excluded"

	// LTIDomainConfigStatusNeedsApproval captures enum value "NeedsApproval"
	LTIDomainConfigStatusNeedsApproval string = "NeedsApproval"
)

// prop value enum
func (m *LTIDomainConfig) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, lTIDomainConfigTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *LTIDomainConfig) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LTIDomainConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LTIDomainConfig) UnmarshalBinary(b []byte) error {
	var res LTIDomainConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
