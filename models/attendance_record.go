// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AttendanceRecord attendance record
//
// swagger:model AttendanceRecord
type AttendanceRecord struct {

	// The primary ID of the attendance record.
	// Required: true
	// Read Only: true
	ID int64 `json:"id"`

	// The primary id of the meeting.
	// Required: true
	MeetingID *string `json:"meetingId"`

	// The attendance status of the user.
	//
	//
	// | Type      | Description
	//  | --------- | --------- |
	// | Absent |  |
	// | Late |  |
	// | Present |  |
	// | Excused |  |
	//
	// Required: true
	// Enum: [Absent Late Present Excused]
	Status *string `json:"status"`

	// The learn external id of the user.
	// Required: true
	UserID *string `json:"userId"`
}

// Validate validates this attendance record
func (m *AttendanceRecord) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMeetingID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AttendanceRecord) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", int64(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *AttendanceRecord) validateMeetingID(formats strfmt.Registry) error {

	if err := validate.Required("meetingId", "body", m.MeetingID); err != nil {
		return err
	}

	return nil
}

var attendanceRecordTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Absent","Late","Present","Excused"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		attendanceRecordTypeStatusPropEnum = append(attendanceRecordTypeStatusPropEnum, v)
	}
}

const (

	// AttendanceRecordStatusAbsent captures enum value "Absent"
	AttendanceRecordStatusAbsent string = "Absent"

	// AttendanceRecordStatusLate captures enum value "Late"
	AttendanceRecordStatusLate string = "Late"

	// AttendanceRecordStatusPresent captures enum value "Present"
	AttendanceRecordStatusPresent string = "Present"

	// AttendanceRecordStatusExcused captures enum value "Excused"
	AttendanceRecordStatusExcused string = "Excused"
)

// prop value enum
func (m *AttendanceRecord) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, attendanceRecordTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AttendanceRecord) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

func (m *AttendanceRecord) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("userId", "body", m.UserID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AttendanceRecord) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AttendanceRecord) UnmarshalBinary(b []byte) error {
	var res AttendanceRecord
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
