// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Announcement announcement
//
// swagger:model Announcement
type Announcement struct {

	// availability
	Availability *AnnouncementAvailability `json:"availability,omitempty"`

	// The message body of the System Announcement. This field supports BbML; see <a target='_blank' href='https://docs.blackboard.com/learn/REST/Blackboard%20Markup%20Language%20-%20BbML.html'>here</a> for more information.
	Body string `json:"body,omitempty"`

	// The date that the System Announcement was created.
	// Required: true
	// Read Only: true
	// Format: date-time
	Created strfmt.DateTime `json:"created"`

	// Primary key identifier
	// Required: true
	// Read Only: true
	ID string `json:"id"`

	// modified
	// Required: true
	// Read Only: true
	// Format: date-time
	Modified strfmt.DateTime `json:"modified"`

	// Whether this System Announcement should be displayed on the login page.
	ShowAtLogin bool `json:"showAtLogin,omitempty"`

	// Whether this System Announcement should be displayed on courses.
	ShowInCourses bool `json:"showInCourses,omitempty"`

	// The title of this System Announcement.
	// Required: true
	Title *string `json:"title"`
}

// Validate validates this announcement
func (m *Announcement) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailability(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Announcement) validateAvailability(formats strfmt.Registry) error {

	if swag.IsZero(m.Availability) { // not required
		return nil
	}

	if m.Availability != nil {
		if err := m.Availability.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("availability")
			}
			return err
		}
	}

	return nil
}

func (m *Announcement) validateCreated(formats strfmt.Registry) error {

	if err := validate.Required("created", "body", strfmt.DateTime(m.Created)); err != nil {
		return err
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Announcement) validateID(formats strfmt.Registry) error {

	if err := validate.RequiredString("id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *Announcement) validateModified(formats strfmt.Registry) error {

	if err := validate.Required("modified", "body", strfmt.DateTime(m.Modified)); err != nil {
		return err
	}

	if err := validate.FormatOf("modified", "body", "date-time", m.Modified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Announcement) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Announcement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Announcement) UnmarshalBinary(b []byte) error {
	var res Announcement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AnnouncementAvailability Availability
//
// Settings controlling availability of the System Announcement.
//
// swagger:model AnnouncementAvailability
type AnnouncementAvailability struct {

	// duration
	Duration *AnnouncementAvailabilityDuration `json:"duration,omitempty"`
}

// Validate validates this announcement availability
func (m *AnnouncementAvailability) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDuration(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AnnouncementAvailability) validateDuration(formats strfmt.Registry) error {

	if swag.IsZero(m.Duration) { // not required
		return nil
	}

	if m.Duration != nil {
		if err := m.Duration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("availability" + "." + "duration")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AnnouncementAvailability) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AnnouncementAvailability) UnmarshalBinary(b []byte) error {
	var res AnnouncementAvailability
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AnnouncementAvailabilityDuration Duration
//
// Duration indicates when the System Announcement is Available based on whether it is Permanent or if the date/time of the request falls within its Start & End dates.
//
// swagger:model AnnouncementAvailabilityDuration
type AnnouncementAvailabilityDuration struct {

	// The date this Announcement stops being Available.
	// Format: date-time
	End strfmt.DateTime `json:"end,omitempty"`

	// The date this Announcement starts being Available.
	// Format: date-time
	Start strfmt.DateTime `json:"start,omitempty"`

	// Indicates whether this System Announcement is always displayed (Permanent) or if it is shown only between the Start and End dates (Restricted).
	//
	//
	// | Type      | Description
	//  | --------- | --------- |
	// | Permanent | The Announcement will always be displayed. |
	// | Restricted | The Announcement will start being displayed on Duration.Start and stop being displayed on Duration.End |
	//
	// Enum: [Permanent Restricted]
	Type string `json:"type,omitempty"`
}

// Validate validates this announcement availability duration
func (m *AnnouncementAvailabilityDuration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AnnouncementAvailabilityDuration) validateEnd(formats strfmt.Registry) error {

	if swag.IsZero(m.End) { // not required
		return nil
	}

	if err := validate.FormatOf("availability"+"."+"duration"+"."+"end", "body", "date-time", m.End.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AnnouncementAvailabilityDuration) validateStart(formats strfmt.Registry) error {

	if swag.IsZero(m.Start) { // not required
		return nil
	}

	if err := validate.FormatOf("availability"+"."+"duration"+"."+"start", "body", "date-time", m.Start.String(), formats); err != nil {
		return err
	}

	return nil
}

var announcementAvailabilityDurationTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Permanent","Restricted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		announcementAvailabilityDurationTypeTypePropEnum = append(announcementAvailabilityDurationTypeTypePropEnum, v)
	}
}

const (

	// AnnouncementAvailabilityDurationTypePermanent captures enum value "Permanent"
	AnnouncementAvailabilityDurationTypePermanent string = "Permanent"

	// AnnouncementAvailabilityDurationTypeRestricted captures enum value "Restricted"
	AnnouncementAvailabilityDurationTypeRestricted string = "Restricted"
)

// prop value enum
func (m *AnnouncementAvailabilityDuration) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, announcementAvailabilityDurationTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AnnouncementAvailabilityDuration) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("availability"+"."+"duration"+"."+"type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AnnouncementAvailabilityDuration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AnnouncementAvailabilityDuration) UnmarshalBinary(b []byte) error {
	var res AnnouncementAvailabilityDuration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
