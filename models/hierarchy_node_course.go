// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HierarchyNodeCourse hierarchy node course
//
// swagger:model HierarchyNodeCourse
type HierarchyNodeCourse struct {

	// course
	// Required: true
	Course *CourseV2 `json:"course"`

	// The primary ID of the Course
	// Required: true
	// Read Only: true
	CourseID string `json:"courseId"`

	// Whether or not this association represents the primary node association of the course
	IsPrimary bool `json:"isPrimary,omitempty"`

	// The primary ID of the Hierarchy Node
	// Required: true
	// Read Only: true
	NodeID string `json:"nodeId"`
}

// Validate validates this hierarchy node course
func (m *HierarchyNodeCourse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCourse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCourseID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HierarchyNodeCourse) validateCourse(formats strfmt.Registry) error {

	if err := validate.Required("course", "body", m.Course); err != nil {
		return err
	}

	if m.Course != nil {
		if err := m.Course.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("course")
			}
			return err
		}
	}

	return nil
}

func (m *HierarchyNodeCourse) validateCourseID(formats strfmt.Registry) error {

	if err := validate.RequiredString("courseId", "body", string(m.CourseID)); err != nil {
		return err
	}

	return nil
}

func (m *HierarchyNodeCourse) validateNodeID(formats strfmt.Registry) error {

	if err := validate.RequiredString("nodeId", "body", string(m.NodeID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HierarchyNodeCourse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HierarchyNodeCourse) UnmarshalBinary(b []byte) error {
	var res HierarchyNodeCourse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
