// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CourseTask course task
//
// swagger:model CourseTask
type CourseTask struct {

	// The ID of this task.
	// Required: true
	// Read Only: true
	ID string `json:"id"`

	// Task progress, with 0 representing not started and 100 representing done.
	// Required: true
	// Read Only: true
	PercentComplete int32 `json:"percentComplete"`

	// The date the task was started.
	// Required: true
	// Read Only: true
	// Format: date-time
	Started strfmt.DateTime `json:"started"`

	// The status of the task.
	//
	//
	// | Type      | Description
	//  | --------- | --------- |
	// | Queued | initial state of a task |
	// | Assigned |  |
	// | Running |  |
	// | Complete |  |
	// | CompleteWithErrors |  |
	// | Incomplete |  |
	//
	// Required: true
	// Read Only: true
	// Enum: [Queued Assigned Running Complete CompleteWithErrors Incomplete]
	Status string `json:"status"`
}

// Validate validates this course task
func (m *CourseTask) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePercentComplete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStarted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CourseTask) validateID(formats strfmt.Registry) error {

	if err := validate.RequiredString("id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *CourseTask) validatePercentComplete(formats strfmt.Registry) error {

	if err := validate.Required("percentComplete", "body", int32(m.PercentComplete)); err != nil {
		return err
	}

	return nil
}

func (m *CourseTask) validateStarted(formats strfmt.Registry) error {

	if err := validate.Required("started", "body", strfmt.DateTime(m.Started)); err != nil {
		return err
	}

	if err := validate.FormatOf("started", "body", "date-time", m.Started.String(), formats); err != nil {
		return err
	}

	return nil
}

var courseTaskTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Queued","Assigned","Running","Complete","CompleteWithErrors","Incomplete"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		courseTaskTypeStatusPropEnum = append(courseTaskTypeStatusPropEnum, v)
	}
}

const (

	// CourseTaskStatusQueued captures enum value "Queued"
	CourseTaskStatusQueued string = "Queued"

	// CourseTaskStatusAssigned captures enum value "Assigned"
	CourseTaskStatusAssigned string = "Assigned"

	// CourseTaskStatusRunning captures enum value "Running"
	CourseTaskStatusRunning string = "Running"

	// CourseTaskStatusComplete captures enum value "Complete"
	CourseTaskStatusComplete string = "Complete"

	// CourseTaskStatusCompleteWithErrors captures enum value "CompleteWithErrors"
	CourseTaskStatusCompleteWithErrors string = "CompleteWithErrors"

	// CourseTaskStatusIncomplete captures enum value "Incomplete"
	CourseTaskStatusIncomplete string = "Incomplete"
)

// prop value enum
func (m *CourseTask) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, courseTaskTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CourseTask) validateStatus(formats strfmt.Registry) error {

	if err := validate.RequiredString("status", "body", string(m.Status)); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CourseTask) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CourseTask) UnmarshalBinary(b []byte) error {
	var res CourseTask
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
