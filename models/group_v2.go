// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GroupV2 group v2
//
// swagger:model GroupV2
type GroupV2 struct {

	// availability
	Availability *GroupV2Availability `json:"availability,omitempty"`

	// Created date of the group
	//
	// **Since**: 3800.8.0
	// Required: true
	// Read Only: true
	// Format: date-time
	Created strfmt.DateTime `json:"created"`

	// The description of the group. This field supports BbML; see <a target='_blank' href='https://docs.blackboard.com/learn/REST/Blackboard%20Markup%20Language%20-%20BbML.html'>here</a> for more information.
	Description string `json:"description,omitempty"`

	// enrollment
	// Required: true
	Enrollment *GroupV2Enrollment `json:"enrollment"`

	// An externally-defined unique ID for the group. Defaults to a random UUID if not provided during create.
	ExternalID string `json:"externalId,omitempty"`

	// The primary ID of the group's parent group set.
	// Required: true
	// Read Only: true
	GroupSetID string `json:"groupSetId"`

	// The primary ID of the group.
	// Required: true
	// Read Only: true
	ID string `json:"id"`

	// Modified date of the group
	//
	// **Since**: 3800.8.0
	// Required: true
	// Read Only: true
	// Format: date-time
	Modified strfmt.DateTime `json:"modified"`

	// The title of the group.
	// Required: true
	Name *string `json:"name"`

	// A system-wide unique identifier created by Learn
	// Required: true
	// Read Only: true
	UUID string `json:"uuid"`
}

// Validate validates this group v2
func (m *GroupV2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailability(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnrollment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroupSetID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GroupV2) validateAvailability(formats strfmt.Registry) error {

	if swag.IsZero(m.Availability) { // not required
		return nil
	}

	if m.Availability != nil {
		if err := m.Availability.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("availability")
			}
			return err
		}
	}

	return nil
}

func (m *GroupV2) validateCreated(formats strfmt.Registry) error {

	if err := validate.Required("created", "body", strfmt.DateTime(m.Created)); err != nil {
		return err
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GroupV2) validateEnrollment(formats strfmt.Registry) error {

	if err := validate.Required("enrollment", "body", m.Enrollment); err != nil {
		return err
	}

	if m.Enrollment != nil {
		if err := m.Enrollment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("enrollment")
			}
			return err
		}
	}

	return nil
}

func (m *GroupV2) validateGroupSetID(formats strfmt.Registry) error {

	if err := validate.RequiredString("groupSetId", "body", string(m.GroupSetID)); err != nil {
		return err
	}

	return nil
}

func (m *GroupV2) validateID(formats strfmt.Registry) error {

	if err := validate.RequiredString("id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *GroupV2) validateModified(formats strfmt.Registry) error {

	if err := validate.Required("modified", "body", strfmt.DateTime(m.Modified)); err != nil {
		return err
	}

	if err := validate.FormatOf("modified", "body", "date-time", m.Modified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GroupV2) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *GroupV2) validateUUID(formats strfmt.Registry) error {

	if err := validate.RequiredString("uuid", "body", string(m.UUID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GroupV2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GroupV2) UnmarshalBinary(b []byte) error {
	var res GroupV2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GroupV2Availability Availability
//
// Settings controlling availability of the group to students.
//
// swagger:model GroupV2Availability
type GroupV2Availability struct {

	// Whether the Group is currently available to students.
	//
	//
	// | Type      | Description
	//  | --------- | --------- |
	// | Yes | Students may access the group. |
	// | No | Students may not access the group. |
	// | SignupOnly | Students may only signup and see the group listed, not yet access it. |
	//
	// Enum: [Yes No SignupOnly]
	Available string `json:"available,omitempty"`
}

// Validate validates this group v2 availability
func (m *GroupV2Availability) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailable(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var groupV2AvailabilityTypeAvailablePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Yes","No","SignupOnly"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		groupV2AvailabilityTypeAvailablePropEnum = append(groupV2AvailabilityTypeAvailablePropEnum, v)
	}
}

const (

	// GroupV2AvailabilityAvailableYes captures enum value "Yes"
	GroupV2AvailabilityAvailableYes string = "Yes"

	// GroupV2AvailabilityAvailableNo captures enum value "No"
	GroupV2AvailabilityAvailableNo string = "No"

	// GroupV2AvailabilityAvailableSignupOnly captures enum value "SignupOnly"
	GroupV2AvailabilityAvailableSignupOnly string = "SignupOnly"
)

// prop value enum
func (m *GroupV2Availability) validateAvailableEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, groupV2AvailabilityTypeAvailablePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GroupV2Availability) validateAvailable(formats strfmt.Registry) error {

	if swag.IsZero(m.Available) { // not required
		return nil
	}

	// value enum
	if err := m.validateAvailableEnum("availability"+"."+"available", "body", m.Available); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GroupV2Availability) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GroupV2Availability) UnmarshalBinary(b []byte) error {
	var res GroupV2Availability
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GroupV2Enrollment Enrollment
//
// Settings controlling enrollment of the group to students.
//
// swagger:model GroupV2Enrollment
type GroupV2Enrollment struct {

	// The maximum allowed enrollment size for self enrolled groups.
	Limit int32 `json:"limit,omitempty"`

	// signup sheet
	SignupSheet *GroupV2EnrollmentSignupSheet `json:"signupSheet,omitempty"`

	// Whether the Group allows self enrollment or only enrolled by instructor. This can only be set on creation.
	//
	//
	// | Type      | Description
	//  | --------- | --------- |
	// | InstructorOnly | Students are added to the Group by the instructor |
	// | SelfEnrollment | Students are added to the Group by self enrollment |
	//
	// Required: true
	// Read Only: true
	// Enum: [InstructorOnly SelfEnrollment]
	Type string `json:"type"`
}

// Validate validates this group v2 enrollment
func (m *GroupV2Enrollment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSignupSheet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GroupV2Enrollment) validateSignupSheet(formats strfmt.Registry) error {

	if swag.IsZero(m.SignupSheet) { // not required
		return nil
	}

	if m.SignupSheet != nil {
		if err := m.SignupSheet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("enrollment" + "." + "signupSheet")
			}
			return err
		}
	}

	return nil
}

var groupV2EnrollmentTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["InstructorOnly","SelfEnrollment"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		groupV2EnrollmentTypeTypePropEnum = append(groupV2EnrollmentTypeTypePropEnum, v)
	}
}

const (

	// GroupV2EnrollmentTypeInstructorOnly captures enum value "InstructorOnly"
	GroupV2EnrollmentTypeInstructorOnly string = "InstructorOnly"

	// GroupV2EnrollmentTypeSelfEnrollment captures enum value "SelfEnrollment"
	GroupV2EnrollmentTypeSelfEnrollment string = "SelfEnrollment"
)

// prop value enum
func (m *GroupV2Enrollment) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, groupV2EnrollmentTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GroupV2Enrollment) validateType(formats strfmt.Registry) error {

	if err := validate.RequiredString("enrollment"+"."+"type", "body", string(m.Type)); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("enrollment"+"."+"type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GroupV2Enrollment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GroupV2Enrollment) UnmarshalBinary(b []byte) error {
	var res GroupV2Enrollment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GroupV2EnrollmentSignupSheet SignupSheet
//
// Settings controlling signup to the group for students. Only applicable if Enrollment.Type allows self enrollment.
//
// swagger:model GroupV2EnrollmentSignupSheet
type GroupV2EnrollmentSignupSheet struct {

	// The description of the signup sheet This field supports BbML; see <a target='_blank' href='https://docs.blackboard.com/learn/REST/Blackboard%20Markup%20Language%20-%20BbML.html'>here</a> for more information.
	Description string `json:"description,omitempty"`

	// The name of the signup sheet
	Name string `json:"name,omitempty"`

	// A boolean indicating whether or not members can be seen by others prior to signing up.
	ShowMembers bool `json:"showMembers,omitempty"`
}

// Validate validates this group v2 enrollment signup sheet
func (m *GroupV2EnrollmentSignupSheet) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GroupV2EnrollmentSignupSheet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GroupV2EnrollmentSignupSheet) UnmarshalBinary(b []byte) error {
	var res GroupV2EnrollmentSignupSheet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
