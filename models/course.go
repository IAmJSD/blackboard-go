// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Course course
//
// swagger:model Course
type Course struct {

	// Whether guests (users with the role guest) are allowed access to the course. Defaults to true.
	AllowGuests bool `json:"allowGuests,omitempty"`

	// availability
	Availability *CourseAvailability `json:"availability,omitempty"`

	// The Course ID attribute, shown to users in the UI.
	// Required: true
	// Read Only: true
	// Max Length: 100
	CourseID string `json:"courseId"`

	// The date this course was created.
	// Required: true
	// Read Only: true
	// Format: date-time
	Created strfmt.DateTime `json:"created"`

	// The ID of the data source associated with this course. This may optionally be the data source's externalId using the syntax "externalId:math101".
	DataSourceID string `json:"dataSourceId,omitempty"`

	// The description of the course.
	Description string `json:"description,omitempty"`

	// enrollment
	Enrollment *CourseEnrollment `json:"enrollment,omitempty"`

	// A URL corresponding to the Course Page for the course.  Formatting varies based on whether the course is rendered using Classic or Ultra Course View
	//
	// **Since**: 3200.3.0
	// Required: true
	// Read Only: true
	ExternalAccessURL string `json:"externalAccessUrl"`

	// An optional externally-defined unique ID for the course. Defaults to the courseId.
	//
	// Formerly known as 'batchUid'.
	// Max Length: 256
	ExternalID string `json:"externalId,omitempty"`

	// A URL for viewing the Course Page for the course as a guest.  Formatting varies based on whether the course is rendered using Classic or Ultra Course View
	//
	// **Since**: 3200.3.0
	// Required: true
	// Read Only: true
	GuestAccessURL string `json:"guestAccessUrl"`

	// Whether the course has any cross-listed children.
	//
	// **Since**: 3000.11.0
	// Required: true
	// Read Only: true
	HasChildren bool `json:"hasChildren"`

	// The primary ID of the course.
	// Required: true
	// Read Only: true
	ID string `json:"id"`

	// locale
	Locale *CourseLocale `json:"locale,omitempty"`

	// The name of the course.
	// Required: true
	// Max Length: 333
	Name *string `json:"name"`

	// Whether this object represents an Organization. Defaults to false.
	// Required: true
	// Read Only: true
	Organization bool `json:"organization"`

	// The cross-listed parentId associated with the course, if the course is a child course.
	//
	// **Since**: 3000.11.0
	// Required: true
	// Read Only: true
	ParentID string `json:"parentId"`

	// This status does not affect availability of the course for viewing in any way. readOnly is valid for both Ultra and Classic courses. If an Ultra course is in readOnly mode, updates are not possible. For a Classic course in readOnly mode, updates are still possible (through Web UI but not through REST i.e. closed is enforced for original courses when updated through REST the same way Ultra courses are blocked) but new notifications are not generated.
	//
	// **Deprecated**: since 3400.8.0; use the v2 endpoint's closedComplete property instead
	ReadOnly bool `json:"readOnly,omitempty"`

	// The ID of the term associated to this course. This may optionally be the term's externalId using the syntax "externalId:spring.2016".
	TermID string `json:"termId,omitempty"`

	// Whether the course is rendered using Classic or Ultra Course View.
	//
	//
	// | Type      | Description
	//  | --------- | --------- |
	// | Undecided | The ultra status is not decided. |
	// | Classic | The course is decided as classic. |
	// | Ultra | The course is decided as ultra |
	// | UltraPreview | The course is currently in Ultra mode but during the preview state where it may still be reverted via a Restore to the classic state |
	//
	// Required: true
	// Read Only: true
	// Enum: [Undecided Classic Ultra UltraPreview]
	UltraStatus string `json:"ultraStatus"`

	// A secondary unique ID for the course. Used by LTI launches and other inter-server operations.
	// Required: true
	// Read Only: true
	// Max Length: 32
	UUID string `json:"uuid"`
}

// Validate validates this course
func (m *Course) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailability(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCourseID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnrollment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalAccessURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGuestAccessURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHasChildren(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocale(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUltraStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Course) validateAvailability(formats strfmt.Registry) error {

	if swag.IsZero(m.Availability) { // not required
		return nil
	}

	if m.Availability != nil {
		if err := m.Availability.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("availability")
			}
			return err
		}
	}

	return nil
}

func (m *Course) validateCourseID(formats strfmt.Registry) error {

	if err := validate.RequiredString("courseId", "body", string(m.CourseID)); err != nil {
		return err
	}

	if err := validate.MaxLength("courseId", "body", string(m.CourseID), 100); err != nil {
		return err
	}

	return nil
}

func (m *Course) validateCreated(formats strfmt.Registry) error {

	if err := validate.Required("created", "body", strfmt.DateTime(m.Created)); err != nil {
		return err
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Course) validateEnrollment(formats strfmt.Registry) error {

	if swag.IsZero(m.Enrollment) { // not required
		return nil
	}

	if m.Enrollment != nil {
		if err := m.Enrollment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("enrollment")
			}
			return err
		}
	}

	return nil
}

func (m *Course) validateExternalAccessURL(formats strfmt.Registry) error {

	if err := validate.RequiredString("externalAccessUrl", "body", string(m.ExternalAccessURL)); err != nil {
		return err
	}

	return nil
}

func (m *Course) validateExternalID(formats strfmt.Registry) error {

	if swag.IsZero(m.ExternalID) { // not required
		return nil
	}

	if err := validate.MaxLength("externalId", "body", string(m.ExternalID), 256); err != nil {
		return err
	}

	return nil
}

func (m *Course) validateGuestAccessURL(formats strfmt.Registry) error {

	if err := validate.RequiredString("guestAccessUrl", "body", string(m.GuestAccessURL)); err != nil {
		return err
	}

	return nil
}

func (m *Course) validateHasChildren(formats strfmt.Registry) error {

	if err := validate.Required("hasChildren", "body", bool(m.HasChildren)); err != nil {
		return err
	}

	return nil
}

func (m *Course) validateID(formats strfmt.Registry) error {

	if err := validate.RequiredString("id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *Course) validateLocale(formats strfmt.Registry) error {

	if swag.IsZero(m.Locale) { // not required
		return nil
	}

	if m.Locale != nil {
		if err := m.Locale.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("locale")
			}
			return err
		}
	}

	return nil
}

func (m *Course) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 333); err != nil {
		return err
	}

	return nil
}

func (m *Course) validateOrganization(formats strfmt.Registry) error {

	if err := validate.Required("organization", "body", bool(m.Organization)); err != nil {
		return err
	}

	return nil
}

func (m *Course) validateParentID(formats strfmt.Registry) error {

	if err := validate.RequiredString("parentId", "body", string(m.ParentID)); err != nil {
		return err
	}

	return nil
}

var courseTypeUltraStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Undecided","Classic","Ultra","UltraPreview"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		courseTypeUltraStatusPropEnum = append(courseTypeUltraStatusPropEnum, v)
	}
}

const (

	// CourseUltraStatusUndecided captures enum value "Undecided"
	CourseUltraStatusUndecided string = "Undecided"

	// CourseUltraStatusClassic captures enum value "Classic"
	CourseUltraStatusClassic string = "Classic"

	// CourseUltraStatusUltra captures enum value "Ultra"
	CourseUltraStatusUltra string = "Ultra"

	// CourseUltraStatusUltraPreview captures enum value "UltraPreview"
	CourseUltraStatusUltraPreview string = "UltraPreview"
)

// prop value enum
func (m *Course) validateUltraStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, courseTypeUltraStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Course) validateUltraStatus(formats strfmt.Registry) error {

	if err := validate.RequiredString("ultraStatus", "body", string(m.UltraStatus)); err != nil {
		return err
	}

	// value enum
	if err := m.validateUltraStatusEnum("ultraStatus", "body", m.UltraStatus); err != nil {
		return err
	}

	return nil
}

func (m *Course) validateUUID(formats strfmt.Registry) error {

	if err := validate.RequiredString("uuid", "body", string(m.UUID)); err != nil {
		return err
	}

	if err := validate.MaxLength("uuid", "body", string(m.UUID), 32); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Course) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Course) UnmarshalBinary(b []byte) error {
	var res Course
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CourseAvailability Availability
//
// Settings controlling availability of the course to students.
//
// swagger:model CourseAvailability
type CourseAvailability struct {

	// Whether the course is currently available to students. Instructors can always access the course if they have 'Access unavailable course' entitlement. If set to 'Term', the course's parent term availability settings will be used.
	//
	//
	// | Type      | Description
	//  | --------- | --------- |
	// | Yes | Students may access the course. |
	// | No | Students may not access the course. |
	// | Disabled | Disabled by the SIS. Students may not access the course.  **Since**: 3100.0.0 |
	// | Term | Availability is inherited from the term settings. Requires a termId be set. |
	//
	// Enum: [Yes No Disabled Term]
	Available string `json:"available,omitempty"`

	// duration
	Duration *CourseAvailabilityDuration `json:"duration,omitempty"`
}

// Validate validates this course availability
func (m *CourseAvailability) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDuration(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var courseAvailabilityTypeAvailablePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Yes","No","Disabled","Term"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		courseAvailabilityTypeAvailablePropEnum = append(courseAvailabilityTypeAvailablePropEnum, v)
	}
}

const (

	// CourseAvailabilityAvailableYes captures enum value "Yes"
	CourseAvailabilityAvailableYes string = "Yes"

	// CourseAvailabilityAvailableNo captures enum value "No"
	CourseAvailabilityAvailableNo string = "No"

	// CourseAvailabilityAvailableDisabled captures enum value "Disabled"
	CourseAvailabilityAvailableDisabled string = "Disabled"

	// CourseAvailabilityAvailableTerm captures enum value "Term"
	CourseAvailabilityAvailableTerm string = "Term"
)

// prop value enum
func (m *CourseAvailability) validateAvailableEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, courseAvailabilityTypeAvailablePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CourseAvailability) validateAvailable(formats strfmt.Registry) error {

	if swag.IsZero(m.Available) { // not required
		return nil
	}

	// value enum
	if err := m.validateAvailableEnum("availability"+"."+"available", "body", m.Available); err != nil {
		return err
	}

	return nil
}

func (m *CourseAvailability) validateDuration(formats strfmt.Registry) error {

	if swag.IsZero(m.Duration) { // not required
		return nil
	}

	if m.Duration != nil {
		if err := m.Duration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("availability" + "." + "duration")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CourseAvailability) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CourseAvailability) UnmarshalBinary(b []byte) error {
	var res CourseAvailability
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CourseAvailabilityDuration Duration
//
// Settings controlling the length of time the course is available.
//
// swagger:model CourseAvailabilityDuration
type CourseAvailabilityDuration struct {

	// The number of days this course can be used. May only be set if availability.duration.type is FixedNumDays.
	DaysOfUse int32 `json:"daysOfUse,omitempty"`

	// The date this course ends. May only be set if availability.duration.type is DateRange.
	// Format: date-time
	End strfmt.DateTime `json:"end,omitempty"`

	// The date this course starts. May only be set if availability.duration.type is DateRange.
	// Format: date-time
	Start strfmt.DateTime `json:"start,omitempty"`

	// The intended length of the course.
	//
	//
	// | Type      | Description
	//  | --------- | --------- |
	// | Continuous | Course is active on an ongoing basis. |
	// | DateRange | Course is only intended to be available between specific date ranges |
	// | FixedNumDays | Course is only available for a set number of days |
	// | Term | Course availablity is dictated by its associated term |
	//
	// Enum: [Continuous DateRange FixedNumDays Term]
	Type string `json:"type,omitempty"`
}

// Validate validates this course availability duration
func (m *CourseAvailabilityDuration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CourseAvailabilityDuration) validateEnd(formats strfmt.Registry) error {

	if swag.IsZero(m.End) { // not required
		return nil
	}

	if err := validate.FormatOf("availability"+"."+"duration"+"."+"end", "body", "date-time", m.End.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CourseAvailabilityDuration) validateStart(formats strfmt.Registry) error {

	if swag.IsZero(m.Start) { // not required
		return nil
	}

	if err := validate.FormatOf("availability"+"."+"duration"+"."+"start", "body", "date-time", m.Start.String(), formats); err != nil {
		return err
	}

	return nil
}

var courseAvailabilityDurationTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Continuous","DateRange","FixedNumDays","Term"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		courseAvailabilityDurationTypeTypePropEnum = append(courseAvailabilityDurationTypeTypePropEnum, v)
	}
}

const (

	// CourseAvailabilityDurationTypeContinuous captures enum value "Continuous"
	CourseAvailabilityDurationTypeContinuous string = "Continuous"

	// CourseAvailabilityDurationTypeDateRange captures enum value "DateRange"
	CourseAvailabilityDurationTypeDateRange string = "DateRange"

	// CourseAvailabilityDurationTypeFixedNumDays captures enum value "FixedNumDays"
	CourseAvailabilityDurationTypeFixedNumDays string = "FixedNumDays"

	// CourseAvailabilityDurationTypeTerm captures enum value "Term"
	CourseAvailabilityDurationTypeTerm string = "Term"
)

// prop value enum
func (m *CourseAvailabilityDuration) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, courseAvailabilityDurationTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CourseAvailabilityDuration) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("availability"+"."+"duration"+"."+"type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CourseAvailabilityDuration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CourseAvailabilityDuration) UnmarshalBinary(b []byte) error {
	var res CourseAvailabilityDuration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CourseEnrollment Enrollment
//
// Settings controlling how students may enroll in the course.
//
// swagger:model CourseEnrollment
type CourseEnrollment struct {

	// The enrollment access code associated with this course. May only be set if enrollment.type is SelfEnrollment.
	AccessCode string `json:"accessCode,omitempty"`

	// The date on which enrollment in this course ends. May only be set if enrollment.type is SelfEnrollment.
	// Format: date-time
	End strfmt.DateTime `json:"end,omitempty"`

	// The date on which enrollments are allowed for the course. May only be set if enrollment.type is SelfEnrollment.
	// Format: date-time
	Start strfmt.DateTime `json:"start,omitempty"`

	// Specifies the enrollment options for the course. Defaults to InstructorLed.
	//
	//
	// | Type      | Description
	//  | --------- | --------- |
	// | InstructorLed | Enrollment tasks for the course can only performed by the instructor |
	// | SelfEnrollment | Instructors have the ability to enroll users, and students can also enroll themselves in the course |
	// | EmailEnrollment | Instructors have the ability to enroll users, and students can email requests to the instructor for enrollment |
	//
	// Enum: [InstructorLed SelfEnrollment EmailEnrollment]
	Type string `json:"type,omitempty"`
}

// Validate validates this course enrollment
func (m *CourseEnrollment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CourseEnrollment) validateEnd(formats strfmt.Registry) error {

	if swag.IsZero(m.End) { // not required
		return nil
	}

	if err := validate.FormatOf("enrollment"+"."+"end", "body", "date-time", m.End.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CourseEnrollment) validateStart(formats strfmt.Registry) error {

	if swag.IsZero(m.Start) { // not required
		return nil
	}

	if err := validate.FormatOf("enrollment"+"."+"start", "body", "date-time", m.Start.String(), formats); err != nil {
		return err
	}

	return nil
}

var courseEnrollmentTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["InstructorLed","SelfEnrollment","EmailEnrollment"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		courseEnrollmentTypeTypePropEnum = append(courseEnrollmentTypeTypePropEnum, v)
	}
}

const (

	// CourseEnrollmentTypeInstructorLed captures enum value "InstructorLed"
	CourseEnrollmentTypeInstructorLed string = "InstructorLed"

	// CourseEnrollmentTypeSelfEnrollment captures enum value "SelfEnrollment"
	CourseEnrollmentTypeSelfEnrollment string = "SelfEnrollment"

	// CourseEnrollmentTypeEmailEnrollment captures enum value "EmailEnrollment"
	CourseEnrollmentTypeEmailEnrollment string = "EmailEnrollment"
)

// prop value enum
func (m *CourseEnrollment) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, courseEnrollmentTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CourseEnrollment) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("enrollment"+"."+"type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CourseEnrollment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CourseEnrollment) UnmarshalBinary(b []byte) error {
	var res CourseEnrollment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CourseLocale Locale
//
// Settings controlling localization within the course.
//
// swagger:model CourseLocale
type CourseLocale struct {

	// Whether students are forced to use the course's specified locale.
	Force bool `json:"force,omitempty"`

	// The locale of this course.
	ID string `json:"id,omitempty"`
}

// Validate validates this course locale
func (m *CourseLocale) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CourseLocale) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CourseLocale) UnmarshalBinary(b []byte) error {
	var res CourseLocale
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
