// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FileAttachment file attachment
//
// swagger:model FileAttachment
type FileAttachment struct {

	// file name
	// Required: true
	// Read Only: true
	FileName string `json:"fileName"`

	// id
	// Required: true
	// Read Only: true
	ID string `json:"id"`

	// mime type
	// Required: true
	// Read Only: true
	MimeType string `json:"mimeType"`
}

// Validate validates this file attachment
func (m *FileAttachment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFileName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMimeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FileAttachment) validateFileName(formats strfmt.Registry) error {

	if err := validate.RequiredString("fileName", "body", string(m.FileName)); err != nil {
		return err
	}

	return nil
}

func (m *FileAttachment) validateID(formats strfmt.Registry) error {

	if err := validate.RequiredString("id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *FileAttachment) validateMimeType(formats strfmt.Registry) error {

	if err := validate.RequiredString("mimeType", "body", string(m.MimeType)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FileAttachment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FileAttachment) UnmarshalBinary(b []byte) error {
	var res FileAttachment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
