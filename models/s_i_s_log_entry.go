// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SISLogEntry s i s log entry
//
// swagger:model SISLogEntry
type SISLogEntry struct {

	// log message created date
	// Required: true
	// Read Only: true
	// Format: date-time
	Created strfmt.DateTime `json:"created"`

	// Id of the log message
	// Required: true
	// Read Only: true
	ID string `json:"id"`

	// An enumerated value of LogLevel describing log verbosity level
	//
	//
	// | Type      | Description
	//  | --------- | --------- |
	// | Debug |  |
	// | Information |  |
	// | Warning |  |
	// | Error |  |
	//
	// Required: true
	// Read Only: true
	// Enum: [Debug Information Warning Error]
	Level string `json:"level"`

	// message
	// Required: true
	// Read Only: true
	Message string `json:"message"`
}

// Validate validates this s i s log entry
func (m *SISLogEntry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SISLogEntry) validateCreated(formats strfmt.Registry) error {

	if err := validate.Required("created", "body", strfmt.DateTime(m.Created)); err != nil {
		return err
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SISLogEntry) validateID(formats strfmt.Registry) error {

	if err := validate.RequiredString("id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

var sISLogEntryTypeLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Debug","Information","Warning","Error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sISLogEntryTypeLevelPropEnum = append(sISLogEntryTypeLevelPropEnum, v)
	}
}

const (

	// SISLogEntryLevelDebug captures enum value "Debug"
	SISLogEntryLevelDebug string = "Debug"

	// SISLogEntryLevelInformation captures enum value "Information"
	SISLogEntryLevelInformation string = "Information"

	// SISLogEntryLevelWarning captures enum value "Warning"
	SISLogEntryLevelWarning string = "Warning"

	// SISLogEntryLevelError captures enum value "Error"
	SISLogEntryLevelError string = "Error"
)

// prop value enum
func (m *SISLogEntry) validateLevelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, sISLogEntryTypeLevelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SISLogEntry) validateLevel(formats strfmt.Registry) error {

	if err := validate.RequiredString("level", "body", string(m.Level)); err != nil {
		return err
	}

	// value enum
	if err := m.validateLevelEnum("level", "body", m.Level); err != nil {
		return err
	}

	return nil
}

func (m *SISLogEntry) validateMessage(formats strfmt.Registry) error {

	if err := validate.RequiredString("message", "body", string(m.Message)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SISLogEntry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SISLogEntry) UnmarshalBinary(b []byte) error {
	var res SISLogEntry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
