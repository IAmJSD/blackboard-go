// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GradeSchema grade schema
//
// swagger:model GradeSchema
type GradeSchema struct {

	// The description of this grade schema.
	Description string `json:"description,omitempty"`

	// The externalId associated with this grade schema.
	ExternalID string `json:"externalId,omitempty"`

	// The id associated with this grade schema.
	// Required: true
	// Read Only: true
	ID string `json:"id"`

	// The scale type of this grade schema.
	//
	//
	// | Type      | Description
	//  | --------- | --------- |
	// | Percent |  |
	// | Score |  |
	// | Tabular |  |
	// | Text |  |
	// | CompleteIncomplete |  |
	//
	// Required: true
	// Read Only: true
	// Enum: [Percent Score Tabular Text CompleteIncomplete]
	ScaleType string `json:"scaleType"`

	// The list of grade symbols for this grade schema. Only returned for Tabular scaleType schemas.
	Symbols []*GradeSymbol `json:"symbols"`

	// The title of this grade schema.
	// Required: true
	Title *string `json:"title"`
}

// Validate validates this grade schema
func (m *GradeSchema) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScaleType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSymbols(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GradeSchema) validateID(formats strfmt.Registry) error {

	if err := validate.RequiredString("id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

var gradeSchemaTypeScaleTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Percent","Score","Tabular","Text","CompleteIncomplete"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		gradeSchemaTypeScaleTypePropEnum = append(gradeSchemaTypeScaleTypePropEnum, v)
	}
}

const (

	// GradeSchemaScaleTypePercent captures enum value "Percent"
	GradeSchemaScaleTypePercent string = "Percent"

	// GradeSchemaScaleTypeScore captures enum value "Score"
	GradeSchemaScaleTypeScore string = "Score"

	// GradeSchemaScaleTypeTabular captures enum value "Tabular"
	GradeSchemaScaleTypeTabular string = "Tabular"

	// GradeSchemaScaleTypeText captures enum value "Text"
	GradeSchemaScaleTypeText string = "Text"

	// GradeSchemaScaleTypeCompleteIncomplete captures enum value "CompleteIncomplete"
	GradeSchemaScaleTypeCompleteIncomplete string = "CompleteIncomplete"
)

// prop value enum
func (m *GradeSchema) validateScaleTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, gradeSchemaTypeScaleTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GradeSchema) validateScaleType(formats strfmt.Registry) error {

	if err := validate.RequiredString("scaleType", "body", string(m.ScaleType)); err != nil {
		return err
	}

	// value enum
	if err := m.validateScaleTypeEnum("scaleType", "body", m.ScaleType); err != nil {
		return err
	}

	return nil
}

func (m *GradeSchema) validateSymbols(formats strfmt.Registry) error {

	if swag.IsZero(m.Symbols) { // not required
		return nil
	}

	for i := 0; i < len(m.Symbols); i++ {
		if swag.IsZero(m.Symbols[i]) { // not required
			continue
		}

		if m.Symbols[i] != nil {
			if err := m.Symbols[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("symbols" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GradeSchema) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GradeSchema) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GradeSchema) UnmarshalBinary(b []byte) error {
	var res GradeSchema
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
