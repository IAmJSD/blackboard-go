// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SystemTask system task
//
// swagger:model SystemTask
type SystemTask struct {

	// The date the task was completed.
	// Required: true
	// Read Only: true
	// Format: date-time
	Ended strfmt.DateTime `json:"ended"`

	// The ID of this task.
	// Required: true
	// Read Only: true
	ID string `json:"id"`

	// Task progress, with 0 representing not started and 100 representing done.
	// Required: true
	// Read Only: true
	PercentComplete int32 `json:"percentComplete"`

	// The results of the task execution. This may be null if execution is not yet complete or no results were saved.
	// Required: true
	Results *SystemTaskResult `json:"results"`

	// The date the task was started.
	// Required: true
	// Read Only: true
	// Format: date-time
	Started strfmt.DateTime `json:"started"`

	// The status of the task.
	//
	//
	// | Type      | Description
	//  | --------- | --------- |
	// | Queued | initial state of a task |
	// | Assigned |  |
	// | Running |  |
	// | Complete |  |
	// | CompleteWithErrors |  |
	// | Incomplete |  |
	//
	// Required: true
	// Read Only: true
	// Enum: [Queued Assigned Running Complete CompleteWithErrors Incomplete]
	Status string `json:"status"`

	// The type value associated with the task.
	// Required: true
	// Read Only: true
	Type string `json:"type"`
}

// Validate validates this system task
func (m *SystemTask) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnded(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePercentComplete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResults(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStarted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SystemTask) validateEnded(formats strfmt.Registry) error {

	if err := validate.Required("ended", "body", strfmt.DateTime(m.Ended)); err != nil {
		return err
	}

	if err := validate.FormatOf("ended", "body", "date-time", m.Ended.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SystemTask) validateID(formats strfmt.Registry) error {

	if err := validate.RequiredString("id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *SystemTask) validatePercentComplete(formats strfmt.Registry) error {

	if err := validate.Required("percentComplete", "body", int32(m.PercentComplete)); err != nil {
		return err
	}

	return nil
}

func (m *SystemTask) validateResults(formats strfmt.Registry) error {

	if err := validate.Required("results", "body", m.Results); err != nil {
		return err
	}

	if m.Results != nil {
		if err := m.Results.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("results")
			}
			return err
		}
	}

	return nil
}

func (m *SystemTask) validateStarted(formats strfmt.Registry) error {

	if err := validate.Required("started", "body", strfmt.DateTime(m.Started)); err != nil {
		return err
	}

	if err := validate.FormatOf("started", "body", "date-time", m.Started.String(), formats); err != nil {
		return err
	}

	return nil
}

var systemTaskTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Queued","Assigned","Running","Complete","CompleteWithErrors","Incomplete"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		systemTaskTypeStatusPropEnum = append(systemTaskTypeStatusPropEnum, v)
	}
}

const (

	// SystemTaskStatusQueued captures enum value "Queued"
	SystemTaskStatusQueued string = "Queued"

	// SystemTaskStatusAssigned captures enum value "Assigned"
	SystemTaskStatusAssigned string = "Assigned"

	// SystemTaskStatusRunning captures enum value "Running"
	SystemTaskStatusRunning string = "Running"

	// SystemTaskStatusComplete captures enum value "Complete"
	SystemTaskStatusComplete string = "Complete"

	// SystemTaskStatusCompleteWithErrors captures enum value "CompleteWithErrors"
	SystemTaskStatusCompleteWithErrors string = "CompleteWithErrors"

	// SystemTaskStatusIncomplete captures enum value "Incomplete"
	SystemTaskStatusIncomplete string = "Incomplete"
)

// prop value enum
func (m *SystemTask) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, systemTaskTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SystemTask) validateStatus(formats strfmt.Registry) error {

	if err := validate.RequiredString("status", "body", string(m.Status)); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *SystemTask) validateType(formats strfmt.Registry) error {

	if err := validate.RequiredString("type", "body", string(m.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SystemTask) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SystemTask) UnmarshalBinary(b []byte) error {
	var res SystemTask
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
