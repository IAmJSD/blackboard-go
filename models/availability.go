// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Availability availability
//
// swagger:model Availability
type Availability struct {

	// null
	//
	//
	// | Type      | Description
	//  | --------- | --------- |
	// | Yes |  |
	// | No |  |
	// | Disabled |   **Since**: 3100.0.0 |
	//
	// Enum: [Yes No Disabled]
	Available string `json:"available,omitempty"`
}

// Validate validates this availability
func (m *Availability) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailable(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var availabilityTypeAvailablePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Yes","No","Disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		availabilityTypeAvailablePropEnum = append(availabilityTypeAvailablePropEnum, v)
	}
}

const (

	// AvailabilityAvailableYes captures enum value "Yes"
	AvailabilityAvailableYes string = "Yes"

	// AvailabilityAvailableNo captures enum value "No"
	AvailabilityAvailableNo string = "No"

	// AvailabilityAvailableDisabled captures enum value "Disabled"
	AvailabilityAvailableDisabled string = "Disabled"
)

// prop value enum
func (m *Availability) validateAvailableEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, availabilityTypeAvailablePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Availability) validateAvailable(formats strfmt.Registry) error {

	if swag.IsZero(m.Available) { // not required
		return nil
	}

	// value enum
	if err := m.validateAvailableEnum("available", "body", m.Available); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Availability) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Availability) UnmarshalBinary(b []byte) error {
	var res Availability
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
