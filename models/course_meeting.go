// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CourseMeeting course meeting
//
// swagger:model CourseMeeting
type CourseMeeting struct {

	// The primary ID of the course.
	// Required: true
	CourseID *string `json:"courseId"`

	// The description of the meeting
	// Required: true
	Description *string `json:"description"`

	// The end time of meeting
	// Required: true
	// Format: date-time
	End *strfmt.DateTime `json:"end"`

	// The externalLink of course meeting
	ExternalLink string `json:"externalLink,omitempty"`

	// The primary ID of the meeting.
	// Required: true
	// Read Only: true
	ID int64 `json:"id"`

	// The start time of meeting
	// Required: true
	// Format: date-time
	Start *strfmt.DateTime `json:"start"`

	// The title of the meeting
	// Required: true
	Title *string `json:"title"`
}

// Validate validates this course meeting
func (m *CourseMeeting) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCourseID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CourseMeeting) validateCourseID(formats strfmt.Registry) error {

	if err := validate.Required("courseId", "body", m.CourseID); err != nil {
		return err
	}

	return nil
}

func (m *CourseMeeting) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *CourseMeeting) validateEnd(formats strfmt.Registry) error {

	if err := validate.Required("end", "body", m.End); err != nil {
		return err
	}

	if err := validate.FormatOf("end", "body", "date-time", m.End.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CourseMeeting) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", int64(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *CourseMeeting) validateStart(formats strfmt.Registry) error {

	if err := validate.Required("start", "body", m.Start); err != nil {
		return err
	}

	if err := validate.FormatOf("start", "body", "date-time", m.Start.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CourseMeeting) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CourseMeeting) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CourseMeeting) UnmarshalBinary(b []byte) error {
	var res CourseMeeting
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
