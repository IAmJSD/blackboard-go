// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// User user
//
// swagger:model User
type User struct {

	// address
	Address *UserAddress `json:"address,omitempty"`

	// availability
	Availability *UserAvailability `json:"availability,omitempty"`

	// avatar
	// Required: true
	Avatar *UserAvatar `json:"avatar"`

	// The birth date of this user.
	// Format: date-time
	BirthDate strfmt.DateTime `json:"birthDate,omitempty"`

	// contact
	Contact *UserContact `json:"contact,omitempty"`

	// The date this user was created.
	// Required: true
	// Read Only: true
	// Format: date-time
	Created strfmt.DateTime `json:"created"`

	// The ID of the data source associated with this user.  This may optionally be the data source's externalId using the syntax "externalId:math101".
	DataSourceID string `json:"dataSourceId,omitempty"`

	// The education level of this user.
	//
	//
	// | Type      | Description
	//  | --------- | --------- |
	// | K8 | Kindergarten through 8th grade |
	// | HighSchool | Grades 9 through 12. |
	// | Freshman | College or university freshman. |
	// | Sophomore | College or university sophomore. |
	// | Junior | College or university junior. |
	// | Senior | College or university senior. |
	// | GraduateSchool | Graduate school student. |
	// | PostGraduateSchool | Post-graduate school student. |
	// | Unknown | Education Level is not known, or not specified. |
	//
	// Enum: [K8 HighSchool Freshman Sophomore Junior Senior GraduateSchool PostGraduateSchool Unknown]
	EducationLevel string `json:"educationLevel,omitempty"`

	// An optional externally-defined unique ID for the user.  Defaults to the userName.
	//
	// Formerly known as 'batchUid'.
	// Max Length: 256
	ExternalID string `json:"externalId,omitempty"`

	// The gender of this user.
	//
	//
	// | Type      | Description
	//  | --------- | --------- |
	// | Female | Female |
	// | Male | Male |
	// | Unknown | Gender is not known, or not specified. |
	//
	// Enum: [Female Male Unknown]
	Gender string `json:"gender,omitempty"`

	// The primary ID of the user.
	// Required: true
	// Read Only: true
	ID string `json:"id"`

	// The primary and secondary institution roles assigned to this user. The primary institution role is the first item in the list, followed by all secondary institution roles sorted alphabetically.
	//
	// **Since**: 3300.3.0
	InstitutionRoleIds []string `json:"institutionRoleIds"`

	// job
	Job *UserJob `json:"job,omitempty"`

	// The date this user last logged in.
	// Required: true
	// Read Only: true
	// Format: date-time
	LastLogin strfmt.DateTime `json:"lastLogin"`

	// locale
	Locale *UserLocale `json:"locale,omitempty"`

	// The date this user was last modified.
	// Required: true
	// Read Only: true
	// Format: date-time
	Modified strfmt.DateTime `json:"modified"`

	// name
	// Required: true
	Name *UserName `json:"name"`

	// The user's student ID name or number as defined by the school or institution.
	// Max Length: 100
	StudentID string `json:"studentId,omitempty"`

	// The system roles (the administrative user roles in the UI) for this user.  The first role in this list is the user's primary system role, while the remaining are secondary system roles.
	SystemRoleIds []SystemRoleEnum `json:"systemRoleIds"`

	// The userName property, shown in the UI.
	// Required: true
	UserName *string `json:"userName"`

	// A secondary unique ID for the user.  Used by LTI launches and other inter-server operations.
	// Required: true
	// Read Only: true
	UUID string `json:"uuid"`
}

// Validate validates this user
func (m *User) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAvailability(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAvatar(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBirthDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEducationLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGender(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJob(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastLogin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocale(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStudentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystemRoleIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *User) validateAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.Address) { // not required
		return nil
	}

	if m.Address != nil {
		if err := m.Address.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("address")
			}
			return err
		}
	}

	return nil
}

func (m *User) validateAvailability(formats strfmt.Registry) error {

	if swag.IsZero(m.Availability) { // not required
		return nil
	}

	if m.Availability != nil {
		if err := m.Availability.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("availability")
			}
			return err
		}
	}

	return nil
}

func (m *User) validateAvatar(formats strfmt.Registry) error {

	if err := validate.Required("avatar", "body", m.Avatar); err != nil {
		return err
	}

	if m.Avatar != nil {
		if err := m.Avatar.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("avatar")
			}
			return err
		}
	}

	return nil
}

func (m *User) validateBirthDate(formats strfmt.Registry) error {

	if swag.IsZero(m.BirthDate) { // not required
		return nil
	}

	if err := validate.FormatOf("birthDate", "body", "date-time", m.BirthDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *User) validateContact(formats strfmt.Registry) error {

	if swag.IsZero(m.Contact) { // not required
		return nil
	}

	if m.Contact != nil {
		if err := m.Contact.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contact")
			}
			return err
		}
	}

	return nil
}

func (m *User) validateCreated(formats strfmt.Registry) error {

	if err := validate.Required("created", "body", strfmt.DateTime(m.Created)); err != nil {
		return err
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

var userTypeEducationLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["K8","HighSchool","Freshman","Sophomore","Junior","Senior","GraduateSchool","PostGraduateSchool","Unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userTypeEducationLevelPropEnum = append(userTypeEducationLevelPropEnum, v)
	}
}

const (

	// UserEducationLevelK8 captures enum value "K8"
	UserEducationLevelK8 string = "K8"

	// UserEducationLevelHighSchool captures enum value "HighSchool"
	UserEducationLevelHighSchool string = "HighSchool"

	// UserEducationLevelFreshman captures enum value "Freshman"
	UserEducationLevelFreshman string = "Freshman"

	// UserEducationLevelSophomore captures enum value "Sophomore"
	UserEducationLevelSophomore string = "Sophomore"

	// UserEducationLevelJunior captures enum value "Junior"
	UserEducationLevelJunior string = "Junior"

	// UserEducationLevelSenior captures enum value "Senior"
	UserEducationLevelSenior string = "Senior"

	// UserEducationLevelGraduateSchool captures enum value "GraduateSchool"
	UserEducationLevelGraduateSchool string = "GraduateSchool"

	// UserEducationLevelPostGraduateSchool captures enum value "PostGraduateSchool"
	UserEducationLevelPostGraduateSchool string = "PostGraduateSchool"

	// UserEducationLevelUnknown captures enum value "Unknown"
	UserEducationLevelUnknown string = "Unknown"
)

// prop value enum
func (m *User) validateEducationLevelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userTypeEducationLevelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *User) validateEducationLevel(formats strfmt.Registry) error {

	if swag.IsZero(m.EducationLevel) { // not required
		return nil
	}

	// value enum
	if err := m.validateEducationLevelEnum("educationLevel", "body", m.EducationLevel); err != nil {
		return err
	}

	return nil
}

func (m *User) validateExternalID(formats strfmt.Registry) error {

	if swag.IsZero(m.ExternalID) { // not required
		return nil
	}

	if err := validate.MaxLength("externalId", "body", string(m.ExternalID), 256); err != nil {
		return err
	}

	return nil
}

var userTypeGenderPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Female","Male","Unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userTypeGenderPropEnum = append(userTypeGenderPropEnum, v)
	}
}

const (

	// UserGenderFemale captures enum value "Female"
	UserGenderFemale string = "Female"

	// UserGenderMale captures enum value "Male"
	UserGenderMale string = "Male"

	// UserGenderUnknown captures enum value "Unknown"
	UserGenderUnknown string = "Unknown"
)

// prop value enum
func (m *User) validateGenderEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userTypeGenderPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *User) validateGender(formats strfmt.Registry) error {

	if swag.IsZero(m.Gender) { // not required
		return nil
	}

	// value enum
	if err := m.validateGenderEnum("gender", "body", m.Gender); err != nil {
		return err
	}

	return nil
}

func (m *User) validateID(formats strfmt.Registry) error {

	if err := validate.RequiredString("id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *User) validateJob(formats strfmt.Registry) error {

	if swag.IsZero(m.Job) { // not required
		return nil
	}

	if m.Job != nil {
		if err := m.Job.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("job")
			}
			return err
		}
	}

	return nil
}

func (m *User) validateLastLogin(formats strfmt.Registry) error {

	if err := validate.Required("lastLogin", "body", strfmt.DateTime(m.LastLogin)); err != nil {
		return err
	}

	if err := validate.FormatOf("lastLogin", "body", "date-time", m.LastLogin.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *User) validateLocale(formats strfmt.Registry) error {

	if swag.IsZero(m.Locale) { // not required
		return nil
	}

	if m.Locale != nil {
		if err := m.Locale.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("locale")
			}
			return err
		}
	}

	return nil
}

func (m *User) validateModified(formats strfmt.Registry) error {

	if err := validate.Required("modified", "body", strfmt.DateTime(m.Modified)); err != nil {
		return err
	}

	if err := validate.FormatOf("modified", "body", "date-time", m.Modified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *User) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if m.Name != nil {
		if err := m.Name.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("name")
			}
			return err
		}
	}

	return nil
}

func (m *User) validateStudentID(formats strfmt.Registry) error {

	if swag.IsZero(m.StudentID) { // not required
		return nil
	}

	if err := validate.MaxLength("studentId", "body", string(m.StudentID), 100); err != nil {
		return err
	}

	return nil
}

func (m *User) validateSystemRoleIds(formats strfmt.Registry) error {

	if swag.IsZero(m.SystemRoleIds) { // not required
		return nil
	}

	for i := 0; i < len(m.SystemRoleIds); i++ {

		if err := m.SystemRoleIds[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("systemRoleIds" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *User) validateUserName(formats strfmt.Registry) error {

	if err := validate.Required("userName", "body", m.UserName); err != nil {
		return err
	}

	return nil
}

func (m *User) validateUUID(formats strfmt.Registry) error {

	if err := validate.RequiredString("uuid", "body", string(m.UUID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *User) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *User) UnmarshalBinary(b []byte) error {
	var res User
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UserAddress Address
//
// The user's mailing address.
//
// swagger:model UserAddress
type UserAddress struct {

	// The city the user resides in.
	// Max Length: 50
	City string `json:"city,omitempty"`

	// The country the user resides in.
	// Max Length: 50
	Country string `json:"country,omitempty"`

	// The state or province the user resides in.
	// Max Length: 50
	State string `json:"state,omitempty"`

	// The street address of the user.
	// Max Length: 100
	Street1 string `json:"street1,omitempty"`

	// An additional field to store the street address of the user.
	// Max Length: 100
	Street2 string `json:"street2,omitempty"`

	// The zip code or postal code the user resides in.
	// Max Length: 50
	ZipCode string `json:"zipCode,omitempty"`
}

// Validate validates this user address
func (m *UserAddress) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStreet1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStreet2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZipCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserAddress) validateCity(formats strfmt.Registry) error {

	if swag.IsZero(m.City) { // not required
		return nil
	}

	if err := validate.MaxLength("address"+"."+"city", "body", string(m.City), 50); err != nil {
		return err
	}

	return nil
}

func (m *UserAddress) validateCountry(formats strfmt.Registry) error {

	if swag.IsZero(m.Country) { // not required
		return nil
	}

	if err := validate.MaxLength("address"+"."+"country", "body", string(m.Country), 50); err != nil {
		return err
	}

	return nil
}

func (m *UserAddress) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	if err := validate.MaxLength("address"+"."+"state", "body", string(m.State), 50); err != nil {
		return err
	}

	return nil
}

func (m *UserAddress) validateStreet1(formats strfmt.Registry) error {

	if swag.IsZero(m.Street1) { // not required
		return nil
	}

	if err := validate.MaxLength("address"+"."+"street1", "body", string(m.Street1), 100); err != nil {
		return err
	}

	return nil
}

func (m *UserAddress) validateStreet2(formats strfmt.Registry) error {

	if swag.IsZero(m.Street2) { // not required
		return nil
	}

	if err := validate.MaxLength("address"+"."+"street2", "body", string(m.Street2), 100); err != nil {
		return err
	}

	return nil
}

func (m *UserAddress) validateZipCode(formats strfmt.Registry) error {

	if swag.IsZero(m.ZipCode) { // not required
		return nil
	}

	if err := validate.MaxLength("address"+"."+"zipCode", "body", string(m.ZipCode), 50); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserAddress) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserAddress) UnmarshalBinary(b []byte) error {
	var res UserAddress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UserAvailability Availability
//
// Settings controlling availability of the user account.
//
// swagger:model UserAvailability
type UserAvailability struct {

	// Whether the user is available within the system. Unavailable users cannot log in.
	//
	//
	// | Type      | Description
	//  | --------- | --------- |
	// | Yes |  |
	// | No |  |
	// | Disabled |   **Since**: 3100.0.0 |
	//
	// Enum: [Yes No Disabled]
	Available string `json:"available,omitempty"`
}

// Validate validates this user availability
func (m *UserAvailability) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailable(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var userAvailabilityTypeAvailablePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Yes","No","Disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userAvailabilityTypeAvailablePropEnum = append(userAvailabilityTypeAvailablePropEnum, v)
	}
}

const (

	// UserAvailabilityAvailableYes captures enum value "Yes"
	UserAvailabilityAvailableYes string = "Yes"

	// UserAvailabilityAvailableNo captures enum value "No"
	UserAvailabilityAvailableNo string = "No"

	// UserAvailabilityAvailableDisabled captures enum value "Disabled"
	UserAvailabilityAvailableDisabled string = "Disabled"
)

// prop value enum
func (m *UserAvailability) validateAvailableEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userAvailabilityTypeAvailablePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UserAvailability) validateAvailable(formats strfmt.Registry) error {

	if swag.IsZero(m.Available) { // not required
		return nil
	}

	// value enum
	if err := m.validateAvailableEnum("availability"+"."+"available", "body", m.Available); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserAvailability) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserAvailability) UnmarshalBinary(b []byte) error {
	var res UserAvailability
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UserAvatar Avatar
//
// The user's avatar metadata
//
// **Since**: 3800.13.0
//
// swagger:model UserAvatar
type UserAvatar struct {

	// The source of the user's avatar
	//
	// **Since**: 3800.13.0
	//
	//
	// | Type      | Description
	//  | --------- | --------- |
	// | Default | The server default avatar |
	// | User | The user set his/her own avatar |
	// | System | A privileged user set the user's avatar to something other than default |
	//
	// Enum: [Default User System]
	Source string `json:"source,omitempty"`

	// The upload id of the avatar image file
	//
	// **Since**: 3800.13.0
	UploadID string `json:"uploadId,omitempty"`

	// The location for retrieving the user's avatar
	//
	// **Since**: 3800.13.0
	// Required: true
	// Read Only: true
	ViewURL string `json:"viewUrl"`
}

// Validate validates this user avatar
func (m *UserAvatar) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateViewURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var userAvatarTypeSourcePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Default","User","System"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userAvatarTypeSourcePropEnum = append(userAvatarTypeSourcePropEnum, v)
	}
}

const (

	// UserAvatarSourceDefault captures enum value "Default"
	UserAvatarSourceDefault string = "Default"

	// UserAvatarSourceUser captures enum value "User"
	UserAvatarSourceUser string = "User"

	// UserAvatarSourceSystem captures enum value "System"
	UserAvatarSourceSystem string = "System"
)

// prop value enum
func (m *UserAvatar) validateSourceEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userAvatarTypeSourcePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UserAvatar) validateSource(formats strfmt.Registry) error {

	if swag.IsZero(m.Source) { // not required
		return nil
	}

	// value enum
	if err := m.validateSourceEnum("avatar"+"."+"source", "body", m.Source); err != nil {
		return err
	}

	return nil
}

func (m *UserAvatar) validateViewURL(formats strfmt.Registry) error {

	if err := validate.RequiredString("avatar"+"."+"viewUrl", "body", string(m.ViewURL)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserAvatar) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserAvatar) UnmarshalBinary(b []byte) error {
	var res UserAvatar
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UserContact Contact
//
// The user's contact information.
//
// swagger:model UserContact
type UserContact struct {

	// The user's business fax number.
	// Max Length: 50
	BusinessFax string `json:"businessFax,omitempty"`

	// The user's business phone number.
	// Max Length: 50
	BusinessPhone string `json:"businessPhone,omitempty"`

	// The user's email address.
	// Max Length: 100
	Email string `json:"email,omitempty"`

	// The user's home phone number.
	// Max Length: 50
	HomePhone string `json:"homePhone,omitempty"`

	// The user's mobile phone number.
	// Max Length: 50
	MobilePhone string `json:"mobilePhone,omitempty"`

	// The URL of the user's personal website.
	// Max Length: 100
	WebPage string `json:"webPage,omitempty"`
}

// Validate validates this user contact
func (m *UserContact) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBusinessFax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBusinessPhone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHomePhone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMobilePhone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWebPage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserContact) validateBusinessFax(formats strfmt.Registry) error {

	if swag.IsZero(m.BusinessFax) { // not required
		return nil
	}

	if err := validate.MaxLength("contact"+"."+"businessFax", "body", string(m.BusinessFax), 50); err != nil {
		return err
	}

	return nil
}

func (m *UserContact) validateBusinessPhone(formats strfmt.Registry) error {

	if swag.IsZero(m.BusinessPhone) { // not required
		return nil
	}

	if err := validate.MaxLength("contact"+"."+"businessPhone", "body", string(m.BusinessPhone), 50); err != nil {
		return err
	}

	return nil
}

func (m *UserContact) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(m.Email) { // not required
		return nil
	}

	if err := validate.MaxLength("contact"+"."+"email", "body", string(m.Email), 100); err != nil {
		return err
	}

	return nil
}

func (m *UserContact) validateHomePhone(formats strfmt.Registry) error {

	if swag.IsZero(m.HomePhone) { // not required
		return nil
	}

	if err := validate.MaxLength("contact"+"."+"homePhone", "body", string(m.HomePhone), 50); err != nil {
		return err
	}

	return nil
}

func (m *UserContact) validateMobilePhone(formats strfmt.Registry) error {

	if swag.IsZero(m.MobilePhone) { // not required
		return nil
	}

	if err := validate.MaxLength("contact"+"."+"mobilePhone", "body", string(m.MobilePhone), 50); err != nil {
		return err
	}

	return nil
}

func (m *UserContact) validateWebPage(formats strfmt.Registry) error {

	if swag.IsZero(m.WebPage) { // not required
		return nil
	}

	if err := validate.MaxLength("contact"+"."+"webPage", "body", string(m.WebPage), 100); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserContact) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserContact) UnmarshalBinary(b []byte) error {
	var res UserContact
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UserJob Job
//
// The user's job information.
//
// swagger:model UserJob
type UserJob struct {

	// The company the user works for.
	// Max Length: 100
	Company string `json:"company,omitempty"`

	// The department the user belongs to.
	// Max Length: 100
	Department string `json:"department,omitempty"`

	// The user's job title.
	// Max Length: 100
	Title string `json:"title,omitempty"`
}

// Validate validates this user job
func (m *UserJob) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompany(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDepartment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserJob) validateCompany(formats strfmt.Registry) error {

	if swag.IsZero(m.Company) { // not required
		return nil
	}

	if err := validate.MaxLength("job"+"."+"company", "body", string(m.Company), 100); err != nil {
		return err
	}

	return nil
}

func (m *UserJob) validateDepartment(formats strfmt.Registry) error {

	if swag.IsZero(m.Department) { // not required
		return nil
	}

	if err := validate.MaxLength("job"+"."+"department", "body", string(m.Department), 100); err != nil {
		return err
	}

	return nil
}

func (m *UserJob) validateTitle(formats strfmt.Registry) error {

	if swag.IsZero(m.Title) { // not required
		return nil
	}

	if err := validate.MaxLength("job"+"."+"title", "body", string(m.Title), 100); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserJob) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserJob) UnmarshalBinary(b []byte) error {
	var res UserJob
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UserLocale Locale
//
// The user's localization settings.
//
// swagger:model UserLocale
type UserLocale struct {

	// The calendar type specified by the user.
	//
	//
	// | Type      | Description
	//  | --------- | --------- |
	// | Gregorian | Gregorian |
	// | GregorianHijri | Gregorian & Hijri |
	// | Hijri | Hijri |
	// | HijriGregorian | Hijri & Gregorian |
	//
	// Enum: [Gregorian GregorianHijri Hijri HijriGregorian]
	Calendar string `json:"calendar,omitempty"`

	// The user's preferred first day of the week.
	//
	//
	// | Type      | Description
	//  | --------- | --------- |
	// | Sunday | Sunday |
	// | Monday | Monday |
	// | Saturday | Saturday |
	//
	// Enum: [Sunday Monday Saturday]
	FirstDayOfWeek string `json:"firstDayOfWeek,omitempty"`

	// The locale specified by the user.  This locale will be used anywhere the user is allowed to customize their locale; courses may force a specific locale, overriding the user's locale preference.
	ID string `json:"id,omitempty"`
}

// Validate validates this user locale
func (m *UserLocale) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCalendar(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstDayOfWeek(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var userLocaleTypeCalendarPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Gregorian","GregorianHijri","Hijri","HijriGregorian"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userLocaleTypeCalendarPropEnum = append(userLocaleTypeCalendarPropEnum, v)
	}
}

const (

	// UserLocaleCalendarGregorian captures enum value "Gregorian"
	UserLocaleCalendarGregorian string = "Gregorian"

	// UserLocaleCalendarGregorianHijri captures enum value "GregorianHijri"
	UserLocaleCalendarGregorianHijri string = "GregorianHijri"

	// UserLocaleCalendarHijri captures enum value "Hijri"
	UserLocaleCalendarHijri string = "Hijri"

	// UserLocaleCalendarHijriGregorian captures enum value "HijriGregorian"
	UserLocaleCalendarHijriGregorian string = "HijriGregorian"
)

// prop value enum
func (m *UserLocale) validateCalendarEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userLocaleTypeCalendarPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UserLocale) validateCalendar(formats strfmt.Registry) error {

	if swag.IsZero(m.Calendar) { // not required
		return nil
	}

	// value enum
	if err := m.validateCalendarEnum("locale"+"."+"calendar", "body", m.Calendar); err != nil {
		return err
	}

	return nil
}

var userLocaleTypeFirstDayOfWeekPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Sunday","Monday","Saturday"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userLocaleTypeFirstDayOfWeekPropEnum = append(userLocaleTypeFirstDayOfWeekPropEnum, v)
	}
}

const (

	// UserLocaleFirstDayOfWeekSunday captures enum value "Sunday"
	UserLocaleFirstDayOfWeekSunday string = "Sunday"

	// UserLocaleFirstDayOfWeekMonday captures enum value "Monday"
	UserLocaleFirstDayOfWeekMonday string = "Monday"

	// UserLocaleFirstDayOfWeekSaturday captures enum value "Saturday"
	UserLocaleFirstDayOfWeekSaturday string = "Saturday"
)

// prop value enum
func (m *UserLocale) validateFirstDayOfWeekEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userLocaleTypeFirstDayOfWeekPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UserLocale) validateFirstDayOfWeek(formats strfmt.Registry) error {

	if swag.IsZero(m.FirstDayOfWeek) { // not required
		return nil
	}

	// value enum
	if err := m.validateFirstDayOfWeekEnum("locale"+"."+"firstDayOfWeek", "body", m.FirstDayOfWeek); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserLocale) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserLocale) UnmarshalBinary(b []byte) error {
	var res UserLocale
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UserName Name
//
// Properties used to build the user's display name.
//
// swagger:model UserName
type UserName struct {

	// The family (last) name of this user.
	// Required: true
	// Max Length: 100
	Family *string `json:"family"`

	// The given (first) name of this user.
	// Required: true
	// Max Length: 100
	Given *string `json:"given"`

	// The middle name of this user.
	// Max Length: 100
	Middle string `json:"middle,omitempty"`

	// The other name (nickname) of this user.
	// Max Length: 100
	Other string `json:"other,omitempty"`

	// The suffix of this user's name.  Examples: Jr., III, PhD.
	// Max Length: 100
	Suffix string `json:"suffix,omitempty"`

	// The title of this user.  Examples: Mr., Ms., Dr.
	// Max Length: 100
	Title string `json:"title,omitempty"`
}

// Validate validates this user name
func (m *UserName) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFamily(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGiven(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMiddle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOther(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuffix(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserName) validateFamily(formats strfmt.Registry) error {

	if err := validate.Required("name"+"."+"family", "body", m.Family); err != nil {
		return err
	}

	if err := validate.MaxLength("name"+"."+"family", "body", string(*m.Family), 100); err != nil {
		return err
	}

	return nil
}

func (m *UserName) validateGiven(formats strfmt.Registry) error {

	if err := validate.Required("name"+"."+"given", "body", m.Given); err != nil {
		return err
	}

	if err := validate.MaxLength("name"+"."+"given", "body", string(*m.Given), 100); err != nil {
		return err
	}

	return nil
}

func (m *UserName) validateMiddle(formats strfmt.Registry) error {

	if swag.IsZero(m.Middle) { // not required
		return nil
	}

	if err := validate.MaxLength("name"+"."+"middle", "body", string(m.Middle), 100); err != nil {
		return err
	}

	return nil
}

func (m *UserName) validateOther(formats strfmt.Registry) error {

	if swag.IsZero(m.Other) { // not required
		return nil
	}

	if err := validate.MaxLength("name"+"."+"other", "body", string(m.Other), 100); err != nil {
		return err
	}

	return nil
}

func (m *UserName) validateSuffix(formats strfmt.Registry) error {

	if swag.IsZero(m.Suffix) { // not required
		return nil
	}

	if err := validate.MaxLength("name"+"."+"suffix", "body", string(m.Suffix), 100); err != nil {
		return err
	}

	return nil
}

func (m *UserName) validateTitle(formats strfmt.Registry) error {

	if swag.IsZero(m.Title) { // not required
		return nil
	}

	if err := validate.MaxLength("name"+"."+"title", "body", string(m.Title), 100); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserName) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserName) UnmarshalBinary(b []byte) error {
	var res UserName
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
