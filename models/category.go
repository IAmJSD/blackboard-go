// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Category category
//
// swagger:model Category
type Category struct {

	// Boolean indicating whether or not the category is available
	// Required: true
	Available *bool `json:"available"`

	// The human-readable id of the category
	// Required: true
	// Read Only: true
	CategoryID string `json:"categoryId"`

	// The date and time at which the category was created
	// Required: true
	// Read Only: true
	// Format: date-time
	Created strfmt.DateTime `json:"created"`

	// The ID of the data source of the category
	// Required: true
	// Read Only: true
	DataSourceID string `json:"dataSourceId"`

	// The description of the category
	Description string `json:"description,omitempty"`

	// Boolean indicating whether or not the category should appear on the catalog front page
	FrontPage bool `json:"frontPage,omitempty"`

	// id
	// Required: true
	// Read Only: true
	ID string `json:"id"`

	// The roles for which this category is available, if category is set to restricted. Not populated for lists of categories, only for individual category
	InstitutionRoleIds []string `json:"institutionRoleIds"`

	// The ID of this category's parent category
	// Required: true
	// Read Only: true
	ParentID string `json:"parentId"`

	// Boolean indicating whether or not category is available to all roles, or restricted to a specific set of roles.
	Restricted bool `json:"restricted,omitempty"`

	// The title of category
	// Required: true
	Title *string `json:"title"`

	// Type of category
	//
	//
	// | Type      | Description
	//  | --------- | --------- |
	// | Course |  |
	// | Organization |  |
	//
	// Required: true
	// Read Only: true
	// Enum: [Course Organization]
	Type string `json:"type"`
}

// Validate validates this category
func (m *Category) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCategoryID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataSourceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Category) validateAvailable(formats strfmt.Registry) error {

	if err := validate.Required("available", "body", m.Available); err != nil {
		return err
	}

	return nil
}

func (m *Category) validateCategoryID(formats strfmt.Registry) error {

	if err := validate.RequiredString("categoryId", "body", string(m.CategoryID)); err != nil {
		return err
	}

	return nil
}

func (m *Category) validateCreated(formats strfmt.Registry) error {

	if err := validate.Required("created", "body", strfmt.DateTime(m.Created)); err != nil {
		return err
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Category) validateDataSourceID(formats strfmt.Registry) error {

	if err := validate.RequiredString("dataSourceId", "body", string(m.DataSourceID)); err != nil {
		return err
	}

	return nil
}

func (m *Category) validateID(formats strfmt.Registry) error {

	if err := validate.RequiredString("id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *Category) validateParentID(formats strfmt.Registry) error {

	if err := validate.RequiredString("parentId", "body", string(m.ParentID)); err != nil {
		return err
	}

	return nil
}

func (m *Category) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

var categoryTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Course","Organization"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		categoryTypeTypePropEnum = append(categoryTypeTypePropEnum, v)
	}
}

const (

	// CategoryTypeCourse captures enum value "Course"
	CategoryTypeCourse string = "Course"

	// CategoryTypeOrganization captures enum value "Organization"
	CategoryTypeOrganization string = "Organization"
)

// prop value enum
func (m *Category) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, categoryTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Category) validateType(formats strfmt.Registry) error {

	if err := validate.RequiredString("type", "body", string(m.Type)); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Category) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Category) UnmarshalBinary(b []byte) error {
	var res Category
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
