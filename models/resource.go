// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Resource resource
//
// swagger:model Resource
type Resource struct {

	// The date this Resource was created.
	// Required: true
	// Read Only: true
	// Format: date-time
	Created strfmt.DateTime `json:"created"`

	// The Id of the User who created the Resource.
	// Required: true
	// Read Only: true
	CreatorID string `json:"creatorId"`

	// The downloadUrl for this Resource; only set if the Resource is of type 'File'.
	// Required: true
	// Read Only: true
	DownloadURL string `json:"downloadUrl"`

	// Whether the Resource has associated Course Content links.
	// Required: true
	// Read Only: true
	HasLinks bool `json:"hasLinks"`

	// The primary ID the Resource.
	// Required: true
	// Read Only: true
	ID string `json:"id"`

	// The mime-type for this Resource; only set if the Resource is of type 'File'
	MimeType string `json:"mimeType,omitempty"`

	// The date this Resource was last modified.
	// Required: true
	// Read Only: true
	// Format: date-time
	Modified strfmt.DateTime `json:"modified"`

	// The name of the Resource.
	// Required: true
	// Read Only: true
	Name string `json:"name"`

	// The Id of the of the Resource's parent folder.
	// Required: true
	// Read Only: true
	ParentID string `json:"parentId"`

	// The size of the Resource in bytes.
	// Required: true
	// Read Only: true
	Size int64 `json:"size"`

	// The type of the Resource; 'File' or 'Folder'
	//
	//
	// | Type      | Description
	//  | --------- | --------- |
	// | File |  |
	// | Folder |  |
	//
	// Required: true
	// Read Only: true
	// Enum: [File Folder]
	Type string `json:"type"`

	// The version number for this Resource; only set if the Resource is of type 'File' and is versioned.
	// Required: true
	// Read Only: true
	Version int32 `json:"version"`
}

// Validate validates this resource
func (m *Resource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatorID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDownloadURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHasLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Resource) validateCreated(formats strfmt.Registry) error {

	if err := validate.Required("created", "body", strfmt.DateTime(m.Created)); err != nil {
		return err
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Resource) validateCreatorID(formats strfmt.Registry) error {

	if err := validate.RequiredString("creatorId", "body", string(m.CreatorID)); err != nil {
		return err
	}

	return nil
}

func (m *Resource) validateDownloadURL(formats strfmt.Registry) error {

	if err := validate.RequiredString("downloadUrl", "body", string(m.DownloadURL)); err != nil {
		return err
	}

	return nil
}

func (m *Resource) validateHasLinks(formats strfmt.Registry) error {

	if err := validate.Required("hasLinks", "body", bool(m.HasLinks)); err != nil {
		return err
	}

	return nil
}

func (m *Resource) validateID(formats strfmt.Registry) error {

	if err := validate.RequiredString("id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *Resource) validateModified(formats strfmt.Registry) error {

	if err := validate.Required("modified", "body", strfmt.DateTime(m.Modified)); err != nil {
		return err
	}

	if err := validate.FormatOf("modified", "body", "date-time", m.Modified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Resource) validateName(formats strfmt.Registry) error {

	if err := validate.RequiredString("name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

func (m *Resource) validateParentID(formats strfmt.Registry) error {

	if err := validate.RequiredString("parentId", "body", string(m.ParentID)); err != nil {
		return err
	}

	return nil
}

func (m *Resource) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("size", "body", int64(m.Size)); err != nil {
		return err
	}

	return nil
}

var resourceTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["File","Folder"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		resourceTypeTypePropEnum = append(resourceTypeTypePropEnum, v)
	}
}

const (

	// ResourceTypeFile captures enum value "File"
	ResourceTypeFile string = "File"

	// ResourceTypeFolder captures enum value "Folder"
	ResourceTypeFolder string = "Folder"
)

// prop value enum
func (m *Resource) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, resourceTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Resource) validateType(formats strfmt.Registry) error {

	if err := validate.RequiredString("type", "body", string(m.Type)); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *Resource) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", int32(m.Version)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Resource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Resource) UnmarshalBinary(b []byte) error {
	var res Resource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
