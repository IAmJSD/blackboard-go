// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GradeColumn grade column
//
// swagger:model GradeColumn
type GradeColumn struct {

	// availability
	Availability *GradeColumnAvailability `json:"availability,omitempty"`

	// For grade columns associated with a content item, the ID of the content item.
	//
	// **Since**: 3000.11.0
	// Required: true
	// Read Only: true
	ContentID string `json:"contentId"`

	// The date this grade column was created.
	// Required: true
	// Read Only: true
	// Format: date-time
	Created strfmt.DateTime `json:"created"`

	// The description of the grade column.
	Description string `json:"description,omitempty"`

	// Whether this grade column is an external grade column.
	ExternalGrade bool `json:"externalGrade,omitempty"`

	// The externalId for this grade column
	ExternalID string `json:"externalId,omitempty"`

	// grading
	// Required: true
	Grading *GradeColumnGrading `json:"grading"`

	// The primary ID of the grade column.
	// Required: true
	// Read Only: true
	ID string `json:"id"`

	// The name of the grade column.
	// Required: true
	Name *string `json:"name"`

	// score
	Score *GradeColumnScore `json:"score,omitempty"`
}

// Validate validates this grade column
func (m *GradeColumn) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailability(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGrading(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScore(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GradeColumn) validateAvailability(formats strfmt.Registry) error {

	if swag.IsZero(m.Availability) { // not required
		return nil
	}

	if m.Availability != nil {
		if err := m.Availability.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("availability")
			}
			return err
		}
	}

	return nil
}

func (m *GradeColumn) validateContentID(formats strfmt.Registry) error {

	if err := validate.RequiredString("contentId", "body", string(m.ContentID)); err != nil {
		return err
	}

	return nil
}

func (m *GradeColumn) validateCreated(formats strfmt.Registry) error {

	if err := validate.Required("created", "body", strfmt.DateTime(m.Created)); err != nil {
		return err
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GradeColumn) validateGrading(formats strfmt.Registry) error {

	if err := validate.Required("grading", "body", m.Grading); err != nil {
		return err
	}

	if m.Grading != nil {
		if err := m.Grading.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("grading")
			}
			return err
		}
	}

	return nil
}

func (m *GradeColumn) validateID(formats strfmt.Registry) error {

	if err := validate.RequiredString("id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *GradeColumn) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *GradeColumn) validateScore(formats strfmt.Registry) error {

	if swag.IsZero(m.Score) { // not required
		return nil
	}

	if m.Score != nil {
		if err := m.Score.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("score")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GradeColumn) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GradeColumn) UnmarshalBinary(b []byte) error {
	var res GradeColumn
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GradeColumnAvailability Availability
//
// Settings controlling the availability/visibility of grade column data.
//
// swagger:model GradeColumnAvailability
type GradeColumnAvailability struct {

	// Whether this grade column is available to students
	//
	//
	// | Type      | Description
	//  | --------- | --------- |
	// | Yes | Students may view the grade column. |
	// | No | Students may not view the grade column. |
	//
	// Enum: [Yes No]
	Available string `json:"available,omitempty"`
}

// Validate validates this grade column availability
func (m *GradeColumnAvailability) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailable(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var gradeColumnAvailabilityTypeAvailablePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Yes","No"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		gradeColumnAvailabilityTypeAvailablePropEnum = append(gradeColumnAvailabilityTypeAvailablePropEnum, v)
	}
}

const (

	// GradeColumnAvailabilityAvailableYes captures enum value "Yes"
	GradeColumnAvailabilityAvailableYes string = "Yes"

	// GradeColumnAvailabilityAvailableNo captures enum value "No"
	GradeColumnAvailabilityAvailableNo string = "No"
)

// prop value enum
func (m *GradeColumnAvailability) validateAvailableEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, gradeColumnAvailabilityTypeAvailablePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GradeColumnAvailability) validateAvailable(formats strfmt.Registry) error {

	if swag.IsZero(m.Available) { // not required
		return nil
	}

	// value enum
	if err := m.validateAvailableEnum("availability"+"."+"available", "body", m.Available); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GradeColumnAvailability) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GradeColumnAvailability) UnmarshalBinary(b []byte) error {
	var res GradeColumnAvailability
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GradeColumnGrading Grading
//
// Settings controlling whether numerical and text grade values for this grade column are calculated, determined based on attempts, or manually entered.
//
// swagger:model GradeColumnGrading
type GradeColumnGrading struct {

	// anonymous grading
	// Required: true
	AnonymousGrading *GradeColumnGradingAnonymousGrading `json:"anonymousGrading"`

	// Number of attempts allowed for the grade column.
	AttemptsAllowed int32 `json:"attemptsAllowed,omitempty"`

	// The date on which attempts are due for the grade column.
	// Format: date-time
	Due strfmt.DateTime `json:"due,omitempty"`

	// The scoring model for the submitted grade column attempts.
	//
	//
	// | Type      | Description
	//  | --------- | --------- |
	// | Last |  |
	// | Highest |  |
	// | Lowest |  |
	// | First |  |
	// | Average |  |
	//
	// Enum: [Last Highest Lowest First Average]
	ScoringModel string `json:"scoringModel,omitempty"`

	// The type of Grading settings for this Grade Column.
	//
	//
	// | Type      | Description
	//  | --------- | --------- |
	// | Attempts | Indicates score and grade values are determined based on user attempts |
	// | Calculated | Indicates score and grade values are determined by applying a calculated formula. |
	// | Manual | Indicates score and grade values are manually entered. |
	//
	// Required: true
	// Read Only: true
	// Enum: [Attempts Calculated Manual]
	Type string `json:"type"`
}

// Validate validates this grade column grading
func (m *GradeColumnGrading) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAnonymousGrading(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScoringModel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GradeColumnGrading) validateAnonymousGrading(formats strfmt.Registry) error {

	if err := validate.Required("grading"+"."+"anonymousGrading", "body", m.AnonymousGrading); err != nil {
		return err
	}

	if m.AnonymousGrading != nil {
		if err := m.AnonymousGrading.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("grading" + "." + "anonymousGrading")
			}
			return err
		}
	}

	return nil
}

func (m *GradeColumnGrading) validateDue(formats strfmt.Registry) error {

	if swag.IsZero(m.Due) { // not required
		return nil
	}

	if err := validate.FormatOf("grading"+"."+"due", "body", "date-time", m.Due.String(), formats); err != nil {
		return err
	}

	return nil
}

var gradeColumnGradingTypeScoringModelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Last","Highest","Lowest","First","Average"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		gradeColumnGradingTypeScoringModelPropEnum = append(gradeColumnGradingTypeScoringModelPropEnum, v)
	}
}

const (

	// GradeColumnGradingScoringModelLast captures enum value "Last"
	GradeColumnGradingScoringModelLast string = "Last"

	// GradeColumnGradingScoringModelHighest captures enum value "Highest"
	GradeColumnGradingScoringModelHighest string = "Highest"

	// GradeColumnGradingScoringModelLowest captures enum value "Lowest"
	GradeColumnGradingScoringModelLowest string = "Lowest"

	// GradeColumnGradingScoringModelFirst captures enum value "First"
	GradeColumnGradingScoringModelFirst string = "First"

	// GradeColumnGradingScoringModelAverage captures enum value "Average"
	GradeColumnGradingScoringModelAverage string = "Average"
)

// prop value enum
func (m *GradeColumnGrading) validateScoringModelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, gradeColumnGradingTypeScoringModelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GradeColumnGrading) validateScoringModel(formats strfmt.Registry) error {

	if swag.IsZero(m.ScoringModel) { // not required
		return nil
	}

	// value enum
	if err := m.validateScoringModelEnum("grading"+"."+"scoringModel", "body", m.ScoringModel); err != nil {
		return err
	}

	return nil
}

var gradeColumnGradingTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Attempts","Calculated","Manual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		gradeColumnGradingTypeTypePropEnum = append(gradeColumnGradingTypeTypePropEnum, v)
	}
}

const (

	// GradeColumnGradingTypeAttempts captures enum value "Attempts"
	GradeColumnGradingTypeAttempts string = "Attempts"

	// GradeColumnGradingTypeCalculated captures enum value "Calculated"
	GradeColumnGradingTypeCalculated string = "Calculated"

	// GradeColumnGradingTypeManual captures enum value "Manual"
	GradeColumnGradingTypeManual string = "Manual"
)

// prop value enum
func (m *GradeColumnGrading) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, gradeColumnGradingTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GradeColumnGrading) validateType(formats strfmt.Registry) error {

	if err := validate.RequiredString("grading"+"."+"type", "body", string(m.Type)); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("grading"+"."+"type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GradeColumnGrading) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GradeColumnGrading) UnmarshalBinary(b []byte) error {
	var res GradeColumnGrading
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GradeColumnGradingAnonymousGrading AnonymousGrading
//
// Settings for anonymous grading
//
// swagger:model GradeColumnGradingAnonymousGrading
type GradeColumnGradingAnonymousGrading struct {

	// Date after which grades are released from being anonymized, if AnonymousGrading type is 'Date'.
	// Format: date-time
	ReleaseAfter strfmt.DateTime `json:"releaseAfter,omitempty"`

	// The type of AnonymousGrading settings for this Attempts based Grade Column.
	//
	//
	// | Type      | Description
	//  | --------- | --------- |
	// | None | Indicates anonymous grading is not enabled. |
	// | AfterAllGraded | Indicates anonymized grades are released after all attempts have been graded. |
	// | Date | Indicates anonymized grades are released after a specified release date. |
	//
	// Required: true
	// Enum: [None AfterAllGraded Date]
	Type *string `json:"type"`
}

// Validate validates this grade column grading anonymous grading
func (m *GradeColumnGradingAnonymousGrading) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReleaseAfter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GradeColumnGradingAnonymousGrading) validateReleaseAfter(formats strfmt.Registry) error {

	if swag.IsZero(m.ReleaseAfter) { // not required
		return nil
	}

	if err := validate.FormatOf("grading"+"."+"anonymousGrading"+"."+"releaseAfter", "body", "date-time", m.ReleaseAfter.String(), formats); err != nil {
		return err
	}

	return nil
}

var gradeColumnGradingAnonymousGradingTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["None","AfterAllGraded","Date"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		gradeColumnGradingAnonymousGradingTypeTypePropEnum = append(gradeColumnGradingAnonymousGradingTypeTypePropEnum, v)
	}
}

const (

	// GradeColumnGradingAnonymousGradingTypeNone captures enum value "None"
	GradeColumnGradingAnonymousGradingTypeNone string = "None"

	// GradeColumnGradingAnonymousGradingTypeAfterAllGraded captures enum value "AfterAllGraded"
	GradeColumnGradingAnonymousGradingTypeAfterAllGraded string = "AfterAllGraded"

	// GradeColumnGradingAnonymousGradingTypeDate captures enum value "Date"
	GradeColumnGradingAnonymousGradingTypeDate string = "Date"
)

// prop value enum
func (m *GradeColumnGradingAnonymousGrading) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, gradeColumnGradingAnonymousGradingTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GradeColumnGradingAnonymousGrading) validateType(formats strfmt.Registry) error {

	if err := validate.Required("grading"+"."+"anonymousGrading"+"."+"type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("grading"+"."+"anonymousGrading"+"."+"type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GradeColumnGradingAnonymousGrading) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GradeColumnGradingAnonymousGrading) UnmarshalBinary(b []byte) error {
	var res GradeColumnGradingAnonymousGrading
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GradeColumnScore Score
//
// Settings controlling the numerical scoring of this grade column.
//
// swagger:model GradeColumnScore
type GradeColumnScore struct {

	// Decimal place precision used to display scores for this grade column.
	//
	// **Deprecated**: since 3200.10.0; no alternative exists since this field never fully functioned as described.
	DecimalPlaces int32 `json:"decimalPlaces,omitempty"`

	// The points possible for this grade column.
	Possible float64 `json:"possible,omitempty"`
}

// Validate validates this grade column score
func (m *GradeColumnScore) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GradeColumnScore) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GradeColumnScore) UnmarshalBinary(b []byte) error {
	var res GradeColumnScore
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
