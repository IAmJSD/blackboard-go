// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GradingPeriod grading period
//
// swagger:model GradingPeriod
type GradingPeriod struct {

	// Property may be set to DoNotUseDates to explicitly blank dates,  in which case startDate and endDate are ignored; otherwise set to  UseDates; in this case startDate and endDate must be included and valid.
	//
	//
	// | Type      | Description
	//  | --------- | --------- |
	// | DoNotUseDates | Do not use dates |
	// | UseDates | Use dates |
	//
	// Enum: [DoNotUseDates UseDates]
	DateMode string `json:"dateMode,omitempty"`

	// The description of the grading period. Length is limited to 1000 characters.
	Description string `json:"description,omitempty"`

	// If start and end are set, and start is before end, these define temporal  coverage of grading period which may be used to associate GradableItems (Columns) by due date. End dates will be persisted as ending at  23:59:59 on the submitted day.
	// Format: date-time
	End strfmt.DateTime `json:"end,omitempty"`

	// The REST Id object that uniquely identifies this grading period for REST usage
	// Required: true
	// Read Only: true
	ID string `json:"id"`

	// The relative position of the grading period to other grading periods when viewed in the grade book.
	Position int32 `json:"position,omitempty"`

	// If start and end are set, and start is before end, these define temporal  coverage of grading period which may be used to associate GradableItems (Columns) by due date. Start dates will be persisted as starting at  00:00:00 on the submitted day.
	// Format: date-time
	Start strfmt.DateTime `json:"start,omitempty"`

	// The title of the grading period. Length is limited to 64 characters.
	// Required: true
	Title *string `json:"title"`
}

// Validate validates this grading period
func (m *GradingPeriod) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var gradingPeriodTypeDateModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DoNotUseDates","UseDates"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		gradingPeriodTypeDateModePropEnum = append(gradingPeriodTypeDateModePropEnum, v)
	}
}

const (

	// GradingPeriodDateModeDoNotUseDates captures enum value "DoNotUseDates"
	GradingPeriodDateModeDoNotUseDates string = "DoNotUseDates"

	// GradingPeriodDateModeUseDates captures enum value "UseDates"
	GradingPeriodDateModeUseDates string = "UseDates"
)

// prop value enum
func (m *GradingPeriod) validateDateModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, gradingPeriodTypeDateModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GradingPeriod) validateDateMode(formats strfmt.Registry) error {

	if swag.IsZero(m.DateMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateDateModeEnum("dateMode", "body", m.DateMode); err != nil {
		return err
	}

	return nil
}

func (m *GradingPeriod) validateEnd(formats strfmt.Registry) error {

	if swag.IsZero(m.End) { // not required
		return nil
	}

	if err := validate.FormatOf("end", "body", "date-time", m.End.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GradingPeriod) validateID(formats strfmt.Registry) error {

	if err := validate.RequiredString("id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *GradingPeriod) validateStart(formats strfmt.Registry) error {

	if swag.IsZero(m.Start) { // not required
		return nil
	}

	if err := validate.FormatOf("start", "body", "date-time", m.Start.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GradingPeriod) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GradingPeriod) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GradingPeriod) UnmarshalBinary(b []byte) error {
	var res GradingPeriod
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
