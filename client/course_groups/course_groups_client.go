// Code generated by go-swagger; DO NOT EDIT.

package course_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new course groups API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for course groups API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteLearnAPIPublicV2CoursesCourseIDGroupsGroupID(params *DeleteLearnAPIPublicV2CoursesCourseIDGroupsGroupIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLearnAPIPublicV2CoursesCourseIDGroupsGroupIDNoContent, error)

	DeleteLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupID(params *DeleteLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDNoContent, error)

	GetLearnAPIPublicV2CoursesCourseIDGroups(params *GetLearnAPIPublicV2CoursesCourseIDGroupsParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV2CoursesCourseIDGroupsOK, error)

	GetLearnAPIPublicV2CoursesCourseIDGroupsGroupID(params *GetLearnAPIPublicV2CoursesCourseIDGroupsGroupIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV2CoursesCourseIDGroupsGroupIDOK, error)

	GetLearnAPIPublicV2CoursesCourseIDGroupsSets(params *GetLearnAPIPublicV2CoursesCourseIDGroupsSetsParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV2CoursesCourseIDGroupsSetsOK, error)

	GetLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupID(params *GetLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDOK, error)

	GetLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDGroups(params *GetLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDGroupsParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDGroupsOK, error)

	PatchLearnAPIPublicV2CoursesCourseIDGroupsGroupID(params *PatchLearnAPIPublicV2CoursesCourseIDGroupsGroupIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchLearnAPIPublicV2CoursesCourseIDGroupsGroupIDOK, error)

	PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupID(params *PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDOK, error)

	PostLearnAPIPublicV2CoursesCourseIDGroups(params *PostLearnAPIPublicV2CoursesCourseIDGroupsParams, authInfo runtime.ClientAuthInfoWriter) (*PostLearnAPIPublicV2CoursesCourseIDGroupsCreated, error)

	PostLearnAPIPublicV2CoursesCourseIDGroupsSets(params *PostLearnAPIPublicV2CoursesCourseIDGroupsSetsParams, authInfo runtime.ClientAuthInfoWriter) (*PostLearnAPIPublicV2CoursesCourseIDGroupsSetsCreated, error)

	PostLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDGroups(params *PostLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDGroupsParams, authInfo runtime.ClientAuthInfoWriter) (*PostLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDGroupsCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteLearnAPIPublicV2CoursesCourseIDGroupsGroupID deletes group

  Deletes a groupset from the specified course.

Required entitlements:

- course.group.DELETE

**Since**: 3800.6.0
*/
func (a *Client) DeleteLearnAPIPublicV2CoursesCourseIDGroupsGroupID(params *DeleteLearnAPIPublicV2CoursesCourseIDGroupsGroupIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLearnAPIPublicV2CoursesCourseIDGroupsGroupIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLearnAPIPublicV2CoursesCourseIDGroupsGroupIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLearnAPIPublicV2CoursesCourseIDGroupsGroupID",
		Method:             "DELETE",
		PathPattern:        "/learn/api/public/v2/courses/{courseId}/groups/{groupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteLearnAPIPublicV2CoursesCourseIDGroupsGroupIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLearnAPIPublicV2CoursesCourseIDGroupsGroupIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLearnAPIPublicV2CoursesCourseIDGroupsGroupID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupID deletes group set

  Deletes a groupset from the specified course.

Required entitlements:

- course.group.DELETE

**Since**: 3800.6.0
*/
func (a *Client) DeleteLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupID(params *DeleteLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupID",
		Method:             "DELETE",
		PathPattern:        "/learn/api/public/v2/courses/{courseId}/groups/sets/{groupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnAPIPublicV2CoursesCourseIDGroups gets groups

  Returns a list of all top-level groups in the specified course.

Callers with the following entitlement can view all groups in the course:

- course.groups.VIEW
Callers enrolled in course can view all groups they're enrolled in, and all self-enrollment groups

**Since**: 3800.6.0
*/
func (a *Client) GetLearnAPIPublicV2CoursesCourseIDGroups(params *GetLearnAPIPublicV2CoursesCourseIDGroupsParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV2CoursesCourseIDGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV2CoursesCourseIDGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV2CoursesCourseIDGroups",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v2/courses/{courseId}/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV2CoursesCourseIDGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV2CoursesCourseIDGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV2CoursesCourseIDGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnAPIPublicV2CoursesCourseIDGroupsGroupID gets group

  Loads a group in the specified course.

Callers not enrolled in the course must have the following entitlement:

- course.groups.VIEW

**Since**: 3800.6.0
*/
func (a *Client) GetLearnAPIPublicV2CoursesCourseIDGroupsGroupID(params *GetLearnAPIPublicV2CoursesCourseIDGroupsGroupIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV2CoursesCourseIDGroupsGroupIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV2CoursesCourseIDGroupsGroupIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV2CoursesCourseIDGroupsGroupID",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v2/courses/{courseId}/groups/{groupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV2CoursesCourseIDGroupsGroupIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV2CoursesCourseIDGroupsGroupIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV2CoursesCourseIDGroupsGroupID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnAPIPublicV2CoursesCourseIDGroupsSets gets group sets

  Returns a list of all groupsets

Callers not enrolled in the course must have the following entitlement:

- course.groups.VIEW
- course.groups.admin.VIEW

**Since**: 3800.6.0
*/
func (a *Client) GetLearnAPIPublicV2CoursesCourseIDGroupsSets(params *GetLearnAPIPublicV2CoursesCourseIDGroupsSetsParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV2CoursesCourseIDGroupsSetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV2CoursesCourseIDGroupsSetsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV2CoursesCourseIDGroupsSets",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v2/courses/{courseId}/groups/sets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV2CoursesCourseIDGroupsSetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV2CoursesCourseIDGroupsSetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV2CoursesCourseIDGroupsSets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupID gets group set

  Loads a groupset in the specified course.

Users calling this end point should meet at least one of these entitlement checks.

- course.groups.VIEW
- course.groups.admin.VIEW

**Since**: 3800.6.0
*/
func (a *Client) GetLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupID(params *GetLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupID",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v2/courses/{courseId}/groups/sets/{groupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDGroups gets group set children

  Returns a list of all groups within a groupset

Callers not enrolled in the group must have the following entitlement:

- course.groups.VIEW

**Since**: 3800.6.0
*/
func (a *Client) GetLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDGroups(params *GetLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDGroupsParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDGroups",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v2/courses/{courseId}/groups/sets/{groupId}/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchLearnAPIPublicV2CoursesCourseIDGroupsGroupID updates group

  Updates a group in the specified course.

Minimal entitlements required:

- course.group.MODIFY

**Since**: 3800.6.0
*/
func (a *Client) PatchLearnAPIPublicV2CoursesCourseIDGroupsGroupID(params *PatchLearnAPIPublicV2CoursesCourseIDGroupsGroupIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchLearnAPIPublicV2CoursesCourseIDGroupsGroupIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchLearnAPIPublicV2CoursesCourseIDGroupsGroupIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchLearnAPIPublicV2CoursesCourseIDGroupsGroupID",
		Method:             "PATCH",
		PathPattern:        "/learn/api/public/v2/courses/{courseId}/groups/{groupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchLearnAPIPublicV2CoursesCourseIDGroupsGroupIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchLearnAPIPublicV2CoursesCourseIDGroupsGroupIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchLearnAPIPublicV2CoursesCourseIDGroupsGroupID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupID updates group set

  Updates a groupset in the specified course.

Minimal entitlements required:

- course.group.MODIFY

**Since**: 3800.6.0
*/
func (a *Client) PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupID(params *PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupID",
		Method:             "PATCH",
		PathPattern:        "/learn/api/public/v2/courses/{courseId}/groups/sets/{groupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostLearnAPIPublicV2CoursesCourseIDGroups creates group

  Creates a group in the specified course.

Callers must have the following entitlement:

- 'course.groups.CREATE'

**Since**: 3800.6.0
*/
func (a *Client) PostLearnAPIPublicV2CoursesCourseIDGroups(params *PostLearnAPIPublicV2CoursesCourseIDGroupsParams, authInfo runtime.ClientAuthInfoWriter) (*PostLearnAPIPublicV2CoursesCourseIDGroupsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLearnAPIPublicV2CoursesCourseIDGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLearnAPIPublicV2CoursesCourseIDGroups",
		Method:             "POST",
		PathPattern:        "/learn/api/public/v2/courses/{courseId}/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostLearnAPIPublicV2CoursesCourseIDGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLearnAPIPublicV2CoursesCourseIDGroupsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLearnAPIPublicV2CoursesCourseIDGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostLearnAPIPublicV2CoursesCourseIDGroupsSets creates group set

  Creates a groupset in the specified course.

Callers must have the following entitlement:

- 'course.groups.CREATE'

**Since**: 3800.6.0
*/
func (a *Client) PostLearnAPIPublicV2CoursesCourseIDGroupsSets(params *PostLearnAPIPublicV2CoursesCourseIDGroupsSetsParams, authInfo runtime.ClientAuthInfoWriter) (*PostLearnAPIPublicV2CoursesCourseIDGroupsSetsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLearnAPIPublicV2CoursesCourseIDGroupsSetsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLearnAPIPublicV2CoursesCourseIDGroupsSets",
		Method:             "POST",
		PathPattern:        "/learn/api/public/v2/courses/{courseId}/groups/sets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostLearnAPIPublicV2CoursesCourseIDGroupsSetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLearnAPIPublicV2CoursesCourseIDGroupsSetsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLearnAPIPublicV2CoursesCourseIDGroupsSets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDGroups creates group set child

  Creates a group within a groupset.

Callers must have the following entitlement:

- 'course.groups.CREATE'

**Since**: 3800.6.0
*/
func (a *Client) PostLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDGroups(params *PostLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDGroupsParams, authInfo runtime.ClientAuthInfoWriter) (*PostLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDGroupsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDGroups",
		Method:             "POST",
		PathPattern:        "/learn/api/public/v2/courses/{courseId}/groups/sets/{groupId}/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDGroupsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
