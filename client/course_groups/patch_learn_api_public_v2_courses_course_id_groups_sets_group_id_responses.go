// Code generated by go-swagger; DO NOT EDIT.

package course_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/jakemakesstuff/blackboard-go/models"
)

// PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDReader is a Reader for the PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupID structure.
type PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDOK creates a PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDOK with default headers values
func NewPatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDOK() *PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDOK {
	return &PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDOK{}
}

/*PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDOK handles this case with default header values.

OK
*/
type PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDOK struct {
	Payload *models.GroupV2
}

func (o *PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDOK) Error() string {
	return fmt.Sprintf("[PATCH /learn/api/public/v2/courses/{courseId}/groups/sets/{groupId}][%d] patchLearnApiPublicV2CoursesCourseIdGroupsSetsGroupIdOK  %+v", 200, o.Payload)
}

func (o *PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDOK) GetPayload() *models.GroupV2 {
	return o.Payload
}

func (o *PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GroupV2)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDBadRequest creates a PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDBadRequest with default headers values
func NewPatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDBadRequest() *PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDBadRequest {
	return &PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDBadRequest{}
}

/*PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDBadRequest handles this case with default header values.

Bad Request
*/
type PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDBadRequest struct {
	Payload *models.RestException
}

func (o *PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /learn/api/public/v2/courses/{courseId}/groups/sets/{groupId}][%d] patchLearnApiPublicV2CoursesCourseIdGroupsSetsGroupIdBadRequest  %+v", 400, o.Payload)
}

func (o *PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDBadRequest) GetPayload() *models.RestException {
	return o.Payload
}

func (o *PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDForbidden creates a PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDForbidden with default headers values
func NewPatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDForbidden() *PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDForbidden {
	return &PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDForbidden{}
}

/*PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDForbidden handles this case with default header values.

Forbidden
*/
type PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDForbidden struct {
	Payload *models.RestException
}

func (o *PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDForbidden) Error() string {
	return fmt.Sprintf("[PATCH /learn/api/public/v2/courses/{courseId}/groups/sets/{groupId}][%d] patchLearnApiPublicV2CoursesCourseIdGroupsSetsGroupIdForbidden  %+v", 403, o.Payload)
}

func (o *PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDForbidden) GetPayload() *models.RestException {
	return o.Payload
}

func (o *PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDNotFound creates a PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDNotFound with default headers values
func NewPatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDNotFound() *PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDNotFound {
	return &PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDNotFound{}
}

/*PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDNotFound handles this case with default header values.

Not Found
*/
type PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDNotFound struct {
	Payload *models.RestException
}

func (o *PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /learn/api/public/v2/courses/{courseId}/groups/sets/{groupId}][%d] patchLearnApiPublicV2CoursesCourseIdGroupsSetsGroupIdNotFound  %+v", 404, o.Payload)
}

func (o *PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDNotFound) GetPayload() *models.RestException {
	return o.Payload
}

func (o *PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDConflict creates a PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDConflict with default headers values
func NewPatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDConflict() *PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDConflict {
	return &PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDConflict{}
}

/*PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDConflict handles this case with default header values.

Conflict
*/
type PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDConflict struct {
	Payload *models.RestException
}

func (o *PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDConflict) Error() string {
	return fmt.Sprintf("[PATCH /learn/api/public/v2/courses/{courseId}/groups/sets/{groupId}][%d] patchLearnApiPublicV2CoursesCourseIdGroupsSetsGroupIdConflict  %+v", 409, o.Payload)
}

func (o *PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDConflict) GetPayload() *models.RestException {
	return o.Payload
}

func (o *PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDBody patch learn API public v2 courses course ID groups sets group ID body
swagger:model PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDBody
*/
type PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDBody struct {

	// availability
	Availability *PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDParamsBodyAvailability `json:"availability,omitempty"`

	// The description of the group. This field supports BbML; see <a target='_blank' href='https://docs.blackboard.com/learn/REST/Blackboard%20Markup%20Language%20-%20BbML.html'>here</a> for more information.
	Description string `json:"description,omitempty"`

	// enrollment
	Enrollment *PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDParamsBodyEnrollment `json:"enrollment,omitempty"`

	// An externally-defined unique ID for the group. Defaults to a random UUID if not provided during create.
	ExternalID string `json:"externalId,omitempty"`

	// The title of the group.
	Name string `json:"name,omitempty"`
}

// Validate validates this patch learn API public v2 courses course ID groups sets group ID body
func (o *PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAvailability(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEnrollment(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDBody) validateAvailability(formats strfmt.Registry) error {

	if swag.IsZero(o.Availability) { // not required
		return nil
	}

	if o.Availability != nil {
		if err := o.Availability.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("input" + "." + "availability")
			}
			return err
		}
	}

	return nil
}

func (o *PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDBody) validateEnrollment(formats strfmt.Registry) error {

	if swag.IsZero(o.Enrollment) { // not required
		return nil
	}

	if o.Enrollment != nil {
		if err := o.Enrollment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("input" + "." + "enrollment")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDBody) UnmarshalBinary(b []byte) error {
	var res PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDParamsBodyAvailability Availability
//
// Settings controlling availability of the group to students.
swagger:model PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDParamsBodyAvailability
*/
type PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDParamsBodyAvailability struct {

	// Whether the Group is currently available to students.
	//
	//
	// | Type      | Description
	//  | --------- | --------- |
	// | Yes | Students may access the group. |
	// | No | Students may not access the group. |
	// | SignupOnly | Students may only signup and see the group listed, not yet access it. |
	//
	// Enum: [Yes No SignupOnly]
	Available string `json:"available,omitempty"`
}

// Validate validates this patch learn API public v2 courses course ID groups sets group ID params body availability
func (o *PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDParamsBodyAvailability) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAvailable(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var patchLearnApiPublicV2CoursesCourseIdGroupsSetsGroupIdParamsBodyAvailabilityTypeAvailablePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Yes","No","SignupOnly"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		patchLearnApiPublicV2CoursesCourseIdGroupsSetsGroupIdParamsBodyAvailabilityTypeAvailablePropEnum = append(patchLearnApiPublicV2CoursesCourseIdGroupsSetsGroupIdParamsBodyAvailabilityTypeAvailablePropEnum, v)
	}
}

const (

	// PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDParamsBodyAvailabilityAvailableYes captures enum value "Yes"
	PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDParamsBodyAvailabilityAvailableYes string = "Yes"

	// PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDParamsBodyAvailabilityAvailableNo captures enum value "No"
	PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDParamsBodyAvailabilityAvailableNo string = "No"

	// PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDParamsBodyAvailabilityAvailableSignupOnly captures enum value "SignupOnly"
	PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDParamsBodyAvailabilityAvailableSignupOnly string = "SignupOnly"
)

// prop value enum
func (o *PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDParamsBodyAvailability) validateAvailableEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, patchLearnApiPublicV2CoursesCourseIdGroupsSetsGroupIdParamsBodyAvailabilityTypeAvailablePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDParamsBodyAvailability) validateAvailable(formats strfmt.Registry) error {

	if swag.IsZero(o.Available) { // not required
		return nil
	}

	// value enum
	if err := o.validateAvailableEnum("input"+"."+"availability"+"."+"available", "body", o.Available); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDParamsBodyAvailability) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDParamsBodyAvailability) UnmarshalBinary(b []byte) error {
	var res PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDParamsBodyAvailability
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDParamsBodyEnrollment Enrollment
//
// Settings controlling enrollment of the group to students.
swagger:model PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDParamsBodyEnrollment
*/
type PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDParamsBodyEnrollment struct {

	// The maximum allowed enrollment size for self enrolled groups.
	Limit int32 `json:"limit,omitempty"`

	// signup sheet
	SignupSheet *PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDParamsBodyEnrollmentSignupSheet `json:"signupSheet,omitempty"`
}

// Validate validates this patch learn API public v2 courses course ID groups sets group ID params body enrollment
func (o *PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDParamsBodyEnrollment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSignupSheet(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDParamsBodyEnrollment) validateSignupSheet(formats strfmt.Registry) error {

	if swag.IsZero(o.SignupSheet) { // not required
		return nil
	}

	if o.SignupSheet != nil {
		if err := o.SignupSheet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("input" + "." + "enrollment" + "." + "signupSheet")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDParamsBodyEnrollment) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDParamsBodyEnrollment) UnmarshalBinary(b []byte) error {
	var res PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDParamsBodyEnrollment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDParamsBodyEnrollmentSignupSheet SignupSheet
//
// Settings controlling signup to the group for students. Only applicable if Enrollment.Type allows self enrollment.
swagger:model PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDParamsBodyEnrollmentSignupSheet
*/
type PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDParamsBodyEnrollmentSignupSheet struct {

	// The description of the signup sheet This field supports BbML; see <a target='_blank' href='https://docs.blackboard.com/learn/REST/Blackboard%20Markup%20Language%20-%20BbML.html'>here</a> for more information.
	Description string `json:"description,omitempty"`

	// The name of the signup sheet
	Name string `json:"name,omitempty"`

	// A boolean indicating whether or not members can be seen by others prior to signing up.
	ShowMembers bool `json:"showMembers,omitempty"`
}

// Validate validates this patch learn API public v2 courses course ID groups sets group ID params body enrollment signup sheet
func (o *PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDParamsBodyEnrollmentSignupSheet) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDParamsBodyEnrollmentSignupSheet) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDParamsBodyEnrollmentSignupSheet) UnmarshalBinary(b []byte) error {
	var res PatchLearnAPIPublicV2CoursesCourseIDGroupsSetsGroupIDParamsBodyEnrollmentSignupSheet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
