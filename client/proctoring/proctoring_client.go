// Code generated by go-swagger; DO NOT EDIT.

package proctoring

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new proctoring API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for proctoring API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetLearnAPIPublicV1ProctoringServices(params *GetLearnAPIPublicV1ProctoringServicesParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1ProctoringServicesOK, error)

	GetLearnAPIPublicV1ProctoringServicesProctoringServiceID(params *GetLearnAPIPublicV1ProctoringServicesProctoringServiceIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1ProctoringServicesProctoringServiceIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetLearnAPIPublicV1ProctoringServices gets proctoring services

  Returns a list of proctoring services Supports the standard paging query parameters, with a maximum page size of 1000. No entitlement check is performed as this data is not restricted. Any secure fields such as keys/secrets are not included in the results.

**Since**: 3500.6.0
*/
func (a *Client) GetLearnAPIPublicV1ProctoringServices(params *GetLearnAPIPublicV1ProctoringServicesParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1ProctoringServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV1ProctoringServicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV1ProctoringServices",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v1/proctoring/services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV1ProctoringServicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV1ProctoringServicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV1ProctoringServices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnAPIPublicV1ProctoringServicesProctoringServiceID gets proctoring service

  Returns the proctoring service with the specified Id No entitlement check is performed as this data is not restricted. Any secure fields such as keys/secrets are not included in the results.

**Since**: 3500.6.0
*/
func (a *Client) GetLearnAPIPublicV1ProctoringServicesProctoringServiceID(params *GetLearnAPIPublicV1ProctoringServicesProctoringServiceIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1ProctoringServicesProctoringServiceIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV1ProctoringServicesProctoringServiceIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV1ProctoringServicesProctoringServiceID",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v1/proctoring/services/{proctoringServiceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV1ProctoringServicesProctoringServiceIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV1ProctoringServicesProctoringServiceIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV1ProctoringServicesProctoringServiceID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
