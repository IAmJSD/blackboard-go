// Code generated by go-swagger; DO NOT EDIT.

package announcements

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/jakemakesstuff/blackboard-go/models"
)

// PatchLearnAPIPublicV1AnnouncementsAnnouncementIDReader is a Reader for the PatchLearnAPIPublicV1AnnouncementsAnnouncementID structure.
type PatchLearnAPIPublicV1AnnouncementsAnnouncementIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchLearnAPIPublicV1AnnouncementsAnnouncementIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchLearnAPIPublicV1AnnouncementsAnnouncementIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchLearnAPIPublicV1AnnouncementsAnnouncementIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchLearnAPIPublicV1AnnouncementsAnnouncementIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchLearnAPIPublicV1AnnouncementsAnnouncementIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchLearnAPIPublicV1AnnouncementsAnnouncementIDOK creates a PatchLearnAPIPublicV1AnnouncementsAnnouncementIDOK with default headers values
func NewPatchLearnAPIPublicV1AnnouncementsAnnouncementIDOK() *PatchLearnAPIPublicV1AnnouncementsAnnouncementIDOK {
	return &PatchLearnAPIPublicV1AnnouncementsAnnouncementIDOK{}
}

/*PatchLearnAPIPublicV1AnnouncementsAnnouncementIDOK handles this case with default header values.

OK
*/
type PatchLearnAPIPublicV1AnnouncementsAnnouncementIDOK struct {
	Payload *models.Announcement
}

func (o *PatchLearnAPIPublicV1AnnouncementsAnnouncementIDOK) Error() string {
	return fmt.Sprintf("[PATCH /learn/api/public/v1/announcements/{announcementId}][%d] patchLearnApiPublicV1AnnouncementsAnnouncementIdOK  %+v", 200, o.Payload)
}

func (o *PatchLearnAPIPublicV1AnnouncementsAnnouncementIDOK) GetPayload() *models.Announcement {
	return o.Payload
}

func (o *PatchLearnAPIPublicV1AnnouncementsAnnouncementIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Announcement)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearnAPIPublicV1AnnouncementsAnnouncementIDBadRequest creates a PatchLearnAPIPublicV1AnnouncementsAnnouncementIDBadRequest with default headers values
func NewPatchLearnAPIPublicV1AnnouncementsAnnouncementIDBadRequest() *PatchLearnAPIPublicV1AnnouncementsAnnouncementIDBadRequest {
	return &PatchLearnAPIPublicV1AnnouncementsAnnouncementIDBadRequest{}
}

/*PatchLearnAPIPublicV1AnnouncementsAnnouncementIDBadRequest handles this case with default header values.

Invalid request data found while updating an announcement
*/
type PatchLearnAPIPublicV1AnnouncementsAnnouncementIDBadRequest struct {
	Payload *models.RestException
}

func (o *PatchLearnAPIPublicV1AnnouncementsAnnouncementIDBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /learn/api/public/v1/announcements/{announcementId}][%d] patchLearnApiPublicV1AnnouncementsAnnouncementIdBadRequest  %+v", 400, o.Payload)
}

func (o *PatchLearnAPIPublicV1AnnouncementsAnnouncementIDBadRequest) GetPayload() *models.RestException {
	return o.Payload
}

func (o *PatchLearnAPIPublicV1AnnouncementsAnnouncementIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearnAPIPublicV1AnnouncementsAnnouncementIDForbidden creates a PatchLearnAPIPublicV1AnnouncementsAnnouncementIDForbidden with default headers values
func NewPatchLearnAPIPublicV1AnnouncementsAnnouncementIDForbidden() *PatchLearnAPIPublicV1AnnouncementsAnnouncementIDForbidden {
	return &PatchLearnAPIPublicV1AnnouncementsAnnouncementIDForbidden{}
}

/*PatchLearnAPIPublicV1AnnouncementsAnnouncementIDForbidden handles this case with default header values.

The currently authenticated user has insufficient privileges to update an announcement
*/
type PatchLearnAPIPublicV1AnnouncementsAnnouncementIDForbidden struct {
	Payload *models.RestException
}

func (o *PatchLearnAPIPublicV1AnnouncementsAnnouncementIDForbidden) Error() string {
	return fmt.Sprintf("[PATCH /learn/api/public/v1/announcements/{announcementId}][%d] patchLearnApiPublicV1AnnouncementsAnnouncementIdForbidden  %+v", 403, o.Payload)
}

func (o *PatchLearnAPIPublicV1AnnouncementsAnnouncementIDForbidden) GetPayload() *models.RestException {
	return o.Payload
}

func (o *PatchLearnAPIPublicV1AnnouncementsAnnouncementIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearnAPIPublicV1AnnouncementsAnnouncementIDNotFound creates a PatchLearnAPIPublicV1AnnouncementsAnnouncementIDNotFound with default headers values
func NewPatchLearnAPIPublicV1AnnouncementsAnnouncementIDNotFound() *PatchLearnAPIPublicV1AnnouncementsAnnouncementIDNotFound {
	return &PatchLearnAPIPublicV1AnnouncementsAnnouncementIDNotFound{}
}

/*PatchLearnAPIPublicV1AnnouncementsAnnouncementIDNotFound handles this case with default header values.

Announcement cannot be found
*/
type PatchLearnAPIPublicV1AnnouncementsAnnouncementIDNotFound struct {
	Payload *models.RestException
}

func (o *PatchLearnAPIPublicV1AnnouncementsAnnouncementIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /learn/api/public/v1/announcements/{announcementId}][%d] patchLearnApiPublicV1AnnouncementsAnnouncementIdNotFound  %+v", 404, o.Payload)
}

func (o *PatchLearnAPIPublicV1AnnouncementsAnnouncementIDNotFound) GetPayload() *models.RestException {
	return o.Payload
}

func (o *PatchLearnAPIPublicV1AnnouncementsAnnouncementIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PatchLearnAPIPublicV1AnnouncementsAnnouncementIDBody patch learn API public v1 announcements announcement ID body
swagger:model PatchLearnAPIPublicV1AnnouncementsAnnouncementIDBody
*/
type PatchLearnAPIPublicV1AnnouncementsAnnouncementIDBody struct {

	// availability
	Availability *PatchLearnAPIPublicV1AnnouncementsAnnouncementIDParamsBodyAvailability `json:"availability,omitempty"`

	// The message body of the System Announcement. This field supports BbML; see <a target='_blank' href='https://docs.blackboard.com/learn/REST/Blackboard%20Markup%20Language%20-%20BbML.html'>here</a> for more information.
	Body string `json:"body,omitempty"`

	// Whether this System Announcement should be displayed on the login page.
	ShowAtLogin bool `json:"showAtLogin,omitempty"`

	// Whether this System Announcement should be displayed on courses.
	ShowInCourses bool `json:"showInCourses,omitempty"`

	// The title of this System Announcement.
	Title string `json:"title,omitempty"`
}

// Validate validates this patch learn API public v1 announcements announcement ID body
func (o *PatchLearnAPIPublicV1AnnouncementsAnnouncementIDBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAvailability(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchLearnAPIPublicV1AnnouncementsAnnouncementIDBody) validateAvailability(formats strfmt.Registry) error {

	if swag.IsZero(o.Availability) { // not required
		return nil
	}

	if o.Availability != nil {
		if err := o.Availability.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("input" + "." + "availability")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchLearnAPIPublicV1AnnouncementsAnnouncementIDBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchLearnAPIPublicV1AnnouncementsAnnouncementIDBody) UnmarshalBinary(b []byte) error {
	var res PatchLearnAPIPublicV1AnnouncementsAnnouncementIDBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchLearnAPIPublicV1AnnouncementsAnnouncementIDParamsBodyAvailability Availability
//
// Settings controlling availability of the System Announcement.
swagger:model PatchLearnAPIPublicV1AnnouncementsAnnouncementIDParamsBodyAvailability
*/
type PatchLearnAPIPublicV1AnnouncementsAnnouncementIDParamsBodyAvailability struct {

	// duration
	Duration *PatchLearnAPIPublicV1AnnouncementsAnnouncementIDParamsBodyAvailabilityDuration `json:"duration,omitempty"`
}

// Validate validates this patch learn API public v1 announcements announcement ID params body availability
func (o *PatchLearnAPIPublicV1AnnouncementsAnnouncementIDParamsBodyAvailability) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDuration(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchLearnAPIPublicV1AnnouncementsAnnouncementIDParamsBodyAvailability) validateDuration(formats strfmt.Registry) error {

	if swag.IsZero(o.Duration) { // not required
		return nil
	}

	if o.Duration != nil {
		if err := o.Duration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("input" + "." + "availability" + "." + "duration")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchLearnAPIPublicV1AnnouncementsAnnouncementIDParamsBodyAvailability) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchLearnAPIPublicV1AnnouncementsAnnouncementIDParamsBodyAvailability) UnmarshalBinary(b []byte) error {
	var res PatchLearnAPIPublicV1AnnouncementsAnnouncementIDParamsBodyAvailability
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchLearnAPIPublicV1AnnouncementsAnnouncementIDParamsBodyAvailabilityDuration Duration
//
// Duration indicates when the System Announcement is Available based on whether it is Permanent or if the date/time of the request falls within its Start & End dates.
swagger:model PatchLearnAPIPublicV1AnnouncementsAnnouncementIDParamsBodyAvailabilityDuration
*/
type PatchLearnAPIPublicV1AnnouncementsAnnouncementIDParamsBodyAvailabilityDuration struct {

	// The date this Announcement stops being Available.
	// Format: date-time
	End strfmt.DateTime `json:"end,omitempty"`

	// The date this Announcement starts being Available.
	// Format: date-time
	Start strfmt.DateTime `json:"start,omitempty"`

	// Indicates whether this System Announcement is always displayed (Permanent) or if it is shown only between the Start and End dates (Restricted).
	//
	//
	// | Type      | Description
	//  | --------- | --------- |
	// | Permanent | The Announcement will always be displayed. |
	// | Restricted | The Announcement will start being displayed on Duration.Start and stop being displayed on Duration.End |
	//
	// Enum: [Permanent Restricted]
	Type string `json:"type,omitempty"`
}

// Validate validates this patch learn API public v1 announcements announcement ID params body availability duration
func (o *PatchLearnAPIPublicV1AnnouncementsAnnouncementIDParamsBodyAvailabilityDuration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStart(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchLearnAPIPublicV1AnnouncementsAnnouncementIDParamsBodyAvailabilityDuration) validateEnd(formats strfmt.Registry) error {

	if swag.IsZero(o.End) { // not required
		return nil
	}

	if err := validate.FormatOf("input"+"."+"availability"+"."+"duration"+"."+"end", "body", "date-time", o.End.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *PatchLearnAPIPublicV1AnnouncementsAnnouncementIDParamsBodyAvailabilityDuration) validateStart(formats strfmt.Registry) error {

	if swag.IsZero(o.Start) { // not required
		return nil
	}

	if err := validate.FormatOf("input"+"."+"availability"+"."+"duration"+"."+"start", "body", "date-time", o.Start.String(), formats); err != nil {
		return err
	}

	return nil
}

var patchLearnApiPublicV1AnnouncementsAnnouncementIdParamsBodyAvailabilityDurationTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Permanent","Restricted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		patchLearnApiPublicV1AnnouncementsAnnouncementIdParamsBodyAvailabilityDurationTypeTypePropEnum = append(patchLearnApiPublicV1AnnouncementsAnnouncementIdParamsBodyAvailabilityDurationTypeTypePropEnum, v)
	}
}

const (

	// PatchLearnAPIPublicV1AnnouncementsAnnouncementIDParamsBodyAvailabilityDurationTypePermanent captures enum value "Permanent"
	PatchLearnAPIPublicV1AnnouncementsAnnouncementIDParamsBodyAvailabilityDurationTypePermanent string = "Permanent"

	// PatchLearnAPIPublicV1AnnouncementsAnnouncementIDParamsBodyAvailabilityDurationTypeRestricted captures enum value "Restricted"
	PatchLearnAPIPublicV1AnnouncementsAnnouncementIDParamsBodyAvailabilityDurationTypeRestricted string = "Restricted"
)

// prop value enum
func (o *PatchLearnAPIPublicV1AnnouncementsAnnouncementIDParamsBodyAvailabilityDuration) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, patchLearnApiPublicV1AnnouncementsAnnouncementIdParamsBodyAvailabilityDurationTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *PatchLearnAPIPublicV1AnnouncementsAnnouncementIDParamsBodyAvailabilityDuration) validateType(formats strfmt.Registry) error {

	if swag.IsZero(o.Type) { // not required
		return nil
	}

	// value enum
	if err := o.validateTypeEnum("input"+"."+"availability"+"."+"duration"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchLearnAPIPublicV1AnnouncementsAnnouncementIDParamsBodyAvailabilityDuration) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchLearnAPIPublicV1AnnouncementsAnnouncementIDParamsBodyAvailabilityDuration) UnmarshalBinary(b []byte) error {
	var res PatchLearnAPIPublicV1AnnouncementsAnnouncementIDParamsBodyAvailabilityDuration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
