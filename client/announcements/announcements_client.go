// Code generated by go-swagger; DO NOT EDIT.

package announcements

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new announcements API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for announcements API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteLearnAPIPublicV1AnnouncementsAnnouncementID(params *DeleteLearnAPIPublicV1AnnouncementsAnnouncementIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLearnAPIPublicV1AnnouncementsAnnouncementIDNoContent, error)

	GetLearnAPIPublicV1Announcements(params *GetLearnAPIPublicV1AnnouncementsParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1AnnouncementsOK, error)

	GetLearnAPIPublicV1AnnouncementsAnnouncementID(params *GetLearnAPIPublicV1AnnouncementsAnnouncementIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1AnnouncementsAnnouncementIDOK, error)

	PatchLearnAPIPublicV1AnnouncementsAnnouncementID(params *PatchLearnAPIPublicV1AnnouncementsAnnouncementIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchLearnAPIPublicV1AnnouncementsAnnouncementIDOK, error)

	PostLearnAPIPublicV1Announcements(params *PostLearnAPIPublicV1AnnouncementsParams, authInfo runtime.ClientAuthInfoWriter) (*PostLearnAPIPublicV1AnnouncementsCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteLearnAPIPublicV1AnnouncementsAnnouncementID deletes announcement

  Delete a System Announcement. Users with the 'system.announcements.DELETE' entitlement can delete System Announcements.

**Since**: 3100.7.0
*/
func (a *Client) DeleteLearnAPIPublicV1AnnouncementsAnnouncementID(params *DeleteLearnAPIPublicV1AnnouncementsAnnouncementIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLearnAPIPublicV1AnnouncementsAnnouncementIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLearnAPIPublicV1AnnouncementsAnnouncementIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLearnAPIPublicV1AnnouncementsAnnouncementID",
		Method:             "DELETE",
		PathPattern:        "/learn/api/public/v1/announcements/{announcementId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteLearnAPIPublicV1AnnouncementsAnnouncementIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLearnAPIPublicV1AnnouncementsAnnouncementIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLearnAPIPublicV1AnnouncementsAnnouncementID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnAPIPublicV1Announcements gets announcements

  Return a list of System Announcements. Users with the 'system.announcements.VIEW' entitlement can view 'available' System Announcements. Users with the 'system.announcements.admin.VIEW' entitlement can view 'available' & 'unavailable' System Announcements.

**Since**: 3100.7.0
*/
func (a *Client) GetLearnAPIPublicV1Announcements(params *GetLearnAPIPublicV1AnnouncementsParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1AnnouncementsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV1AnnouncementsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV1Announcements",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v1/announcements",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV1AnnouncementsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV1AnnouncementsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV1Announcements: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnAPIPublicV1AnnouncementsAnnouncementID gets announcement

  Get a System Announcement. Users with the 'system.announcements.VIEW' entitlement can view 'available' System Announcements. Users with the 'system.announcements.admin.VIEW' entitlement can view 'available' & 'unavailable' System Announcements.

**Since**: 3100.7.0
*/
func (a *Client) GetLearnAPIPublicV1AnnouncementsAnnouncementID(params *GetLearnAPIPublicV1AnnouncementsAnnouncementIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1AnnouncementsAnnouncementIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV1AnnouncementsAnnouncementIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV1AnnouncementsAnnouncementID",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v1/announcements/{announcementId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV1AnnouncementsAnnouncementIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV1AnnouncementsAnnouncementIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV1AnnouncementsAnnouncementID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchLearnAPIPublicV1AnnouncementsAnnouncementID updates announcement

  Update a System Announcement. Users with the 'system.announcements.MODIFY' entitlement can update System Announcements.

**Since**: 3100.7.0
*/
func (a *Client) PatchLearnAPIPublicV1AnnouncementsAnnouncementID(params *PatchLearnAPIPublicV1AnnouncementsAnnouncementIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchLearnAPIPublicV1AnnouncementsAnnouncementIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchLearnAPIPublicV1AnnouncementsAnnouncementIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchLearnAPIPublicV1AnnouncementsAnnouncementID",
		Method:             "PATCH",
		PathPattern:        "/learn/api/public/v1/announcements/{announcementId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchLearnAPIPublicV1AnnouncementsAnnouncementIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchLearnAPIPublicV1AnnouncementsAnnouncementIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchLearnAPIPublicV1AnnouncementsAnnouncementID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostLearnAPIPublicV1Announcements creates announcement

  Create a System Announcement. Users with the 'system.announcements.CREATE' entitlement can create System Announcements.

**Since**: 3100.7.0
*/
func (a *Client) PostLearnAPIPublicV1Announcements(params *PostLearnAPIPublicV1AnnouncementsParams, authInfo runtime.ClientAuthInfoWriter) (*PostLearnAPIPublicV1AnnouncementsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLearnAPIPublicV1AnnouncementsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLearnAPIPublicV1Announcements",
		Method:             "POST",
		PathPattern:        "/learn/api/public/v1/announcements",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostLearnAPIPublicV1AnnouncementsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLearnAPIPublicV1AnnouncementsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLearnAPIPublicV1Announcements: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
