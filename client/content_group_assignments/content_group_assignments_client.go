// Code generated by go-swagger; DO NOT EDIT.

package content_group_assignments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new content group assignments API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for content group assignments API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteLearnAPIPublicV1CoursesCourseIDContentsContentIDGroupsGroupID(params *DeleteLearnAPIPublicV1CoursesCourseIDContentsContentIDGroupsGroupIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLearnAPIPublicV1CoursesCourseIDContentsContentIDGroupsGroupIDNoContent, error)

	GetLearnAPIPublicV1CoursesCourseIDContentsContentIDGroups(params *GetLearnAPIPublicV1CoursesCourseIDContentsContentIDGroupsParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1CoursesCourseIDContentsContentIDGroupsOK, error)

	GetLearnAPIPublicV1CoursesCourseIDContentsContentIDGroupsGroupID(params *GetLearnAPIPublicV1CoursesCourseIDContentsContentIDGroupsGroupIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1CoursesCourseIDContentsContentIDGroupsGroupIDOK, error)

	PutLearnAPIPublicV1CoursesCourseIDContentsContentIDGroupsGroupID(params *PutLearnAPIPublicV1CoursesCourseIDContentsContentIDGroupsGroupIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutLearnAPIPublicV1CoursesCourseIDContentsContentIDGroupsGroupIDCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteLearnAPIPublicV1CoursesCourseIDContentsContentIDGroupsGroupID deletes content group

  Deletes a content group association.

Required entitlements:

- course.content.DELETE  If the content is going to be accessed in Ultra, and the group being removed is part of a group set, then the caller should ensure that all groups within that set are removed from the content.

**Since**: 3100.5.0
*/
func (a *Client) DeleteLearnAPIPublicV1CoursesCourseIDContentsContentIDGroupsGroupID(params *DeleteLearnAPIPublicV1CoursesCourseIDContentsContentIDGroupsGroupIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLearnAPIPublicV1CoursesCourseIDContentsContentIDGroupsGroupIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLearnAPIPublicV1CoursesCourseIDContentsContentIDGroupsGroupIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLearnAPIPublicV1CoursesCourseIDContentsContentIDGroupsGroupID",
		Method:             "DELETE",
		PathPattern:        "/learn/api/public/v1/courses/{courseId}/contents/{contentId}/groups/{groupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteLearnAPIPublicV1CoursesCourseIDContentsContentIDGroupsGroupIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLearnAPIPublicV1CoursesCourseIDContentsContentIDGroupsGroupIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLearnAPIPublicV1CoursesCourseIDContentsContentIDGroupsGroupID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnAPIPublicV1CoursesCourseIDContentsContentIDGroups gets content groups

  Returns a list of content group associations for the specified content.

Callers not enrolled in the course must have at least one of the following entitlements:

- course.content.designer.VIEW  Callers enrolled in the course will only be able to see Groups that are available to them.

**Since**: 3100.5.0
*/
func (a *Client) GetLearnAPIPublicV1CoursesCourseIDContentsContentIDGroups(params *GetLearnAPIPublicV1CoursesCourseIDContentsContentIDGroupsParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1CoursesCourseIDContentsContentIDGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV1CoursesCourseIDContentsContentIDGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV1CoursesCourseIDContentsContentIDGroups",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v1/courses/{courseId}/contents/{contentId}/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV1CoursesCourseIDContentsContentIDGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV1CoursesCourseIDContentsContentIDGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV1CoursesCourseIDContentsContentIDGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnAPIPublicV1CoursesCourseIDContentsContentIDGroupsGroupID gets content group

  Returns a content group association for the specified content and group.

Callers not enrolled in the course must have at least one of the following entitlements:

- course.content.designer.VIEW  Callers enrolled in the course will only be able to see Groups that are available to them.

**Since**: 3100.5.0
*/
func (a *Client) GetLearnAPIPublicV1CoursesCourseIDContentsContentIDGroupsGroupID(params *GetLearnAPIPublicV1CoursesCourseIDContentsContentIDGroupsGroupIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1CoursesCourseIDContentsContentIDGroupsGroupIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV1CoursesCourseIDContentsContentIDGroupsGroupIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV1CoursesCourseIDContentsContentIDGroupsGroupID",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v1/courses/{courseId}/contents/{contentId}/groups/{groupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV1CoursesCourseIDContentsContentIDGroupsGroupIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV1CoursesCourseIDContentsContentIDGroupsGroupIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV1CoursesCourseIDContentsContentIDGroupsGroupID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutLearnAPIPublicV1CoursesCourseIDContentsContentIDGroupsGroupID creates content group

  Creates a content group association.

Callers not enrolled in the course must have at least one of the following entitlements:

- course.content.MODIFY  If the content is going to be accessed in Ultra, the following rules should be followed by the caller:

- If the group is part of a set, all groups with the set should be associated with the content. - The content should be associated exclusively to individual groups or groups within a set, but not both.

**Since**: 3100.5.0
*/
func (a *Client) PutLearnAPIPublicV1CoursesCourseIDContentsContentIDGroupsGroupID(params *PutLearnAPIPublicV1CoursesCourseIDContentsContentIDGroupsGroupIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutLearnAPIPublicV1CoursesCourseIDContentsContentIDGroupsGroupIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLearnAPIPublicV1CoursesCourseIDContentsContentIDGroupsGroupIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLearnAPIPublicV1CoursesCourseIDContentsContentIDGroupsGroupID",
		Method:             "PUT",
		PathPattern:        "/learn/api/public/v1/courses/{courseId}/contents/{contentId}/groups/{groupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutLearnAPIPublicV1CoursesCourseIDContentsContentIDGroupsGroupIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLearnAPIPublicV1CoursesCourseIDContentsContentIDGroupsGroupIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLearnAPIPublicV1CoursesCourseIDContentsContentIDGroupsGroupID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
