// Code generated by go-swagger; DO NOT EDIT.

package institutional_hierarchy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new institutional hierarchy API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for institutional hierarchy API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteLearnAPIPublicV1InstitutionalHierarchyNodesNodeID(params *DeleteLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDNoContent, error)

	DeleteLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDCoursesCourseID(params *DeleteLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDCoursesCourseIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDCoursesCourseIDNoContent, error)

	GetLearnAPIPublicV1CoursesCourseIDNodes(params *GetLearnAPIPublicV1CoursesCourseIDNodesParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1CoursesCourseIDNodesOK, error)

	GetLearnAPIPublicV1InstitutionalHierarchyNodes(params *GetLearnAPIPublicV1InstitutionalHierarchyNodesParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1InstitutionalHierarchyNodesOK, error)

	GetLearnAPIPublicV1InstitutionalHierarchyNodesNodeID(params *GetLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDOK, error)

	GetLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDChildren(params *GetLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDChildrenParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDChildrenOK, error)

	GetLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDCourses(params *GetLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDCoursesParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDCoursesOK, error)

	PatchLearnAPIPublicV1InstitutionalHierarchyNodesNodeID(params *PatchLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDOK, error)

	PatchLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDCoursesCourseID(params *PatchLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDCoursesCourseIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDCoursesCourseIDOK, error)

	PostLearnAPIPublicV1InstitutionalHierarchyNodes(params *PostLearnAPIPublicV1InstitutionalHierarchyNodesParams, authInfo runtime.ClientAuthInfoWriter) (*PostLearnAPIPublicV1InstitutionalHierarchyNodesCreated, error)

	PostLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDChildren(params *PostLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDChildrenParams, authInfo runtime.ClientAuthInfoWriter) (*PostLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDChildrenCreated, error)

	PutLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDCoursesCourseID(params *PutLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDCoursesCourseIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDCoursesCourseIDCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteLearnAPIPublicV1InstitutionalHierarchyNodesNodeID deletes node

  Deletes an institutional hierarchy node. The root node cannot be deleted. This deletes orphan children in a cascading fashion.

The 'system.multiinst.hierarchy.manager.DELETE' entitlement is required.

**Since**: 3800.15.0
*/
func (a *Client) DeleteLearnAPIPublicV1InstitutionalHierarchyNodesNodeID(params *DeleteLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLearnAPIPublicV1InstitutionalHierarchyNodesNodeID",
		Method:             "DELETE",
		PathPattern:        "/learn/api/public/v1/institutionalHierarchy/nodes/{nodeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLearnAPIPublicV1InstitutionalHierarchyNodesNodeID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDCoursesCourseID deletes node course association

  Deletes the association between a given Node and a Course

Entitlement system.multiinst.node.course.association.DELETE required to delete Node-Course associations Entitlement system.multiinst.node.org.association.DELETE required to delete Node-Organization associations

**Since**: 3800.17.0
*/
func (a *Client) DeleteLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDCoursesCourseID(params *DeleteLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDCoursesCourseIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDCoursesCourseIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDCoursesCourseIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDCoursesCourseID",
		Method:             "DELETE",
		PathPattern:        "/learn/api/public/v1/institutionalHierarchy/nodes/{nodeId}/courses/{courseId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDCoursesCourseIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDCoursesCourseIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDCoursesCourseID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnAPIPublicV1CoursesCourseIDNodes gets associated nodes

  Obtains a list of nodes to which a given course is directly associated.

Users with the 'system.multiinst.node.course.association.VIEW' entitlement and the 'system.multiinst.node.org.association.VIEW' system entitlement can access all node association information.

**Since**: 3800.10.0
*/
func (a *Client) GetLearnAPIPublicV1CoursesCourseIDNodes(params *GetLearnAPIPublicV1CoursesCourseIDNodesParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1CoursesCourseIDNodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV1CoursesCourseIDNodesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV1CoursesCourseIDNodes",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v1/courses/{courseId}/nodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV1CoursesCourseIDNodesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV1CoursesCourseIDNodesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV1CoursesCourseIDNodes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnAPIPublicV1InstitutionalHierarchyNodes gets nodes

  Returns the Top-level institutional hierarhcy nodes

Entitlement system.multiinst.hierarchy.manager.VIEW required

Users with entitlement "system.multiinst.hierarchy.manager.VIEW" for Node management can view all fields.

**Since**: 3800.10.0
*/
func (a *Client) GetLearnAPIPublicV1InstitutionalHierarchyNodes(params *GetLearnAPIPublicV1InstitutionalHierarchyNodesParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1InstitutionalHierarchyNodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV1InstitutionalHierarchyNodesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV1InstitutionalHierarchyNodes",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v1/institutionalHierarchy/nodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV1InstitutionalHierarchyNodesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV1InstitutionalHierarchyNodesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV1InstitutionalHierarchyNodes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnAPIPublicV1InstitutionalHierarchyNodesNodeID gets node

  Returns the institutional hierarhcy node corresponding the provided ID

Entitlement system.multiinst.hierarchy.manager.VIEW required

Users with entitlement "system.multiinst.hierarchy.manager.VIEW" for Node management can view all fields.

**Since**: 3800.10.0
*/
func (a *Client) GetLearnAPIPublicV1InstitutionalHierarchyNodesNodeID(params *GetLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV1InstitutionalHierarchyNodesNodeID",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v1/institutionalHierarchy/nodes/{nodeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV1InstitutionalHierarchyNodesNodeID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDChildren gets node children

  Returns the children of the institutional hierarhcy node corresponding to the provided ID

Entitlement system.multiinst.hierarchy.manager.VIEW required

Users with entitlement "system.multiinst.hierarchy.manager.VIEW" for Node management can view all fields.

**Since**: 3800.10.0
*/
func (a *Client) GetLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDChildren(params *GetLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDChildrenParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDChildrenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDChildrenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDChildren",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v1/institutionalHierarchy/nodes/{nodeId}/children",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDChildrenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDChildrenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDChildren: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDCourses gets node course associations

  Returns a list of node-course relationships for the specified node.

Users with the 'system.multiinst.node.course.association.VIEW' entitlement and the 'system.multiinst.node.org.association.VIEW' system entitlement can access all node association information.

**Since**: 3800.10.0
*/
func (a *Client) GetLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDCourses(params *GetLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDCoursesParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDCoursesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDCoursesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDCourses",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v1/institutionalHierarchy/nodes/{nodeId}/courses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDCoursesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDCoursesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDCourses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchLearnAPIPublicV1InstitutionalHierarchyNodesNodeID updates node

  Updates Institutional Hierarchy Node information.

Entitlement system.multiinst.hierarchy.manager.MODIFY is required

**Since**: 3800.15.0
*/
func (a *Client) PatchLearnAPIPublicV1InstitutionalHierarchyNodesNodeID(params *PatchLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchLearnAPIPublicV1InstitutionalHierarchyNodesNodeID",
		Method:             "PATCH",
		PathPattern:        "/learn/api/public/v1/institutionalHierarchy/nodes/{nodeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchLearnAPIPublicV1InstitutionalHierarchyNodesNodeID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDCoursesCourseID updates node course association

  Update a specified node-course association.

Users with the 'system.multiinst.node.course.association.CREATE' entitlement can update Course - Hierarchy Node associations Users with the 'system.multiinst.node.org.association.CREATE' entitlement can update Organization - Hierarchy Node associations

**Since**: 3800.17.0
*/
func (a *Client) PatchLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDCoursesCourseID(params *PatchLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDCoursesCourseIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDCoursesCourseIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDCoursesCourseIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDCoursesCourseID",
		Method:             "PATCH",
		PathPattern:        "/learn/api/public/v1/institutionalHierarchy/nodes/{nodeId}/courses/{courseId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDCoursesCourseIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDCoursesCourseIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDCoursesCourseID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostLearnAPIPublicV1InstitutionalHierarchyNodes creates node

  Creates a new institutional hierarhcy node

Entitlement system.multiinst.hierarchy.manager.CREATE required

Users with entitlement "system.multiinst.hierarchy.manager.CREATE" for Node management can create a new Node.

**Since**: 3800.15.0
*/
func (a *Client) PostLearnAPIPublicV1InstitutionalHierarchyNodes(params *PostLearnAPIPublicV1InstitutionalHierarchyNodesParams, authInfo runtime.ClientAuthInfoWriter) (*PostLearnAPIPublicV1InstitutionalHierarchyNodesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLearnAPIPublicV1InstitutionalHierarchyNodesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLearnAPIPublicV1InstitutionalHierarchyNodes",
		Method:             "POST",
		PathPattern:        "/learn/api/public/v1/institutionalHierarchy/nodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostLearnAPIPublicV1InstitutionalHierarchyNodesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLearnAPIPublicV1InstitutionalHierarchyNodesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLearnAPIPublicV1InstitutionalHierarchyNodes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDChildren creates child node

  Create a new institutional hierarchy node whose parent corresponds to the supplied nodeId

Entitlement system.multiinst.hierarchy.manager.CREATE required

Users with entitlement "system.multiinst.hierarchy.manager.CREATE" for Node management can create a new Node.

**Since**: 3800.15.0
*/
func (a *Client) PostLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDChildren(params *PostLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDChildrenParams, authInfo runtime.ClientAuthInfoWriter) (*PostLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDChildrenCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDChildrenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDChildren",
		Method:             "POST",
		PathPattern:        "/learn/api/public/v1/institutionalHierarchy/nodes/{nodeId}/children",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDChildrenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDChildrenCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDChildren: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDCoursesCourseID creates node course association

  Creates a node-course relationship for the specified node and course.

Users with the 'system.multiinst.node.course.association.CREATE' entitlement can create Course - Hierarchy Node associations. Users with the 'system.multiinst.node.org.association.CREATE' entitlement can create Organization - Hierarchy Node associations

**Since**: 3800.17.0
*/
func (a *Client) PutLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDCoursesCourseID(params *PutLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDCoursesCourseIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDCoursesCourseIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDCoursesCourseIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDCoursesCourseID",
		Method:             "PUT",
		PathPattern:        "/learn/api/public/v1/institutionalHierarchy/nodes/{nodeId}/courses/{courseId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDCoursesCourseIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDCoursesCourseIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLearnAPIPublicV1InstitutionalHierarchyNodesNodeIDCoursesCourseID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
