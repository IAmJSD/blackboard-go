// Code generated by go-swagger; DO NOT EDIT.

package roles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new roles API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for roles API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetLearnAPIPublicV1CourseRoles(params *GetLearnAPIPublicV1CourseRolesParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1CourseRolesOK, error)

	GetLearnAPIPublicV1CourseRolesRoleID(params *GetLearnAPIPublicV1CourseRolesRoleIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1CourseRolesRoleIDOK, error)

	GetLearnAPIPublicV1InstitutionRoles(params *GetLearnAPIPublicV1InstitutionRolesParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1InstitutionRolesOK, error)

	GetLearnAPIPublicV1InstitutionRolesRoleID(params *GetLearnAPIPublicV1InstitutionRolesRoleIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1InstitutionRolesRoleIDOK, error)

	GetLearnAPIPublicV1SystemRoles(params *GetLearnAPIPublicV1SystemRolesParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1SystemRolesOK, error)

	GetLearnAPIPublicV1SystemRolesRoleID(params *GetLearnAPIPublicV1SystemRolesRoleIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1SystemRolesRoleIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetLearnAPIPublicV1CourseRoles gets course roles



Returns a list of course roles.  This list will contain all the course roles the context user has access to see. </p>

If the context user has any of these entitlements, then the user can see all course roles:

- system.courserole.CREATE
- system.enrollment.CREATE
- system.courserole.manager.VIEW
- system.courserole.DELETE
</p>

Otherwise, these course role entitlements are checked for any courses the context user is enrolled in:

- course.user-enroll.EXECUTE
- system.courserole.CREATE
- system.enrollment.CREATE
- system.courserole.manager.VIEW
- system.courserole.DELETE
- course.user-role.MODIFY
</p>

If the logged in user has any of those course role entitlements for a Course where Course.organization = false, then the user can see course roles where Availability.Available = Course or CourseAndOrganization </p>

If the logged in user has any of those course role entitlements for a Course where Course.organization = true, then the user can see course roles where Availability.Available = Organization or CourseAndOrganization </p>

**Since**: 3300.5.0
*/
func (a *Client) GetLearnAPIPublicV1CourseRoles(params *GetLearnAPIPublicV1CourseRolesParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1CourseRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV1CourseRolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV1CourseRoles",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v1/courseRoles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV1CourseRolesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV1CourseRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV1CourseRoles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnAPIPublicV1CourseRolesRoleID gets course role



Returns a single course role.  The path id can be either the CourseRole.id field like "/courseRoles/_5_1" or the CourseRole.roleId field like "/courseRoles/roleId:Student". </p>

A 403 (FORBIDDEN) status is returned if the context user does not have access to see the course role. </p>

If the context user has any of these entitlements, then the user can see all course roles:

- system.courserole.CREATE
- system.enrollment.CREATE
- system.courserole.manager.VIEW
- system.courserole.DELETE
</p>

Otherwise, these course role entitlements are checked for any courses the context user is enrolled in:

- course.user-enroll.EXECUTE
- system.courserole.CREATE
- system.enrollment.CREATE
- system.courserole.manager.VIEW
- system.courserole.DELETE
- course.user-role.MODIFY
</p>

If the logged in user has any of those course role entitlements for a Course where Course.organization = false, then the user can see course roles where Availability.Available = Course or CourseAndOrganization </p>

If the logged in user has any of those course role entitlements for a Course where Course.organization = true, then the user can see course roles where Availability.Available = Organization or CourseAndOrganization </p>

**Since**: 3300.5.0
*/
func (a *Client) GetLearnAPIPublicV1CourseRolesRoleID(params *GetLearnAPIPublicV1CourseRolesRoleIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1CourseRolesRoleIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV1CourseRolesRoleIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV1CourseRolesRoleID",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v1/courseRoles/{roleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV1CourseRolesRoleIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV1CourseRolesRoleIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV1CourseRolesRoleID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnAPIPublicV1InstitutionRoles gets institution roles

  Returns a list of institution roles.

Users must have the entitlement 'system.institutionrole.VIEW' to access this endpoint.

**Since**: 3300.4.0
*/
func (a *Client) GetLearnAPIPublicV1InstitutionRoles(params *GetLearnAPIPublicV1InstitutionRolesParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1InstitutionRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV1InstitutionRolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV1InstitutionRoles",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v1/institutionRoles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV1InstitutionRolesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV1InstitutionRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV1InstitutionRoles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnAPIPublicV1InstitutionRolesRoleID gets institution role

  Loads a specific institution role.

Users must have the entitlement 'system.institutionrole.VIEW' to access this endpoint.

**Since**: 3300.4.0
*/
func (a *Client) GetLearnAPIPublicV1InstitutionRolesRoleID(params *GetLearnAPIPublicV1InstitutionRolesRoleIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1InstitutionRolesRoleIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV1InstitutionRolesRoleIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV1InstitutionRolesRoleID",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v1/institutionRoles/{roleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV1InstitutionRolesRoleIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV1InstitutionRolesRoleIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV1InstitutionRolesRoleID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnAPIPublicV1SystemRoles gets system roles

  Returns a list of system roles.

Users must have the 'system.systemrole.manager.VIEW' entitlement to access this endpoint.

**Since**: 3300.5.0
*/
func (a *Client) GetLearnAPIPublicV1SystemRoles(params *GetLearnAPIPublicV1SystemRolesParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1SystemRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV1SystemRolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV1SystemRoles",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v1/systemRoles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV1SystemRolesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV1SystemRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV1SystemRoles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnAPIPublicV1SystemRolesRoleID gets system role

  Get a specific system role by roleId. See the roleId parameter for valid roleId formats.

Users must have the 'system.systemrole.manager.VIEW' entitlement to access this endpoint.

**Since**: 3300.5.0
*/
func (a *Client) GetLearnAPIPublicV1SystemRolesRoleID(params *GetLearnAPIPublicV1SystemRolesRoleIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1SystemRolesRoleIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV1SystemRolesRoleIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV1SystemRolesRoleID",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v1/systemRoles/{roleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV1SystemRolesRoleIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV1SystemRolesRoleIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV1SystemRolesRoleID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
