// Code generated by go-swagger; DO NOT EDIT.

package system

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/jakemakesstuff/blackboard-go/models"
)

// GetLearnAPIPublicV1SystemTasksTaskIDReader is a Reader for the GetLearnAPIPublicV1SystemTasksTaskID structure.
type GetLearnAPIPublicV1SystemTasksTaskIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLearnAPIPublicV1SystemTasksTaskIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetLearnAPIPublicV1SystemTasksTaskIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetLearnAPIPublicV1SystemTasksTaskIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetLearnAPIPublicV1SystemTasksTaskIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetLearnAPIPublicV1SystemTasksTaskIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetLearnAPIPublicV1SystemTasksTaskIDOK creates a GetLearnAPIPublicV1SystemTasksTaskIDOK with default headers values
func NewGetLearnAPIPublicV1SystemTasksTaskIDOK() *GetLearnAPIPublicV1SystemTasksTaskIDOK {
	return &GetLearnAPIPublicV1SystemTasksTaskIDOK{}
}

/*GetLearnAPIPublicV1SystemTasksTaskIDOK handles this case with default header values.

OK
*/
type GetLearnAPIPublicV1SystemTasksTaskIDOK struct {
	Payload *models.SystemTask
}

func (o *GetLearnAPIPublicV1SystemTasksTaskIDOK) Error() string {
	return fmt.Sprintf("[GET /learn/api/public/v1/system/tasks/{taskId}][%d] getLearnApiPublicV1SystemTasksTaskIdOK  %+v", 200, o.Payload)
}

func (o *GetLearnAPIPublicV1SystemTasksTaskIDOK) GetPayload() *models.SystemTask {
	return o.Payload
}

func (o *GetLearnAPIPublicV1SystemTasksTaskIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SystemTask)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLearnAPIPublicV1SystemTasksTaskIDBadRequest creates a GetLearnAPIPublicV1SystemTasksTaskIDBadRequest with default headers values
func NewGetLearnAPIPublicV1SystemTasksTaskIDBadRequest() *GetLearnAPIPublicV1SystemTasksTaskIDBadRequest {
	return &GetLearnAPIPublicV1SystemTasksTaskIDBadRequest{}
}

/*GetLearnAPIPublicV1SystemTasksTaskIDBadRequest handles this case with default header values.

The task id is invalid or not properly formatted
*/
type GetLearnAPIPublicV1SystemTasksTaskIDBadRequest struct {
	Payload *models.RestException
}

func (o *GetLearnAPIPublicV1SystemTasksTaskIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /learn/api/public/v1/system/tasks/{taskId}][%d] getLearnApiPublicV1SystemTasksTaskIdBadRequest  %+v", 400, o.Payload)
}

func (o *GetLearnAPIPublicV1SystemTasksTaskIDBadRequest) GetPayload() *models.RestException {
	return o.Payload
}

func (o *GetLearnAPIPublicV1SystemTasksTaskIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLearnAPIPublicV1SystemTasksTaskIDForbidden creates a GetLearnAPIPublicV1SystemTasksTaskIDForbidden with default headers values
func NewGetLearnAPIPublicV1SystemTasksTaskIDForbidden() *GetLearnAPIPublicV1SystemTasksTaskIDForbidden {
	return &GetLearnAPIPublicV1SystemTasksTaskIDForbidden{}
}

/*GetLearnAPIPublicV1SystemTasksTaskIDForbidden handles this case with default header values.

The user is not authorized to view the specified Task object
*/
type GetLearnAPIPublicV1SystemTasksTaskIDForbidden struct {
	Payload *models.RestException
}

func (o *GetLearnAPIPublicV1SystemTasksTaskIDForbidden) Error() string {
	return fmt.Sprintf("[GET /learn/api/public/v1/system/tasks/{taskId}][%d] getLearnApiPublicV1SystemTasksTaskIdForbidden  %+v", 403, o.Payload)
}

func (o *GetLearnAPIPublicV1SystemTasksTaskIDForbidden) GetPayload() *models.RestException {
	return o.Payload
}

func (o *GetLearnAPIPublicV1SystemTasksTaskIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLearnAPIPublicV1SystemTasksTaskIDNotFound creates a GetLearnAPIPublicV1SystemTasksTaskIDNotFound with default headers values
func NewGetLearnAPIPublicV1SystemTasksTaskIDNotFound() *GetLearnAPIPublicV1SystemTasksTaskIDNotFound {
	return &GetLearnAPIPublicV1SystemTasksTaskIDNotFound{}
}

/*GetLearnAPIPublicV1SystemTasksTaskIDNotFound handles this case with default header values.

The task id is not found
*/
type GetLearnAPIPublicV1SystemTasksTaskIDNotFound struct {
	Payload *models.RestException
}

func (o *GetLearnAPIPublicV1SystemTasksTaskIDNotFound) Error() string {
	return fmt.Sprintf("[GET /learn/api/public/v1/system/tasks/{taskId}][%d] getLearnApiPublicV1SystemTasksTaskIdNotFound  %+v", 404, o.Payload)
}

func (o *GetLearnAPIPublicV1SystemTasksTaskIDNotFound) GetPayload() *models.RestException {
	return o.Payload
}

func (o *GetLearnAPIPublicV1SystemTasksTaskIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
