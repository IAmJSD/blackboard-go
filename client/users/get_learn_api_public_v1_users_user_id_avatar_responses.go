// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/jakemakesstuff/blackboard-go/models"
)

// GetLearnAPIPublicV1UsersUserIDAvatarReader is a Reader for the GetLearnAPIPublicV1UsersUserIDAvatar structure.
type GetLearnAPIPublicV1UsersUserIDAvatarReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLearnAPIPublicV1UsersUserIDAvatarReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 302:
		result := NewGetLearnAPIPublicV1UsersUserIDAvatarFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 400:
		result := NewGetLearnAPIPublicV1UsersUserIDAvatarBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetLearnAPIPublicV1UsersUserIDAvatarForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetLearnAPIPublicV1UsersUserIDAvatarNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetLearnAPIPublicV1UsersUserIDAvatarFound creates a GetLearnAPIPublicV1UsersUserIDAvatarFound with default headers values
func NewGetLearnAPIPublicV1UsersUserIDAvatarFound() *GetLearnAPIPublicV1UsersUserIDAvatarFound {
	return &GetLearnAPIPublicV1UsersUserIDAvatarFound{}
}

/*GetLearnAPIPublicV1UsersUserIDAvatarFound handles this case with default header values.

Found
*/
type GetLearnAPIPublicV1UsersUserIDAvatarFound struct {
	/*A URL from which the corresponding file can be downloaded
	 */
	Location string
}

func (o *GetLearnAPIPublicV1UsersUserIDAvatarFound) Error() string {
	return fmt.Sprintf("[GET /learn/api/public/v1/users/{userId}/avatar][%d] getLearnApiPublicV1UsersUserIdAvatarFound ", 302)
}

func (o *GetLearnAPIPublicV1UsersUserIDAvatarFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Location
	o.Location = response.GetHeader("Location")

	return nil
}

// NewGetLearnAPIPublicV1UsersUserIDAvatarBadRequest creates a GetLearnAPIPublicV1UsersUserIDAvatarBadRequest with default headers values
func NewGetLearnAPIPublicV1UsersUserIDAvatarBadRequest() *GetLearnAPIPublicV1UsersUserIDAvatarBadRequest {
	return &GetLearnAPIPublicV1UsersUserIDAvatarBadRequest{}
}

/*GetLearnAPIPublicV1UsersUserIDAvatarBadRequest handles this case with default header values.

The id is invalid or not properly formatted
*/
type GetLearnAPIPublicV1UsersUserIDAvatarBadRequest struct {
	Payload *models.RestException
}

func (o *GetLearnAPIPublicV1UsersUserIDAvatarBadRequest) Error() string {
	return fmt.Sprintf("[GET /learn/api/public/v1/users/{userId}/avatar][%d] getLearnApiPublicV1UsersUserIdAvatarBadRequest  %+v", 400, o.Payload)
}

func (o *GetLearnAPIPublicV1UsersUserIDAvatarBadRequest) GetPayload() *models.RestException {
	return o.Payload
}

func (o *GetLearnAPIPublicV1UsersUserIDAvatarBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLearnAPIPublicV1UsersUserIDAvatarForbidden creates a GetLearnAPIPublicV1UsersUserIDAvatarForbidden with default headers values
func NewGetLearnAPIPublicV1UsersUserIDAvatarForbidden() *GetLearnAPIPublicV1UsersUserIDAvatarForbidden {
	return &GetLearnAPIPublicV1UsersUserIDAvatarForbidden{}
}

/*GetLearnAPIPublicV1UsersUserIDAvatarForbidden handles this case with default header values.

The user is not authorized to view the specified User object
*/
type GetLearnAPIPublicV1UsersUserIDAvatarForbidden struct {
	Payload *models.RestException
}

func (o *GetLearnAPIPublicV1UsersUserIDAvatarForbidden) Error() string {
	return fmt.Sprintf("[GET /learn/api/public/v1/users/{userId}/avatar][%d] getLearnApiPublicV1UsersUserIdAvatarForbidden  %+v", 403, o.Payload)
}

func (o *GetLearnAPIPublicV1UsersUserIDAvatarForbidden) GetPayload() *models.RestException {
	return o.Payload
}

func (o *GetLearnAPIPublicV1UsersUserIDAvatarForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLearnAPIPublicV1UsersUserIDAvatarNotFound creates a GetLearnAPIPublicV1UsersUserIDAvatarNotFound with default headers values
func NewGetLearnAPIPublicV1UsersUserIDAvatarNotFound() *GetLearnAPIPublicV1UsersUserIDAvatarNotFound {
	return &GetLearnAPIPublicV1UsersUserIDAvatarNotFound{}
}

/*GetLearnAPIPublicV1UsersUserIDAvatarNotFound handles this case with default header values.

The user is not found; or The user's avatar is not found
*/
type GetLearnAPIPublicV1UsersUserIDAvatarNotFound struct {
	Payload *models.RestException
}

func (o *GetLearnAPIPublicV1UsersUserIDAvatarNotFound) Error() string {
	return fmt.Sprintf("[GET /learn/api/public/v1/users/{userId}/avatar][%d] getLearnApiPublicV1UsersUserIdAvatarNotFound  %+v", 404, o.Payload)
}

func (o *GetLearnAPIPublicV1UsersUserIDAvatarNotFound) GetPayload() *models.RestException {
	return o.Payload
}

func (o *GetLearnAPIPublicV1UsersUserIDAvatarNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
