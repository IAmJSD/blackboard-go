// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new users API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for users API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteLearnAPIPublicV1UsersUserID(params *DeleteLearnAPIPublicV1UsersUserIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLearnAPIPublicV1UsersUserIDNoContent, error)

	DeleteLearnAPIPublicV1UsersUserIDObserversObserverID(params *DeleteLearnAPIPublicV1UsersUserIDObserversObserverIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLearnAPIPublicV1UsersUserIDObserversObserverIDNoContent, error)

	GetLearnAPIPublicV1Users(params *GetLearnAPIPublicV1UsersParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1UsersOK, error)

	GetLearnAPIPublicV1UsersUserID(params *GetLearnAPIPublicV1UsersUserIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1UsersUserIDOK, error)

	GetLearnAPIPublicV1UsersUserIDAvatar(params *GetLearnAPIPublicV1UsersUserIDAvatarParams, authInfo runtime.ClientAuthInfoWriter) error

	GetLearnAPIPublicV1UsersUserIDObservees(params *GetLearnAPIPublicV1UsersUserIDObserveesParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1UsersUserIDObserveesOK, error)

	GetLearnAPIPublicV1UsersUserIDObservers(params *GetLearnAPIPublicV1UsersUserIDObserversParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1UsersUserIDObserversOK, error)

	GetLearnAPIPublicV1UsersUserIDSessions(params *GetLearnAPIPublicV1UsersUserIDSessionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1UsersUserIDSessionsOK, error)

	PatchLearnAPIPublicV1UsersUserID(params *PatchLearnAPIPublicV1UsersUserIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchLearnAPIPublicV1UsersUserIDOK, error)

	PostLearnAPIPublicV1Users(params *PostLearnAPIPublicV1UsersParams, authInfo runtime.ClientAuthInfoWriter) (*PostLearnAPIPublicV1UsersCreated, error)

	PutLearnAPIPublicV1UsersUserIDObserversObserverID(params *PutLearnAPIPublicV1UsersUserIDObserversObserverIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutLearnAPIPublicV1UsersUserIDObserversObserverIDCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteLearnAPIPublicV1UsersUserID deletes user

  Deletes a user.

The 'system.user.DELETE' entitlement is needed.

**Since**: 2015.11.0
*/
func (a *Client) DeleteLearnAPIPublicV1UsersUserID(params *DeleteLearnAPIPublicV1UsersUserIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLearnAPIPublicV1UsersUserIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLearnAPIPublicV1UsersUserIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLearnAPIPublicV1UsersUserID",
		Method:             "DELETE",
		PathPattern:        "/learn/api/public/v1/users/{userId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteLearnAPIPublicV1UsersUserIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLearnAPIPublicV1UsersUserIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLearnAPIPublicV1UsersUserID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteLearnAPIPublicV1UsersUserIDObserversObserverID deletes observer

  Removes an observer/observee association.

The 'system.observer_user.DELETE' entitlement is needed as well as being able to view the provided users.

**Since**: 3500.5.0
*/
func (a *Client) DeleteLearnAPIPublicV1UsersUserIDObserversObserverID(params *DeleteLearnAPIPublicV1UsersUserIDObserversObserverIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLearnAPIPublicV1UsersUserIDObserversObserverIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLearnAPIPublicV1UsersUserIDObserversObserverIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLearnAPIPublicV1UsersUserIDObserversObserverID",
		Method:             "DELETE",
		PathPattern:        "/learn/api/public/v1/users/{userId}/observers/{observerId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteLearnAPIPublicV1UsersUserIDObserversObserverIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLearnAPIPublicV1UsersUserIDObserversObserverIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLearnAPIPublicV1UsersUserIDObserversObserverID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnAPIPublicV1Users gets users

  Returns a list of users.

At least one of the entitlements 'system.user.VIEW' or 'user.VIEW' are needed.

Note: Users with the 'SystemAdmin' role are only included in the results if the logged on user also has this role.

**Since**: 3000.1.0
*/
func (a *Client) GetLearnAPIPublicV1Users(params *GetLearnAPIPublicV1UsersParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1UsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV1UsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV1Users",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v1/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV1UsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV1UsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV1Users: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnAPIPublicV1UsersUserID gets user

  Loads a user.

Properties returned will depend on the caller's entitlements.

Callers with the entitlement 'user.VIEW' will always get a minimal set of core properties:

- id
- name.given
- name.family
- name.middle
- systemRoleIds

Depending on the Learn administrator customizable user field display settings, as well as the target user's personal visibility settings, the following fields might also be included:

- userName
- educationLevel
- gender
- birthDate
- name.other
- name.suffix
- name.title
- job.*
- contact.*
- address.*

Callers asking for their own user record get all fields listed above, plus:

- locale.*

All user properties are provided to callers with one of the entitlements 'system.user.properties.MODIFY', 'system.useradmin.generic.VIEW', or 'system.user.VIEW'.

**Since**: 2015.11.0
*/
func (a *Client) GetLearnAPIPublicV1UsersUserID(params *GetLearnAPIPublicV1UsersUserIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1UsersUserIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV1UsersUserIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV1UsersUserID",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v1/users/{userId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV1UsersUserIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV1UsersUserIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV1UsersUserID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnAPIPublicV1UsersUserIDAvatar gets user avatar

  Gets a user's avatar image.

The response is a http redirect rather then image raw data. It is up to the caller of the api to follow the redirect and download the image.

The redirect link returned is signed on behalf of the user of the API. It is expiring, so it is not recommended for bookmarking. The caller of this API is checked for permissions to see the requested user's resource.

**Since**: 3800.10.0
*/
func (a *Client) GetLearnAPIPublicV1UsersUserIDAvatar(params *GetLearnAPIPublicV1UsersUserIDAvatarParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV1UsersUserIDAvatarParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV1UsersUserIDAvatar",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v1/users/{userId}/avatar",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV1UsersUserIDAvatarReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  GetLearnAPIPublicV1UsersUserIDObservees gets observees

  Returns a list of users being observed by a given user.

The 'observer.associations.VIEW' entitlement is needed as well as being able to view the provided user.

**Since**: 3500.5.0
*/
func (a *Client) GetLearnAPIPublicV1UsersUserIDObservees(params *GetLearnAPIPublicV1UsersUserIDObserveesParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1UsersUserIDObserveesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV1UsersUserIDObserveesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV1UsersUserIDObservees",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v1/users/{userId}/observees",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV1UsersUserIDObserveesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV1UsersUserIDObserveesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV1UsersUserIDObservees: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnAPIPublicV1UsersUserIDObservers gets observers

  Returns a list of users observing a given user.

The 'observer.associations.VIEW' entitlement is needed as well as being able to view the provided user.

**Since**: 3500.5.0
*/
func (a *Client) GetLearnAPIPublicV1UsersUserIDObservers(params *GetLearnAPIPublicV1UsersUserIDObserversParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1UsersUserIDObserversOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV1UsersUserIDObserversParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV1UsersUserIDObservers",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v1/users/{userId}/observers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV1UsersUserIDObserversReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV1UsersUserIDObserversOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV1UsersUserIDObservers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnAPIPublicV1UsersUserIDSessions gets current active user by Id

  Displays active session information for a specific user.

The entitlement system.user.sessions.VIEW is needed to request a user's active sessions.

**Since**: 3800.4.0
*/
func (a *Client) GetLearnAPIPublicV1UsersUserIDSessions(params *GetLearnAPIPublicV1UsersUserIDSessionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1UsersUserIDSessionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV1UsersUserIDSessionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV1UsersUserIDSessions",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v1/users/{userId}/sessions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV1UsersUserIDSessionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV1UsersUserIDSessionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV1UsersUserIDSessions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchLearnAPIPublicV1UsersUserID updates user

  Updates a user.

Callers may update their own user record if they have the 'self.user.MODIFY' entitlement.  Updating other users requires the 'system.user.properties.MODIFY' entitlement.

Certain properties may be edited by callers with more finely grained entitlements:

 | Field                  | Entitlements Required                               |
 |------------------------|-----------------------------------------------------|
 | systemRoleIds          | system.user.MODIFY, system.user-system-role.MODIFY  |
 | availability.available | system.user.MODIFY, system.user.availability.MODIFY |
 | password               | system.user.MODIFY, system.user-password.MODIFY     |


**Since**: 2015.11.0
*/
func (a *Client) PatchLearnAPIPublicV1UsersUserID(params *PatchLearnAPIPublicV1UsersUserIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchLearnAPIPublicV1UsersUserIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchLearnAPIPublicV1UsersUserIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchLearnAPIPublicV1UsersUserID",
		Method:             "PATCH",
		PathPattern:        "/learn/api/public/v1/users/{userId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchLearnAPIPublicV1UsersUserIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchLearnAPIPublicV1UsersUserIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchLearnAPIPublicV1UsersUserID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostLearnAPIPublicV1Users creates user

  Creates a user.

The 'system.user.CREATE' entitlement is needed.

**Since**: 2015.11.0
*/
func (a *Client) PostLearnAPIPublicV1Users(params *PostLearnAPIPublicV1UsersParams, authInfo runtime.ClientAuthInfoWriter) (*PostLearnAPIPublicV1UsersCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLearnAPIPublicV1UsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLearnAPIPublicV1Users",
		Method:             "POST",
		PathPattern:        "/learn/api/public/v1/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostLearnAPIPublicV1UsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLearnAPIPublicV1UsersCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLearnAPIPublicV1Users: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutLearnAPIPublicV1UsersUserIDObserversObserverID creates observer

  Creates an observer/observee association. The user identified by userId must not have the OBSERVER system role. Similarly, the user identified by observerId must have the OBSERVER system role.

The 'system.observer_user.CREATE' entitlement is needed as well as being able to view the provided users.

**Since**: 3500.5.0
*/
func (a *Client) PutLearnAPIPublicV1UsersUserIDObserversObserverID(params *PutLearnAPIPublicV1UsersUserIDObserversObserverIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutLearnAPIPublicV1UsersUserIDObserversObserverIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLearnAPIPublicV1UsersUserIDObserversObserverIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLearnAPIPublicV1UsersUserIDObserversObserverID",
		Method:             "PUT",
		PathPattern:        "/learn/api/public/v1/users/{userId}/observers/{observerId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutLearnAPIPublicV1UsersUserIDObserversObserverIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLearnAPIPublicV1UsersUserIDObserversObserverIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLearnAPIPublicV1UsersUserIDObserversObserverID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
