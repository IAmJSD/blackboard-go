// Code generated by go-swagger; DO NOT EDIT.

package lti

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/jakemakesstuff/blackboard-go/models"
)

// PatchLearnApipublicV1LtiDomainsDomainIDReader is a Reader for the PatchLearnApipublicV1LtiDomainsDomainID structure.
type PatchLearnApipublicV1LtiDomainsDomainIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchLearnApipublicV1LtiDomainsDomainIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchLearnApipublicV1LtiDomainsDomainIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchLearnApipublicV1LtiDomainsDomainIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchLearnApipublicV1LtiDomainsDomainIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchLearnApipublicV1LtiDomainsDomainIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPatchLearnApipublicV1LtiDomainsDomainIDConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchLearnApipublicV1LtiDomainsDomainIDOK creates a PatchLearnApipublicV1LtiDomainsDomainIDOK with default headers values
func NewPatchLearnApipublicV1LtiDomainsDomainIDOK() *PatchLearnApipublicV1LtiDomainsDomainIDOK {
	return &PatchLearnApipublicV1LtiDomainsDomainIDOK{}
}

/*PatchLearnApipublicV1LtiDomainsDomainIDOK handles this case with default header values.

OK
*/
type PatchLearnApipublicV1LtiDomainsDomainIDOK struct {
	Payload *models.LTIDomainConfig
}

func (o *PatchLearnApipublicV1LtiDomainsDomainIDOK) Error() string {
	return fmt.Sprintf("[PATCH /learn/apipublic/v1/lti/domains/{domainId}][%d] patchLearnApipublicV1LtiDomainsDomainIdOK  %+v", 200, o.Payload)
}

func (o *PatchLearnApipublicV1LtiDomainsDomainIDOK) GetPayload() *models.LTIDomainConfig {
	return o.Payload
}

func (o *PatchLearnApipublicV1LtiDomainsDomainIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LTIDomainConfig)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearnApipublicV1LtiDomainsDomainIDBadRequest creates a PatchLearnApipublicV1LtiDomainsDomainIDBadRequest with default headers values
func NewPatchLearnApipublicV1LtiDomainsDomainIDBadRequest() *PatchLearnApipublicV1LtiDomainsDomainIDBadRequest {
	return &PatchLearnApipublicV1LtiDomainsDomainIDBadRequest{}
}

/*PatchLearnApipublicV1LtiDomainsDomainIDBadRequest handles this case with default header values.

Bad Request
*/
type PatchLearnApipublicV1LtiDomainsDomainIDBadRequest struct {
	Payload *models.RestException
}

func (o *PatchLearnApipublicV1LtiDomainsDomainIDBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /learn/apipublic/v1/lti/domains/{domainId}][%d] patchLearnApipublicV1LtiDomainsDomainIdBadRequest  %+v", 400, o.Payload)
}

func (o *PatchLearnApipublicV1LtiDomainsDomainIDBadRequest) GetPayload() *models.RestException {
	return o.Payload
}

func (o *PatchLearnApipublicV1LtiDomainsDomainIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearnApipublicV1LtiDomainsDomainIDForbidden creates a PatchLearnApipublicV1LtiDomainsDomainIDForbidden with default headers values
func NewPatchLearnApipublicV1LtiDomainsDomainIDForbidden() *PatchLearnApipublicV1LtiDomainsDomainIDForbidden {
	return &PatchLearnApipublicV1LtiDomainsDomainIDForbidden{}
}

/*PatchLearnApipublicV1LtiDomainsDomainIDForbidden handles this case with default header values.

Forbidden
*/
type PatchLearnApipublicV1LtiDomainsDomainIDForbidden struct {
	Payload *models.RestException
}

func (o *PatchLearnApipublicV1LtiDomainsDomainIDForbidden) Error() string {
	return fmt.Sprintf("[PATCH /learn/apipublic/v1/lti/domains/{domainId}][%d] patchLearnApipublicV1LtiDomainsDomainIdForbidden  %+v", 403, o.Payload)
}

func (o *PatchLearnApipublicV1LtiDomainsDomainIDForbidden) GetPayload() *models.RestException {
	return o.Payload
}

func (o *PatchLearnApipublicV1LtiDomainsDomainIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearnApipublicV1LtiDomainsDomainIDNotFound creates a PatchLearnApipublicV1LtiDomainsDomainIDNotFound with default headers values
func NewPatchLearnApipublicV1LtiDomainsDomainIDNotFound() *PatchLearnApipublicV1LtiDomainsDomainIDNotFound {
	return &PatchLearnApipublicV1LtiDomainsDomainIDNotFound{}
}

/*PatchLearnApipublicV1LtiDomainsDomainIDNotFound handles this case with default header values.

Not Found
*/
type PatchLearnApipublicV1LtiDomainsDomainIDNotFound struct {
	Payload *models.RestException
}

func (o *PatchLearnApipublicV1LtiDomainsDomainIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /learn/apipublic/v1/lti/domains/{domainId}][%d] patchLearnApipublicV1LtiDomainsDomainIdNotFound  %+v", 404, o.Payload)
}

func (o *PatchLearnApipublicV1LtiDomainsDomainIDNotFound) GetPayload() *models.RestException {
	return o.Payload
}

func (o *PatchLearnApipublicV1LtiDomainsDomainIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearnApipublicV1LtiDomainsDomainIDConflict creates a PatchLearnApipublicV1LtiDomainsDomainIDConflict with default headers values
func NewPatchLearnApipublicV1LtiDomainsDomainIDConflict() *PatchLearnApipublicV1LtiDomainsDomainIDConflict {
	return &PatchLearnApipublicV1LtiDomainsDomainIDConflict{}
}

/*PatchLearnApipublicV1LtiDomainsDomainIDConflict handles this case with default header values.

Conflict
*/
type PatchLearnApipublicV1LtiDomainsDomainIDConflict struct {
	Payload *models.RestException
}

func (o *PatchLearnApipublicV1LtiDomainsDomainIDConflict) Error() string {
	return fmt.Sprintf("[PATCH /learn/apipublic/v1/lti/domains/{domainId}][%d] patchLearnApipublicV1LtiDomainsDomainIdConflict  %+v", 409, o.Payload)
}

func (o *PatchLearnApipublicV1LtiDomainsDomainIDConflict) GetPayload() *models.RestException {
	return o.Payload
}

func (o *PatchLearnApipublicV1LtiDomainsDomainIDConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PatchLearnApipublicV1LtiDomainsDomainIDBody patch learn apipublic v1 lti domains domain ID body
swagger:model PatchLearnApipublicV1LtiDomainsDomainIDBody
*/
type PatchLearnApipublicV1LtiDomainsDomainIDBody struct {

	// Whether the Tool is allowed to call the LTI Assignment and Grades service and manage line items and grades.
	//
	// **Since**: 3600.0.0
	AllowGradesService bool `json:"allowGradesService,omitempty"`

	// Whether the Tool is allowed to call the LTI Names and Roles service and get the course memberships.
	AllowMembershipService bool `json:"allowMembershipService,omitempty"`

	// The client id associated with this configuration. Only applicable for LTI versions 1.3+, excluding 2.0
	//
	// **Since**: 3600.0.0
	ClientID string `json:"clientId,omitempty"`

	// The custom parameters for the given domain.
	CustomParameters map[string]string `json:"customParameters,omitempty"`

	// The JWKS URL of the tool, if specified. It is optional and can be null
	//
	// **Since**: 3800.17.0
	JwksURL string `json:"jwksUrl,omitempty"`

	// key
	Key string `json:"key,omitempty"`

	// The primary domain name associated with this configuration.
	PrimaryDomain string `json:"primaryDomain,omitempty"`

	// The public key of the tool, if specified. It is optional and can be null
	//
	// **Since**: 3800.17.0
	PublicKey string `json:"publicKey,omitempty"`

	// secret
	Secret string `json:"secret,omitempty"`

	// Whether the user's email address can be sent to the LTI tool provider.
	SendEmail bool `json:"sendEmail,omitempty"`

	// Whether the user's name can be sent to the LTI tool provider.
	SendName bool `json:"sendName,omitempty"`

	// Whether the user's role can be sent to the LTI tool provider.
	SendRole bool `json:"sendRole,omitempty"`

	// Enum indicating when user data can be sent to the LTI tool provider.
	//
	//
	// | Type      | Description
	//  | --------- | --------- |
	// | Never |  |
	// | Sslonly |  |
	// | Always |   **Since**: 3300.9.0 |
	//
	// Enum: [Never Sslonly Always]
	SendUserDataType string `json:"sendUserDataType,omitempty"`

	// Enum that indicates if the set of domains associated with this config can or cannot be linked to.
	//
	//
	// | Type      | Description
	//  | --------- | --------- |
	// | Approved |  |
	// | Excluded |  |
	// | NeedsApproval |   **Since**: 3300.9.0 |
	//
	// Enum: [Approved Excluded NeedsApproval]
	Status string `json:"status,omitempty"`

	// Whether a splash screen is shown before launching the LTI link.
	//
	// Cannot be set to true if allowMembershipService is true.
	UseSplashScreen bool `json:"useSplashScreen,omitempty"`
}

// Validate validates this patch learn apipublic v1 lti domains domain ID body
func (o *PatchLearnApipublicV1LtiDomainsDomainIDBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSendUserDataType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var patchLearnApipublicV1LtiDomainsDomainIdBodyTypeSendUserDataTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Never","Sslonly","Always"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		patchLearnApipublicV1LtiDomainsDomainIdBodyTypeSendUserDataTypePropEnum = append(patchLearnApipublicV1LtiDomainsDomainIdBodyTypeSendUserDataTypePropEnum, v)
	}
}

const (

	// PatchLearnApipublicV1LtiDomainsDomainIDBodySendUserDataTypeNever captures enum value "Never"
	PatchLearnApipublicV1LtiDomainsDomainIDBodySendUserDataTypeNever string = "Never"

	// PatchLearnApipublicV1LtiDomainsDomainIDBodySendUserDataTypeSslonly captures enum value "Sslonly"
	PatchLearnApipublicV1LtiDomainsDomainIDBodySendUserDataTypeSslonly string = "Sslonly"

	// PatchLearnApipublicV1LtiDomainsDomainIDBodySendUserDataTypeAlways captures enum value "Always"
	PatchLearnApipublicV1LtiDomainsDomainIDBodySendUserDataTypeAlways string = "Always"
)

// prop value enum
func (o *PatchLearnApipublicV1LtiDomainsDomainIDBody) validateSendUserDataTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, patchLearnApipublicV1LtiDomainsDomainIdBodyTypeSendUserDataTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *PatchLearnApipublicV1LtiDomainsDomainIDBody) validateSendUserDataType(formats strfmt.Registry) error {

	if swag.IsZero(o.SendUserDataType) { // not required
		return nil
	}

	// value enum
	if err := o.validateSendUserDataTypeEnum("input"+"."+"sendUserDataType", "body", o.SendUserDataType); err != nil {
		return err
	}

	return nil
}

var patchLearnApipublicV1LtiDomainsDomainIdBodyTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Approved","Excluded","NeedsApproval"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		patchLearnApipublicV1LtiDomainsDomainIdBodyTypeStatusPropEnum = append(patchLearnApipublicV1LtiDomainsDomainIdBodyTypeStatusPropEnum, v)
	}
}

const (

	// PatchLearnApipublicV1LtiDomainsDomainIDBodyStatusApproved captures enum value "Approved"
	PatchLearnApipublicV1LtiDomainsDomainIDBodyStatusApproved string = "Approved"

	// PatchLearnApipublicV1LtiDomainsDomainIDBodyStatusExcluded captures enum value "Excluded"
	PatchLearnApipublicV1LtiDomainsDomainIDBodyStatusExcluded string = "Excluded"

	// PatchLearnApipublicV1LtiDomainsDomainIDBodyStatusNeedsApproval captures enum value "NeedsApproval"
	PatchLearnApipublicV1LtiDomainsDomainIDBodyStatusNeedsApproval string = "NeedsApproval"
)

// prop value enum
func (o *PatchLearnApipublicV1LtiDomainsDomainIDBody) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, patchLearnApipublicV1LtiDomainsDomainIdBodyTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *PatchLearnApipublicV1LtiDomainsDomainIDBody) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("input"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchLearnApipublicV1LtiDomainsDomainIDBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchLearnApipublicV1LtiDomainsDomainIDBody) UnmarshalBinary(b []byte) error {
	var res PatchLearnApipublicV1LtiDomainsDomainIDBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
