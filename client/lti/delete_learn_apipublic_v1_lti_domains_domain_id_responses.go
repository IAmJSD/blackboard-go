// Code generated by go-swagger; DO NOT EDIT.

package lti

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/jakemakesstuff/blackboard-go/models"
)

// DeleteLearnApipublicV1LtiDomainsDomainIDReader is a Reader for the DeleteLearnApipublicV1LtiDomainsDomainID structure.
type DeleteLearnApipublicV1LtiDomainsDomainIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteLearnApipublicV1LtiDomainsDomainIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteLearnApipublicV1LtiDomainsDomainIDNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteLearnApipublicV1LtiDomainsDomainIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteLearnApipublicV1LtiDomainsDomainIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteLearnApipublicV1LtiDomainsDomainIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteLearnApipublicV1LtiDomainsDomainIDNoContent creates a DeleteLearnApipublicV1LtiDomainsDomainIDNoContent with default headers values
func NewDeleteLearnApipublicV1LtiDomainsDomainIDNoContent() *DeleteLearnApipublicV1LtiDomainsDomainIDNoContent {
	return &DeleteLearnApipublicV1LtiDomainsDomainIDNoContent{}
}

/*DeleteLearnApipublicV1LtiDomainsDomainIDNoContent handles this case with default header values.

No Content
*/
type DeleteLearnApipublicV1LtiDomainsDomainIDNoContent struct {
}

func (o *DeleteLearnApipublicV1LtiDomainsDomainIDNoContent) Error() string {
	return fmt.Sprintf("[DELETE /learn/apipublic/v1/lti/domains/{domainId}][%d] deleteLearnApipublicV1LtiDomainsDomainIdNoContent ", 204)
}

func (o *DeleteLearnApipublicV1LtiDomainsDomainIDNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteLearnApipublicV1LtiDomainsDomainIDBadRequest creates a DeleteLearnApipublicV1LtiDomainsDomainIDBadRequest with default headers values
func NewDeleteLearnApipublicV1LtiDomainsDomainIDBadRequest() *DeleteLearnApipublicV1LtiDomainsDomainIDBadRequest {
	return &DeleteLearnApipublicV1LtiDomainsDomainIDBadRequest{}
}

/*DeleteLearnApipublicV1LtiDomainsDomainIDBadRequest handles this case with default header values.

Bad Request
*/
type DeleteLearnApipublicV1LtiDomainsDomainIDBadRequest struct {
	Payload *models.RestException
}

func (o *DeleteLearnApipublicV1LtiDomainsDomainIDBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /learn/apipublic/v1/lti/domains/{domainId}][%d] deleteLearnApipublicV1LtiDomainsDomainIdBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteLearnApipublicV1LtiDomainsDomainIDBadRequest) GetPayload() *models.RestException {
	return o.Payload
}

func (o *DeleteLearnApipublicV1LtiDomainsDomainIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLearnApipublicV1LtiDomainsDomainIDForbidden creates a DeleteLearnApipublicV1LtiDomainsDomainIDForbidden with default headers values
func NewDeleteLearnApipublicV1LtiDomainsDomainIDForbidden() *DeleteLearnApipublicV1LtiDomainsDomainIDForbidden {
	return &DeleteLearnApipublicV1LtiDomainsDomainIDForbidden{}
}

/*DeleteLearnApipublicV1LtiDomainsDomainIDForbidden handles this case with default header values.

Forbidden
*/
type DeleteLearnApipublicV1LtiDomainsDomainIDForbidden struct {
	Payload *models.RestException
}

func (o *DeleteLearnApipublicV1LtiDomainsDomainIDForbidden) Error() string {
	return fmt.Sprintf("[DELETE /learn/apipublic/v1/lti/domains/{domainId}][%d] deleteLearnApipublicV1LtiDomainsDomainIdForbidden  %+v", 403, o.Payload)
}

func (o *DeleteLearnApipublicV1LtiDomainsDomainIDForbidden) GetPayload() *models.RestException {
	return o.Payload
}

func (o *DeleteLearnApipublicV1LtiDomainsDomainIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLearnApipublicV1LtiDomainsDomainIDNotFound creates a DeleteLearnApipublicV1LtiDomainsDomainIDNotFound with default headers values
func NewDeleteLearnApipublicV1LtiDomainsDomainIDNotFound() *DeleteLearnApipublicV1LtiDomainsDomainIDNotFound {
	return &DeleteLearnApipublicV1LtiDomainsDomainIDNotFound{}
}

/*DeleteLearnApipublicV1LtiDomainsDomainIDNotFound handles this case with default header values.

Not Found
*/
type DeleteLearnApipublicV1LtiDomainsDomainIDNotFound struct {
	Payload *models.RestException
}

func (o *DeleteLearnApipublicV1LtiDomainsDomainIDNotFound) Error() string {
	return fmt.Sprintf("[DELETE /learn/apipublic/v1/lti/domains/{domainId}][%d] deleteLearnApipublicV1LtiDomainsDomainIdNotFound  %+v", 404, o.Payload)
}

func (o *DeleteLearnApipublicV1LtiDomainsDomainIDNotFound) GetPayload() *models.RestException {
	return o.Payload
}

func (o *DeleteLearnApipublicV1LtiDomainsDomainIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
