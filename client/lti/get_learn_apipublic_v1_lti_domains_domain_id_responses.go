// Code generated by go-swagger; DO NOT EDIT.

package lti

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/jakemakesstuff/blackboard-go/models"
)

// GetLearnApipublicV1LtiDomainsDomainIDReader is a Reader for the GetLearnApipublicV1LtiDomainsDomainID structure.
type GetLearnApipublicV1LtiDomainsDomainIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLearnApipublicV1LtiDomainsDomainIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetLearnApipublicV1LtiDomainsDomainIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetLearnApipublicV1LtiDomainsDomainIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetLearnApipublicV1LtiDomainsDomainIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetLearnApipublicV1LtiDomainsDomainIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetLearnApipublicV1LtiDomainsDomainIDOK creates a GetLearnApipublicV1LtiDomainsDomainIDOK with default headers values
func NewGetLearnApipublicV1LtiDomainsDomainIDOK() *GetLearnApipublicV1LtiDomainsDomainIDOK {
	return &GetLearnApipublicV1LtiDomainsDomainIDOK{}
}

/*GetLearnApipublicV1LtiDomainsDomainIDOK handles this case with default header values.

OK
*/
type GetLearnApipublicV1LtiDomainsDomainIDOK struct {
	Payload *models.LTIDomainConfig
}

func (o *GetLearnApipublicV1LtiDomainsDomainIDOK) Error() string {
	return fmt.Sprintf("[GET /learn/apipublic/v1/lti/domains/{domainId}][%d] getLearnApipublicV1LtiDomainsDomainIdOK  %+v", 200, o.Payload)
}

func (o *GetLearnApipublicV1LtiDomainsDomainIDOK) GetPayload() *models.LTIDomainConfig {
	return o.Payload
}

func (o *GetLearnApipublicV1LtiDomainsDomainIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LTIDomainConfig)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLearnApipublicV1LtiDomainsDomainIDBadRequest creates a GetLearnApipublicV1LtiDomainsDomainIDBadRequest with default headers values
func NewGetLearnApipublicV1LtiDomainsDomainIDBadRequest() *GetLearnApipublicV1LtiDomainsDomainIDBadRequest {
	return &GetLearnApipublicV1LtiDomainsDomainIDBadRequest{}
}

/*GetLearnApipublicV1LtiDomainsDomainIDBadRequest handles this case with default header values.

Bad Request
*/
type GetLearnApipublicV1LtiDomainsDomainIDBadRequest struct {
	Payload *models.RestException
}

func (o *GetLearnApipublicV1LtiDomainsDomainIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /learn/apipublic/v1/lti/domains/{domainId}][%d] getLearnApipublicV1LtiDomainsDomainIdBadRequest  %+v", 400, o.Payload)
}

func (o *GetLearnApipublicV1LtiDomainsDomainIDBadRequest) GetPayload() *models.RestException {
	return o.Payload
}

func (o *GetLearnApipublicV1LtiDomainsDomainIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLearnApipublicV1LtiDomainsDomainIDForbidden creates a GetLearnApipublicV1LtiDomainsDomainIDForbidden with default headers values
func NewGetLearnApipublicV1LtiDomainsDomainIDForbidden() *GetLearnApipublicV1LtiDomainsDomainIDForbidden {
	return &GetLearnApipublicV1LtiDomainsDomainIDForbidden{}
}

/*GetLearnApipublicV1LtiDomainsDomainIDForbidden handles this case with default header values.

Forbidden
*/
type GetLearnApipublicV1LtiDomainsDomainIDForbidden struct {
	Payload *models.RestException
}

func (o *GetLearnApipublicV1LtiDomainsDomainIDForbidden) Error() string {
	return fmt.Sprintf("[GET /learn/apipublic/v1/lti/domains/{domainId}][%d] getLearnApipublicV1LtiDomainsDomainIdForbidden  %+v", 403, o.Payload)
}

func (o *GetLearnApipublicV1LtiDomainsDomainIDForbidden) GetPayload() *models.RestException {
	return o.Payload
}

func (o *GetLearnApipublicV1LtiDomainsDomainIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLearnApipublicV1LtiDomainsDomainIDNotFound creates a GetLearnApipublicV1LtiDomainsDomainIDNotFound with default headers values
func NewGetLearnApipublicV1LtiDomainsDomainIDNotFound() *GetLearnApipublicV1LtiDomainsDomainIDNotFound {
	return &GetLearnApipublicV1LtiDomainsDomainIDNotFound{}
}

/*GetLearnApipublicV1LtiDomainsDomainIDNotFound handles this case with default header values.

Not Found
*/
type GetLearnApipublicV1LtiDomainsDomainIDNotFound struct {
	Payload *models.RestException
}

func (o *GetLearnApipublicV1LtiDomainsDomainIDNotFound) Error() string {
	return fmt.Sprintf("[GET /learn/apipublic/v1/lti/domains/{domainId}][%d] getLearnApipublicV1LtiDomainsDomainIdNotFound  %+v", 404, o.Payload)
}

func (o *GetLearnApipublicV1LtiDomainsDomainIDNotFound) GetPayload() *models.RestException {
	return o.Payload
}

func (o *GetLearnApipublicV1LtiDomainsDomainIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
