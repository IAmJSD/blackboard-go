// Code generated by go-swagger; DO NOT EDIT.

package lti

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new lti API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for lti API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteLearnAPIPublicV1LtiPlacementsPlacementID(params *DeleteLearnAPIPublicV1LtiPlacementsPlacementIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLearnAPIPublicV1LtiPlacementsPlacementIDNoContent, error)

	DeleteLearnApipublicV1LtiDomainsDomainID(params *DeleteLearnApipublicV1LtiDomainsDomainIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLearnApipublicV1LtiDomainsDomainIDNoContent, error)

	GetLearnAPIPublicV1LtiPlacements(params *GetLearnAPIPublicV1LtiPlacementsParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1LtiPlacementsOK, error)

	GetLearnAPIPublicV1LtiPlacementsPlacementID(params *GetLearnAPIPublicV1LtiPlacementsPlacementIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1LtiPlacementsPlacementIDOK, error)

	GetLearnApipublicV1LtiDomains(params *GetLearnApipublicV1LtiDomainsParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnApipublicV1LtiDomainsOK, error)

	GetLearnApipublicV1LtiDomainsDomainID(params *GetLearnApipublicV1LtiDomainsDomainIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnApipublicV1LtiDomainsDomainIDOK, error)

	PatchLearnAPIPublicV1LtiPlacementsPlacementID(params *PatchLearnAPIPublicV1LtiPlacementsPlacementIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchLearnAPIPublicV1LtiPlacementsPlacementIDOK, error)

	PatchLearnApipublicV1LtiDomainsDomainID(params *PatchLearnApipublicV1LtiDomainsDomainIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchLearnApipublicV1LtiDomainsDomainIDOK, error)

	PostLearnAPIPublicV1LtiPlacements(params *PostLearnAPIPublicV1LtiPlacementsParams, authInfo runtime.ClientAuthInfoWriter) (*PostLearnAPIPublicV1LtiPlacementsCreated, error)

	PostLearnApipublicV1LtiDomains(params *PostLearnApipublicV1LtiDomainsParams, authInfo runtime.ClientAuthInfoWriter) (*PostLearnApipublicV1LtiDomainsCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteLearnAPIPublicV1LtiPlacementsPlacementID deletes placement

  Deletes an LTI placement with the specified Id

The 'system.administration.VIEW' entitlement is required to delete placements

**Since**: 3300.0.0
*/
func (a *Client) DeleteLearnAPIPublicV1LtiPlacementsPlacementID(params *DeleteLearnAPIPublicV1LtiPlacementsPlacementIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLearnAPIPublicV1LtiPlacementsPlacementIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLearnAPIPublicV1LtiPlacementsPlacementIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLearnAPIPublicV1LtiPlacementsPlacementID",
		Method:             "DELETE",
		PathPattern:        "/learn/api/public/v1/lti/placements/{placementId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteLearnAPIPublicV1LtiPlacementsPlacementIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLearnAPIPublicV1LtiPlacementsPlacementIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLearnAPIPublicV1LtiPlacementsPlacementID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteLearnApipublicV1LtiDomainsDomainID deletes domain config

  Deletes an LTI Domain Config.

The 'system.administration.VIEW' entitlement is needed to delete a domain.

**Since**: 3300.9.0
*/
func (a *Client) DeleteLearnApipublicV1LtiDomainsDomainID(params *DeleteLearnApipublicV1LtiDomainsDomainIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLearnApipublicV1LtiDomainsDomainIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLearnApipublicV1LtiDomainsDomainIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLearnApipublicV1LtiDomainsDomainID",
		Method:             "DELETE",
		PathPattern:        "/learn/apipublic/v1/lti/domains/{domainId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteLearnApipublicV1LtiDomainsDomainIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLearnApipublicV1LtiDomainsDomainIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLearnApipublicV1LtiDomainsDomainID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnAPIPublicV1LtiPlacements gets placements

  Returns a list of LTI placements

Supports the standard paging and sorting query parameters, with a maximum page size of 1000.

**Since**: 3300.0.0
*/
func (a *Client) GetLearnAPIPublicV1LtiPlacements(params *GetLearnAPIPublicV1LtiPlacementsParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1LtiPlacementsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV1LtiPlacementsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV1LtiPlacements",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v1/lti/placements",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV1LtiPlacementsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV1LtiPlacementsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV1LtiPlacements: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnAPIPublicV1LtiPlacementsPlacementID gets placement

  Returns the LTI placement with the specified Id

**Since**: 3300.0.0
*/
func (a *Client) GetLearnAPIPublicV1LtiPlacementsPlacementID(params *GetLearnAPIPublicV1LtiPlacementsPlacementIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1LtiPlacementsPlacementIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV1LtiPlacementsPlacementIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV1LtiPlacementsPlacementID",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v1/lti/placements/{placementId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV1LtiPlacementsPlacementIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV1LtiPlacementsPlacementIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV1LtiPlacementsPlacementID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnApipublicV1LtiDomains gets domain configs

  This endpoint returns the list of LTI domain configs

The 'system.administration.VIEW' entitlement is needed to list domains.

**Since**: 3300.9.0
*/
func (a *Client) GetLearnApipublicV1LtiDomains(params *GetLearnApipublicV1LtiDomainsParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnApipublicV1LtiDomainsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnApipublicV1LtiDomainsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnApipublicV1LtiDomains",
		Method:             "GET",
		PathPattern:        "/learn/apipublic/v1/lti/domains",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnApipublicV1LtiDomainsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnApipublicV1LtiDomainsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnApipublicV1LtiDomains: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnApipublicV1LtiDomainsDomainID gets domain config

  This endpoint returns the LTI domain config with the specified Id

The 'system.administration.VIEW' entitlement is needed to get a domain.

**Since**: 3300.9.0
*/
func (a *Client) GetLearnApipublicV1LtiDomainsDomainID(params *GetLearnApipublicV1LtiDomainsDomainIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnApipublicV1LtiDomainsDomainIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnApipublicV1LtiDomainsDomainIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnApipublicV1LtiDomainsDomainID",
		Method:             "GET",
		PathPattern:        "/learn/apipublic/v1/lti/domains/{domainId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnApipublicV1LtiDomainsDomainIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnApipublicV1LtiDomainsDomainIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnApipublicV1LtiDomainsDomainID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchLearnAPIPublicV1LtiPlacementsPlacementID updates placement

  Updates an LTI placement with the given Id

The 'system.administration.VIEW' entitlement is required to update placements

**Since**: 3300.0.0
*/
func (a *Client) PatchLearnAPIPublicV1LtiPlacementsPlacementID(params *PatchLearnAPIPublicV1LtiPlacementsPlacementIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchLearnAPIPublicV1LtiPlacementsPlacementIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchLearnAPIPublicV1LtiPlacementsPlacementIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchLearnAPIPublicV1LtiPlacementsPlacementID",
		Method:             "PATCH",
		PathPattern:        "/learn/api/public/v1/lti/placements/{placementId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchLearnAPIPublicV1LtiPlacementsPlacementIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchLearnAPIPublicV1LtiPlacementsPlacementIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchLearnAPIPublicV1LtiPlacementsPlacementID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchLearnApipublicV1LtiDomainsDomainID updates domain config

  Updates an LTI Domain Config.

The 'system.administration.VIEW' entitlement is needed to update a domain.

**Since**: 3300.9.0
*/
func (a *Client) PatchLearnApipublicV1LtiDomainsDomainID(params *PatchLearnApipublicV1LtiDomainsDomainIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchLearnApipublicV1LtiDomainsDomainIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchLearnApipublicV1LtiDomainsDomainIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchLearnApipublicV1LtiDomainsDomainID",
		Method:             "PATCH",
		PathPattern:        "/learn/apipublic/v1/lti/domains/{domainId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchLearnApipublicV1LtiDomainsDomainIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchLearnApipublicV1LtiDomainsDomainIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchLearnApipublicV1LtiDomainsDomainID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostLearnAPIPublicV1LtiPlacements creates placement

  Creates an LTI placement

The 'system.administration.VIEW' entitlement is required to create placements

**Since**: 3300.0.0
*/
func (a *Client) PostLearnAPIPublicV1LtiPlacements(params *PostLearnAPIPublicV1LtiPlacementsParams, authInfo runtime.ClientAuthInfoWriter) (*PostLearnAPIPublicV1LtiPlacementsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLearnAPIPublicV1LtiPlacementsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLearnAPIPublicV1LtiPlacements",
		Method:             "POST",
		PathPattern:        "/learn/api/public/v1/lti/placements",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostLearnAPIPublicV1LtiPlacementsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLearnAPIPublicV1LtiPlacementsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLearnAPIPublicV1LtiPlacements: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostLearnApipublicV1LtiDomains creates domain config

  Creates an LTI Domain Config.

The 'system.administration.VIEW' entitlement is needed to create a domain.

**Since**: 3300.9.0
*/
func (a *Client) PostLearnApipublicV1LtiDomains(params *PostLearnApipublicV1LtiDomainsParams, authInfo runtime.ClientAuthInfoWriter) (*PostLearnApipublicV1LtiDomainsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLearnApipublicV1LtiDomainsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLearnApipublicV1LtiDomains",
		Method:             "POST",
		PathPattern:        "/learn/apipublic/v1/lti/domains",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostLearnApipublicV1LtiDomainsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLearnApipublicV1LtiDomainsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLearnApipublicV1LtiDomains: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
