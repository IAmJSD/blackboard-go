// Code generated by go-swagger; DO NOT EDIT.

package lti

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/jakemakesstuff/blackboard-go/models"
)

// PatchLearnAPIPublicV1LtiPlacementsPlacementIDReader is a Reader for the PatchLearnAPIPublicV1LtiPlacementsPlacementID structure.
type PatchLearnAPIPublicV1LtiPlacementsPlacementIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchLearnAPIPublicV1LtiPlacementsPlacementIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchLearnAPIPublicV1LtiPlacementsPlacementIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchLearnAPIPublicV1LtiPlacementsPlacementIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchLearnAPIPublicV1LtiPlacementsPlacementIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchLearnAPIPublicV1LtiPlacementsPlacementIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPatchLearnAPIPublicV1LtiPlacementsPlacementIDConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchLearnAPIPublicV1LtiPlacementsPlacementIDOK creates a PatchLearnAPIPublicV1LtiPlacementsPlacementIDOK with default headers values
func NewPatchLearnAPIPublicV1LtiPlacementsPlacementIDOK() *PatchLearnAPIPublicV1LtiPlacementsPlacementIDOK {
	return &PatchLearnAPIPublicV1LtiPlacementsPlacementIDOK{}
}

/*PatchLearnAPIPublicV1LtiPlacementsPlacementIDOK handles this case with default header values.

OK
*/
type PatchLearnAPIPublicV1LtiPlacementsPlacementIDOK struct {
	Payload *models.LTIPlacement
}

func (o *PatchLearnAPIPublicV1LtiPlacementsPlacementIDOK) Error() string {
	return fmt.Sprintf("[PATCH /learn/api/public/v1/lti/placements/{placementId}][%d] patchLearnApiPublicV1LtiPlacementsPlacementIdOK  %+v", 200, o.Payload)
}

func (o *PatchLearnAPIPublicV1LtiPlacementsPlacementIDOK) GetPayload() *models.LTIPlacement {
	return o.Payload
}

func (o *PatchLearnAPIPublicV1LtiPlacementsPlacementIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LTIPlacement)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearnAPIPublicV1LtiPlacementsPlacementIDBadRequest creates a PatchLearnAPIPublicV1LtiPlacementsPlacementIDBadRequest with default headers values
func NewPatchLearnAPIPublicV1LtiPlacementsPlacementIDBadRequest() *PatchLearnAPIPublicV1LtiPlacementsPlacementIDBadRequest {
	return &PatchLearnAPIPublicV1LtiPlacementsPlacementIDBadRequest{}
}

/*PatchLearnAPIPublicV1LtiPlacementsPlacementIDBadRequest handles this case with default header values.

Bad Request
*/
type PatchLearnAPIPublicV1LtiPlacementsPlacementIDBadRequest struct {
	Payload *models.RestException
}

func (o *PatchLearnAPIPublicV1LtiPlacementsPlacementIDBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /learn/api/public/v1/lti/placements/{placementId}][%d] patchLearnApiPublicV1LtiPlacementsPlacementIdBadRequest  %+v", 400, o.Payload)
}

func (o *PatchLearnAPIPublicV1LtiPlacementsPlacementIDBadRequest) GetPayload() *models.RestException {
	return o.Payload
}

func (o *PatchLearnAPIPublicV1LtiPlacementsPlacementIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearnAPIPublicV1LtiPlacementsPlacementIDForbidden creates a PatchLearnAPIPublicV1LtiPlacementsPlacementIDForbidden with default headers values
func NewPatchLearnAPIPublicV1LtiPlacementsPlacementIDForbidden() *PatchLearnAPIPublicV1LtiPlacementsPlacementIDForbidden {
	return &PatchLearnAPIPublicV1LtiPlacementsPlacementIDForbidden{}
}

/*PatchLearnAPIPublicV1LtiPlacementsPlacementIDForbidden handles this case with default header values.

Forbidden
*/
type PatchLearnAPIPublicV1LtiPlacementsPlacementIDForbidden struct {
	Payload *models.RestException
}

func (o *PatchLearnAPIPublicV1LtiPlacementsPlacementIDForbidden) Error() string {
	return fmt.Sprintf("[PATCH /learn/api/public/v1/lti/placements/{placementId}][%d] patchLearnApiPublicV1LtiPlacementsPlacementIdForbidden  %+v", 403, o.Payload)
}

func (o *PatchLearnAPIPublicV1LtiPlacementsPlacementIDForbidden) GetPayload() *models.RestException {
	return o.Payload
}

func (o *PatchLearnAPIPublicV1LtiPlacementsPlacementIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearnAPIPublicV1LtiPlacementsPlacementIDNotFound creates a PatchLearnAPIPublicV1LtiPlacementsPlacementIDNotFound with default headers values
func NewPatchLearnAPIPublicV1LtiPlacementsPlacementIDNotFound() *PatchLearnAPIPublicV1LtiPlacementsPlacementIDNotFound {
	return &PatchLearnAPIPublicV1LtiPlacementsPlacementIDNotFound{}
}

/*PatchLearnAPIPublicV1LtiPlacementsPlacementIDNotFound handles this case with default header values.

Not Found
*/
type PatchLearnAPIPublicV1LtiPlacementsPlacementIDNotFound struct {
	Payload *models.RestException
}

func (o *PatchLearnAPIPublicV1LtiPlacementsPlacementIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /learn/api/public/v1/lti/placements/{placementId}][%d] patchLearnApiPublicV1LtiPlacementsPlacementIdNotFound  %+v", 404, o.Payload)
}

func (o *PatchLearnAPIPublicV1LtiPlacementsPlacementIDNotFound) GetPayload() *models.RestException {
	return o.Payload
}

func (o *PatchLearnAPIPublicV1LtiPlacementsPlacementIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearnAPIPublicV1LtiPlacementsPlacementIDConflict creates a PatchLearnAPIPublicV1LtiPlacementsPlacementIDConflict with default headers values
func NewPatchLearnAPIPublicV1LtiPlacementsPlacementIDConflict() *PatchLearnAPIPublicV1LtiPlacementsPlacementIDConflict {
	return &PatchLearnAPIPublicV1LtiPlacementsPlacementIDConflict{}
}

/*PatchLearnAPIPublicV1LtiPlacementsPlacementIDConflict handles this case with default header values.

Conflict
*/
type PatchLearnAPIPublicV1LtiPlacementsPlacementIDConflict struct {
	Payload *models.RestException
}

func (o *PatchLearnAPIPublicV1LtiPlacementsPlacementIDConflict) Error() string {
	return fmt.Sprintf("[PATCH /learn/api/public/v1/lti/placements/{placementId}][%d] patchLearnApiPublicV1LtiPlacementsPlacementIdConflict  %+v", 409, o.Payload)
}

func (o *PatchLearnAPIPublicV1LtiPlacementsPlacementIDConflict) GetPayload() *models.RestException {
	return o.Payload
}

func (o *PatchLearnAPIPublicV1LtiPlacementsPlacementIDConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PatchLearnAPIPublicV1LtiPlacementsPlacementIDBody patch learn API public v1 lti placements placement ID body
swagger:model PatchLearnAPIPublicV1LtiPlacementsPlacementIDBody
*/
type PatchLearnAPIPublicV1LtiPlacementsPlacementIDBody struct {

	// Whether this placement can accept grades from the tool provider and a grade column can be created for it. This only applies to Enum[Type]#`ContentHandler` types. All others don't support grading and will be set to false.
	AllowGrading bool `json:"allowGrading,omitempty"`

	// Whether the course tool is visible by students, or only to non-students (e.g. instructors). Defaults to true, allowing students to see the tool.
	AllowStudents bool `json:"allowStudents,omitempty"`

	// Id of the creator of the placement
	AuthorID string `json:"authorId,omitempty"`

	// availability
	Availability *PatchLearnAPIPublicV1LtiPlacementsPlacementIDParamsBodyAvailability `json:"availability,omitempty"`

	// Custom launch parameters for the tool.
	CustomParameters map[string]string `json:"customParameters,omitempty"`

	// The description of the placement. Not required to be unique. Maximum length is 1000 characters, BAD_REQUEST error with message is returned if greater than 1000 characters.
	// Max Length: 1000
	Description string `json:"description,omitempty"`

	// The URL of the icon for this placement, if any. Not required to be unique, must be a complete and valid URL. Maximum length is 255 characters, BAD_REQUEST error with message is returned if greater than 255 characters or incomplete URL.
	// Max Length: 255
	IconURL string `json:"iconUrl,omitempty"`

	// Whether an instructor created the placement or not (otherwise admin)
	InstructorCreated bool `json:"instructorCreated,omitempty"`

	// key
	Key string `json:"key,omitempty"`

	// Whether this placement link should be opened in a new window or not.
	LaunchInNewWindow bool `json:"launchInNewWindow,omitempty"`

	// The name of the placement. Not required to be unique. Maximum length of 50 characters, BAD_REQUEST error with message is returned if greater than 50 characters.
	// Max Length: 50
	Name string `json:"name,omitempty"`

	// secret
	Secret string `json:"secret,omitempty"`

	// The URL of the tool provider. Not required to be unique, must be a complete and valid URL. Maximum length is 1024 characters, BAD_REQUEST error with message is returned if greater than 1024 characters or incomplete URL.
	// Max Length: 1024
	URL string `json:"url,omitempty"`
}

// Validate validates this patch learn API public v1 lti placements placement ID body
func (o *PatchLearnAPIPublicV1LtiPlacementsPlacementIDBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAvailability(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIconURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchLearnAPIPublicV1LtiPlacementsPlacementIDBody) validateAvailability(formats strfmt.Registry) error {

	if swag.IsZero(o.Availability) { // not required
		return nil
	}

	if o.Availability != nil {
		if err := o.Availability.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("input" + "." + "availability")
			}
			return err
		}
	}

	return nil
}

func (o *PatchLearnAPIPublicV1LtiPlacementsPlacementIDBody) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(o.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("input"+"."+"description", "body", string(o.Description), 1000); err != nil {
		return err
	}

	return nil
}

func (o *PatchLearnAPIPublicV1LtiPlacementsPlacementIDBody) validateIconURL(formats strfmt.Registry) error {

	if swag.IsZero(o.IconURL) { // not required
		return nil
	}

	if err := validate.MaxLength("input"+"."+"iconUrl", "body", string(o.IconURL), 255); err != nil {
		return err
	}

	return nil
}

func (o *PatchLearnAPIPublicV1LtiPlacementsPlacementIDBody) validateName(formats strfmt.Registry) error {

	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("input"+"."+"name", "body", string(o.Name), 50); err != nil {
		return err
	}

	return nil
}

func (o *PatchLearnAPIPublicV1LtiPlacementsPlacementIDBody) validateURL(formats strfmt.Registry) error {

	if swag.IsZero(o.URL) { // not required
		return nil
	}

	if err := validate.MaxLength("input"+"."+"url", "body", string(o.URL), 1024); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchLearnAPIPublicV1LtiPlacementsPlacementIDBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchLearnAPIPublicV1LtiPlacementsPlacementIDBody) UnmarshalBinary(b []byte) error {
	var res PatchLearnAPIPublicV1LtiPlacementsPlacementIDBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchLearnAPIPublicV1LtiPlacementsPlacementIDParamsBodyAvailability Availability
//
// Settings controlling availability of the placement.
swagger:model PatchLearnAPIPublicV1LtiPlacementsPlacementIDParamsBodyAvailability
*/
type PatchLearnAPIPublicV1LtiPlacementsPlacementIDParamsBodyAvailability struct {

	// Whether the placement is available within the system.
	//
	//
	// | Type      | Description
	//  | --------- | --------- |
	// | Yes |  |
	// | No |  |
	//
	// Enum: [Yes No]
	Available string `json:"available,omitempty"`
}

// Validate validates this patch learn API public v1 lti placements placement ID params body availability
func (o *PatchLearnAPIPublicV1LtiPlacementsPlacementIDParamsBodyAvailability) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAvailable(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var patchLearnApiPublicV1LtiPlacementsPlacementIdParamsBodyAvailabilityTypeAvailablePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Yes","No"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		patchLearnApiPublicV1LtiPlacementsPlacementIdParamsBodyAvailabilityTypeAvailablePropEnum = append(patchLearnApiPublicV1LtiPlacementsPlacementIdParamsBodyAvailabilityTypeAvailablePropEnum, v)
	}
}

const (

	// PatchLearnAPIPublicV1LtiPlacementsPlacementIDParamsBodyAvailabilityAvailableYes captures enum value "Yes"
	PatchLearnAPIPublicV1LtiPlacementsPlacementIDParamsBodyAvailabilityAvailableYes string = "Yes"

	// PatchLearnAPIPublicV1LtiPlacementsPlacementIDParamsBodyAvailabilityAvailableNo captures enum value "No"
	PatchLearnAPIPublicV1LtiPlacementsPlacementIDParamsBodyAvailabilityAvailableNo string = "No"
)

// prop value enum
func (o *PatchLearnAPIPublicV1LtiPlacementsPlacementIDParamsBodyAvailability) validateAvailableEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, patchLearnApiPublicV1LtiPlacementsPlacementIdParamsBodyAvailabilityTypeAvailablePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *PatchLearnAPIPublicV1LtiPlacementsPlacementIDParamsBodyAvailability) validateAvailable(formats strfmt.Registry) error {

	if swag.IsZero(o.Available) { // not required
		return nil
	}

	// value enum
	if err := o.validateAvailableEnum("input"+"."+"availability"+"."+"available", "body", o.Available); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchLearnAPIPublicV1LtiPlacementsPlacementIDParamsBodyAvailability) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchLearnAPIPublicV1LtiPlacementsPlacementIDParamsBodyAvailability) UnmarshalBinary(b []byte) error {
	var res PatchLearnAPIPublicV1LtiPlacementsPlacementIDParamsBodyAvailability
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
