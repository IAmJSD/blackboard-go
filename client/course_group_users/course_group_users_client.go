// Code generated by go-swagger; DO NOT EDIT.

package course_group_users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new course group users API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for course group users API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteLearnAPIPublicV2CoursesCourseIDGroupsGroupIDUsersUserID(params *DeleteLearnAPIPublicV2CoursesCourseIDGroupsGroupIDUsersUserIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLearnAPIPublicV2CoursesCourseIDGroupsGroupIDUsersUserIDNoContent, error)

	GetLearnAPIPublicV2CoursesCourseIDGroupsGroupIDUsers(params *GetLearnAPIPublicV2CoursesCourseIDGroupsGroupIDUsersParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV2CoursesCourseIDGroupsGroupIDUsersOK, error)

	GetLearnAPIPublicV2CoursesCourseIDGroupsGroupIDUsersUserID(params *GetLearnAPIPublicV2CoursesCourseIDGroupsGroupIDUsersUserIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV2CoursesCourseIDGroupsGroupIDUsersUserIDOK, error)

	PutLearnAPIPublicV2CoursesCourseIDGroupsGroupIDUsersUserID(params *PutLearnAPIPublicV2CoursesCourseIDGroupsGroupIDUsersUserIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutLearnAPIPublicV2CoursesCourseIDGroupsGroupIDUsersUserIDCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteLearnAPIPublicV2CoursesCourseIDGroupsGroupIDUsersUserID deletes group membership

  Deletes a group from the specified course.

Required entitlements:

- course.group-user.manage.EXECUTE

**Since**: 3600.0.0
*/
func (a *Client) DeleteLearnAPIPublicV2CoursesCourseIDGroupsGroupIDUsersUserID(params *DeleteLearnAPIPublicV2CoursesCourseIDGroupsGroupIDUsersUserIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLearnAPIPublicV2CoursesCourseIDGroupsGroupIDUsersUserIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLearnAPIPublicV2CoursesCourseIDGroupsGroupIDUsersUserIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLearnAPIPublicV2CoursesCourseIDGroupsGroupIDUsersUserID",
		Method:             "DELETE",
		PathPattern:        "/learn/api/public/v2/courses/{courseId}/groups/{groupId}/users/{userId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteLearnAPIPublicV2CoursesCourseIDGroupsGroupIDUsersUserIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLearnAPIPublicV2CoursesCourseIDGroupsGroupIDUsersUserIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLearnAPIPublicV2CoursesCourseIDGroupsGroupIDUsersUserID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnAPIPublicV2CoursesCourseIDGroupsGroupIDUsers gets group memberships

  Returns a list of group memberships objects for the specified group.

Callers not enrolled in the group must have at least one of the following entitlements:

- course.group.VIEW

**Since**: 3600.0.0
*/
func (a *Client) GetLearnAPIPublicV2CoursesCourseIDGroupsGroupIDUsers(params *GetLearnAPIPublicV2CoursesCourseIDGroupsGroupIDUsersParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV2CoursesCourseIDGroupsGroupIDUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV2CoursesCourseIDGroupsGroupIDUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV2CoursesCourseIDGroupsGroupIDUsers",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v2/courses/{courseId}/groups/{groupId}/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV2CoursesCourseIDGroupsGroupIDUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV2CoursesCourseIDGroupsGroupIDUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV2CoursesCourseIDGroupsGroupIDUsers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnAPIPublicV2CoursesCourseIDGroupsGroupIDUsersUserID gets group membership

  Loads a group membership in the specified group.

Callers not enrolled in the group must have at least one of the following entitlements:

- course.group.VIEW

**Since**: 3600.0.0
*/
func (a *Client) GetLearnAPIPublicV2CoursesCourseIDGroupsGroupIDUsersUserID(params *GetLearnAPIPublicV2CoursesCourseIDGroupsGroupIDUsersUserIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV2CoursesCourseIDGroupsGroupIDUsersUserIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV2CoursesCourseIDGroupsGroupIDUsersUserIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV2CoursesCourseIDGroupsGroupIDUsersUserID",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v2/courses/{courseId}/groups/{groupId}/users/{userId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV2CoursesCourseIDGroupsGroupIDUsersUserIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV2CoursesCourseIDGroupsGroupIDUsersUserIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV2CoursesCourseIDGroupsGroupIDUsersUserID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutLearnAPIPublicV2CoursesCourseIDGroupsGroupIDUsersUserID creates group membership

  Creates a group membership in the specified group for the user. For Ultra if the user is already enrolled in another group of the same content item (of the group he wishes to enroll) previously to creating the new membership the previous one is deleted (Move operation). If the conditions for the join operation are not fullfilled the operation will be canceled and a 409 Conflict error returned with a message specifying the reason.

Minimal entitlements required:

- course.group-user.manage.EXECUTE

**Since**: 3600.0.0
*/
func (a *Client) PutLearnAPIPublicV2CoursesCourseIDGroupsGroupIDUsersUserID(params *PutLearnAPIPublicV2CoursesCourseIDGroupsGroupIDUsersUserIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutLearnAPIPublicV2CoursesCourseIDGroupsGroupIDUsersUserIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLearnAPIPublicV2CoursesCourseIDGroupsGroupIDUsersUserIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLearnAPIPublicV2CoursesCourseIDGroupsGroupIDUsersUserID",
		Method:             "PUT",
		PathPattern:        "/learn/api/public/v2/courses/{courseId}/groups/{groupId}/users/{userId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutLearnAPIPublicV2CoursesCourseIDGroupsGroupIDUsersUserIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLearnAPIPublicV2CoursesCourseIDGroupsGroupIDUsersUserIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLearnAPIPublicV2CoursesCourseIDGroupsGroupIDUsersUserID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
