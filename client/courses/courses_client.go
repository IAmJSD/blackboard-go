// Code generated by go-swagger; DO NOT EDIT.

package courses

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new courses API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for courses API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteLearnAPIPublicV3CoursesCourseID(params *DeleteLearnAPIPublicV3CoursesCourseIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLearnAPIPublicV3CoursesCourseIDAccepted, error)

	GetLearnAPIPublicV1CoursesCourseIDChildren(params *GetLearnAPIPublicV1CoursesCourseIDChildrenParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1CoursesCourseIDChildrenOK, error)

	GetLearnAPIPublicV1CoursesCourseIDChildrenChildCourseID(params *GetLearnAPIPublicV1CoursesCourseIDChildrenChildCourseIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1CoursesCourseIDChildrenChildCourseIDOK, error)

	GetLearnAPIPublicV1CoursesCourseIDCrossListSet(params *GetLearnAPIPublicV1CoursesCourseIDCrossListSetParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1CoursesCourseIDCrossListSetOK, error)

	GetLearnAPIPublicV1CoursesCourseIDTasksTaskID(params *GetLearnAPIPublicV1CoursesCourseIDTasksTaskIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1CoursesCourseIDTasksTaskIDOK, error)

	GetLearnAPIPublicV3Courses(params *GetLearnAPIPublicV3CoursesParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV3CoursesOK, error)

	GetLearnAPIPublicV3CoursesCourseID(params *GetLearnAPIPublicV3CoursesCourseIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV3CoursesCourseIDOK, error)

	PatchLearnAPIPublicV3CoursesCourseID(params *PatchLearnAPIPublicV3CoursesCourseIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchLearnAPIPublicV3CoursesCourseIDOK, error)

	PostLearnAPIPublicV2CoursesCourseIDCopy(params *PostLearnAPIPublicV2CoursesCourseIDCopyParams, authInfo runtime.ClientAuthInfoWriter) (*PostLearnAPIPublicV2CoursesCourseIDCopyAccepted, error)

	PostLearnAPIPublicV3Courses(params *PostLearnAPIPublicV3CoursesParams, authInfo runtime.ClientAuthInfoWriter) (*PostLearnAPIPublicV3CoursesCreated, error)

	PutLearnAPIPublicV1CoursesCourseIDChildrenChildCourseID(params *PutLearnAPIPublicV1CoursesCourseIDChildrenChildCourseIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutLearnAPIPublicV1CoursesCourseIDChildrenChildCourseIDCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteLearnAPIPublicV3CoursesCourseID deletes course

  Registers a queued task to delete a course or organization in asynchronous fashion.

The 'system.course.DELETE' entitlement is needed to delete a course, while 'system.org.DELETE' is needed for an organization.

**Since**: 3800.1.0
*/
func (a *Client) DeleteLearnAPIPublicV3CoursesCourseID(params *DeleteLearnAPIPublicV3CoursesCourseIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLearnAPIPublicV3CoursesCourseIDAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLearnAPIPublicV3CoursesCourseIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLearnAPIPublicV3CoursesCourseID",
		Method:             "DELETE",
		PathPattern:        "/learn/api/public/v3/courses/{courseId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteLearnAPIPublicV3CoursesCourseIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLearnAPIPublicV3CoursesCourseIDAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLearnAPIPublicV3CoursesCourseID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnAPIPublicV1CoursesCourseIDChildren gets course children

  Returns a list of course cross-listings.

The 'system.course.cross-list.VIEW' or 'system.org.cross-list.VIEW' or 'course.children.VIEW' entitlement is needed.

**Since**: 3000.11.0
*/
func (a *Client) GetLearnAPIPublicV1CoursesCourseIDChildren(params *GetLearnAPIPublicV1CoursesCourseIDChildrenParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1CoursesCourseIDChildrenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV1CoursesCourseIDChildrenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV1CoursesCourseIDChildren",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v1/courses/{courseId}/children",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV1CoursesCourseIDChildrenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV1CoursesCourseIDChildrenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV1CoursesCourseIDChildren: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnAPIPublicV1CoursesCourseIDChildrenChildCourseID gets child

  Loads a specific course cross-listing.

The 'system.course.cross-list.VIEW' or 'system.org.cross-list.VIEW' entitlement is needed.

**Since**: 3000.11.0
*/
func (a *Client) GetLearnAPIPublicV1CoursesCourseIDChildrenChildCourseID(params *GetLearnAPIPublicV1CoursesCourseIDChildrenChildCourseIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1CoursesCourseIDChildrenChildCourseIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV1CoursesCourseIDChildrenChildCourseIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV1CoursesCourseIDChildrenChildCourseID",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v1/courses/{courseId}/children/{childCourseId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV1CoursesCourseIDChildrenChildCourseIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV1CoursesCourseIDChildrenChildCourseIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV1CoursesCourseIDChildrenChildCourseID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnAPIPublicV1CoursesCourseIDCrossListSet gets cross list set

  Returns the course cross-listing set for the specified course. This will return any and all parent/child associations regardless of the specified course being a parent or child course. The result will be empty if the specified course is not cross-listed.

The 'system.course.cross-list.VIEW' or 'system.org.cross-list.VIEW' entitlement is needed.

**Since**: 3400.1.0
*/
func (a *Client) GetLearnAPIPublicV1CoursesCourseIDCrossListSet(params *GetLearnAPIPublicV1CoursesCourseIDCrossListSetParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1CoursesCourseIDCrossListSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV1CoursesCourseIDCrossListSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV1CoursesCourseIDCrossListSet",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v1/courses/{courseId}/crossListSet",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV1CoursesCourseIDCrossListSetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV1CoursesCourseIDCrossListSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV1CoursesCourseIDCrossListSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnAPIPublicV1CoursesCourseIDTasksTaskID gets task

  Check the status of a queued task associated with a Course. Returns 200 unless task is complete. If task is complete this endpoint will return a 303 SEE OTHER with a Location header providing a URI to the GET Course endpoint. Statistical data shows that the average copy task duration is under a second. However, very large courses can take several minutes. Also important to note is that these background tasks can potentially be queued behind other system tasks therefore prolonging the time a task stays in the `Queued` status. We recommend that this endpoint be polled every 60 seconds while waiting for a Course copy to complete.

Users with entitlements 'system.course.copy.EXECUTE' can view the task status.

**Since**: 3300.0.0
*/
func (a *Client) GetLearnAPIPublicV1CoursesCourseIDTasksTaskID(params *GetLearnAPIPublicV1CoursesCourseIDTasksTaskIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1CoursesCourseIDTasksTaskIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV1CoursesCourseIDTasksTaskIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV1CoursesCourseIDTasksTaskID",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v1/courses/{courseId}/tasks/{taskId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV1CoursesCourseIDTasksTaskIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV1CoursesCourseIDTasksTaskIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV1CoursesCourseIDTasksTaskID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnAPIPublicV3Courses gets courses

  Returns a list of courses and organizations.

To view disabled courses a user must have the entitlement 'system.course.VIEW'.

Users with the 'course.configure-properties.EXECUTE' course entitlement, or the 'system.course.properties.MODIFY' system entitlement can access all course properties.

Users enrolled in the course have read access to all properties except:

- uuid
- externalId
- dataSourceId
- created
- allowGuests
- enrollment.accessCode

Users who are not enrolled in the course and do not have associated entitlements only have read access to the following properties:

- id
- courseId
- name
- description
- organization
- readOnly
- termId
- availability.available
- availability.duration.type
- availability.duration.start
- availability.duration.end
- availability.duration.daysOfUse
If the course enrollment is self-enroll, all users can view the course as though they were enrolled.

**Since**: 3800.1.0
*/
func (a *Client) GetLearnAPIPublicV3Courses(params *GetLearnAPIPublicV3CoursesParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV3CoursesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV3CoursesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV3Courses",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v3/courses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV3CoursesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV3CoursesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV3Courses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnAPIPublicV3CoursesCourseID gets course

  Loads a specific course or organization.

To view disabled courses a user must have the entitlement 'system.course.VIEW'.

Users with the 'course.configure-properties.EXECUTE' entitlement can access all course properties.

Users enrolled in the course have read access to all properties except:

- uuid
- externalId
- dataSourceId
- created
- allowGuests
- enrollment.accessCode

Users with no access to the course only have read access to the following properties:

- id
- courseId
- name
- description
- organization
- closedComplete
- termId
- availability.available
- availability.duration.type
- availability.duration.start
- availability.duration.end
- availability.duration.daysOfUse
If the course enrollment is self-enroll, all users can view the course as though they were enrolled.

**Since**: 3800.1.0
*/
func (a *Client) GetLearnAPIPublicV3CoursesCourseID(params *GetLearnAPIPublicV3CoursesCourseIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV3CoursesCourseIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV3CoursesCourseIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV3CoursesCourseID",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v3/courses/{courseId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV3CoursesCourseIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV3CoursesCourseIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV3CoursesCourseID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchLearnAPIPublicV3CoursesCourseID updates course

  Updates a course or organization.

To update a course, the user must have either 'system.course|org.properties.MODIFY' or 'course.configure-properties.EXECUTE' entitlements.  However, if the user has the latter entitlement, then additional entitlements are needed to be able to update certain fields, as shown below:

 | Field                           | Entitlements Required                                                  |
 |---------------------------------|------------------------------------------------------------------------|
 | name                            | course.name.MODIFY                                                     |
 | description                     | course.name.MODIFY                                                     |
 | allowGuests                     | course.configure-guest-access.EXECUTE                                  |
 | enrollment.type                 | course.configure-properties.EXECUTE, course.enrollment.MODIFY          |
 | enrollment.start                | course.configure-properties.EXECUTE, course.enrollment.MODIFY          |
 | enrollment.end                  | course.configure-properties.EXECUTE, course.enrollment.MODIFY          |
 | enrollment.accessCode           | course.configure-properties.EXECUTE, course.enrollment.MODIFY          |
 | availability.available          | course.configure-properties.EXECUTE, course.availability.MODIFY        |
 | locale.id                       | course.configure-properties.EXECUTE, course.locale.MODIFY              |
 | locale.force                    | course.configure-properties.EXECUTE, course.locale.MODIFY              |
 | availability.duration.type      | course.configure-properties.EXECUTE, course.configure-duration.EXECUTE |
 | availability.duration.start     | course.configure-properties.EXECUTE, course.configure-duration.EXECUTE |
 | availability.duration.end       | course.configure-properties.EXECUTE, course.configure-duration.EXECUTE |
 | availability.duration.daysOfUse | course.configure-properties.EXECUTE, course.configure-duration.EXECUTE |


**Since**: 3800.1.0
*/
func (a *Client) PatchLearnAPIPublicV3CoursesCourseID(params *PatchLearnAPIPublicV3CoursesCourseIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchLearnAPIPublicV3CoursesCourseIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchLearnAPIPublicV3CoursesCourseIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchLearnAPIPublicV3CoursesCourseID",
		Method:             "PATCH",
		PathPattern:        "/learn/api/public/v3/courses/{courseId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchLearnAPIPublicV3CoursesCourseIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchLearnAPIPublicV3CoursesCourseIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchLearnAPIPublicV3CoursesCourseID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostLearnAPIPublicV2CoursesCourseIDCopy copies course

  Creates a copy of an existing Course into a new Course or an existing course. It is possible to limit the course content to be copied using options.

Users with entitlements 'system.course.copy.EXECUTE' can create a course copy. Users with entitlements 'system.org.copy.EXECUTE' can create an organization copy. Users with entitlement 'course.content.copy.exact.EXECUTE' can copy Course/Organization materials to a new or existing course Users with entitlement 'course.content.copy.new.EXECUTE' can copy Course/Organization materials to a new course. All users's must also have 'course.content.copy.EXECUTE' entitlement associated with the specified source courseId.

**Since**: 3800.2.0
*/
func (a *Client) PostLearnAPIPublicV2CoursesCourseIDCopy(params *PostLearnAPIPublicV2CoursesCourseIDCopyParams, authInfo runtime.ClientAuthInfoWriter) (*PostLearnAPIPublicV2CoursesCourseIDCopyAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLearnAPIPublicV2CoursesCourseIDCopyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLearnAPIPublicV2CoursesCourseIDCopy",
		Method:             "POST",
		PathPattern:        "/learn/api/public/v2/courses/{courseId}/copy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostLearnAPIPublicV2CoursesCourseIDCopyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLearnAPIPublicV2CoursesCourseIDCopyAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLearnAPIPublicV2CoursesCourseIDCopy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostLearnAPIPublicV3Courses creates course

  Creates a course or organization.

The 'system.course.CREATE' entitlement is needed to create a course, while 'system.org.CREATE' is needed for an organization.

**Since**: 3800.1.0
*/
func (a *Client) PostLearnAPIPublicV3Courses(params *PostLearnAPIPublicV3CoursesParams, authInfo runtime.ClientAuthInfoWriter) (*PostLearnAPIPublicV3CoursesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLearnAPIPublicV3CoursesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLearnAPIPublicV3Courses",
		Method:             "POST",
		PathPattern:        "/learn/api/public/v3/courses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostLearnAPIPublicV3CoursesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLearnAPIPublicV3CoursesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLearnAPIPublicV3Courses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutLearnAPIPublicV1CoursesCourseIDChildrenChildCourseID adds child course

  Merges two courses (or organizations) together. Commonly referred to as cross-listing. Only a single level of parent/child relationship is supported (ie. Parent courses may not become children, similarly, a child cannot become a parent)

Minimal entitlements required:

- For courses: 'system.course.cross-list.VIEW'
- For organizations: 'system.org.cross-list.VIEW'

Upon being merged, all enrollments in the child course are replicated in the parent course, and any future enrollment changes in the child course are also synchronized automatically with the parent course. Duplicate student enrollments will result in a 409 CONFLICT unless the 'ignoreEnrollmentErrors' query parameter is set to true. Users in other roles, such as grader, teaching assistant, or guest, are assigned roles based on the last time they are added to the parent course.

**Since**: 3400.1.0
*/
func (a *Client) PutLearnAPIPublicV1CoursesCourseIDChildrenChildCourseID(params *PutLearnAPIPublicV1CoursesCourseIDChildrenChildCourseIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutLearnAPIPublicV1CoursesCourseIDChildrenChildCourseIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLearnAPIPublicV1CoursesCourseIDChildrenChildCourseIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLearnAPIPublicV1CoursesCourseIDChildrenChildCourseID",
		Method:             "PUT",
		PathPattern:        "/learn/api/public/v1/courses/{courseId}/children/{childCourseId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutLearnAPIPublicV1CoursesCourseIDChildrenChildCourseIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLearnAPIPublicV1CoursesCourseIDChildrenChildCourseIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLearnAPIPublicV1CoursesCourseIDChildrenChildCourseID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
