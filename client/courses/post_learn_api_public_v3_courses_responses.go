// Code generated by go-swagger; DO NOT EDIT.

package courses

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/jakemakesstuff/blackboard-go/models"
)

// PostLearnAPIPublicV3CoursesReader is a Reader for the PostLearnAPIPublicV3Courses structure.
type PostLearnAPIPublicV3CoursesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostLearnAPIPublicV3CoursesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewPostLearnAPIPublicV3CoursesCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostLearnAPIPublicV3CoursesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostLearnAPIPublicV3CoursesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPostLearnAPIPublicV3CoursesConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostLearnAPIPublicV3CoursesCreated creates a PostLearnAPIPublicV3CoursesCreated with default headers values
func NewPostLearnAPIPublicV3CoursesCreated() *PostLearnAPIPublicV3CoursesCreated {
	return &PostLearnAPIPublicV3CoursesCreated{}
}

/*PostLearnAPIPublicV3CoursesCreated handles this case with default header values.

Created
*/
type PostLearnAPIPublicV3CoursesCreated struct {
	Payload *models.CourseV2
}

func (o *PostLearnAPIPublicV3CoursesCreated) Error() string {
	return fmt.Sprintf("[POST /learn/api/public/v3/courses][%d] postLearnApiPublicV3CoursesCreated  %+v", 201, o.Payload)
}

func (o *PostLearnAPIPublicV3CoursesCreated) GetPayload() *models.CourseV2 {
	return o.Payload
}

func (o *PostLearnAPIPublicV3CoursesCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CourseV2)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostLearnAPIPublicV3CoursesBadRequest creates a PostLearnAPIPublicV3CoursesBadRequest with default headers values
func NewPostLearnAPIPublicV3CoursesBadRequest() *PostLearnAPIPublicV3CoursesBadRequest {
	return &PostLearnAPIPublicV3CoursesBadRequest{}
}

/*PostLearnAPIPublicV3CoursesBadRequest handles this case with default header values.

The request did not specify valid data
*/
type PostLearnAPIPublicV3CoursesBadRequest struct {
	Payload *models.RestException
}

func (o *PostLearnAPIPublicV3CoursesBadRequest) Error() string {
	return fmt.Sprintf("[POST /learn/api/public/v3/courses][%d] postLearnApiPublicV3CoursesBadRequest  %+v", 400, o.Payload)
}

func (o *PostLearnAPIPublicV3CoursesBadRequest) GetPayload() *models.RestException {
	return o.Payload
}

func (o *PostLearnAPIPublicV3CoursesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostLearnAPIPublicV3CoursesForbidden creates a PostLearnAPIPublicV3CoursesForbidden with default headers values
func NewPostLearnAPIPublicV3CoursesForbidden() *PostLearnAPIPublicV3CoursesForbidden {
	return &PostLearnAPIPublicV3CoursesForbidden{}
}

/*PostLearnAPIPublicV3CoursesForbidden handles this case with default header values.

The user does not have entitlements to create courses
*/
type PostLearnAPIPublicV3CoursesForbidden struct {
	Payload *models.RestException
}

func (o *PostLearnAPIPublicV3CoursesForbidden) Error() string {
	return fmt.Sprintf("[POST /learn/api/public/v3/courses][%d] postLearnApiPublicV3CoursesForbidden  %+v", 403, o.Payload)
}

func (o *PostLearnAPIPublicV3CoursesForbidden) GetPayload() *models.RestException {
	return o.Payload
}

func (o *PostLearnAPIPublicV3CoursesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostLearnAPIPublicV3CoursesConflict creates a PostLearnAPIPublicV3CoursesConflict with default headers values
func NewPostLearnAPIPublicV3CoursesConflict() *PostLearnAPIPublicV3CoursesConflict {
	return &PostLearnAPIPublicV3CoursesConflict{}
}

/*PostLearnAPIPublicV3CoursesConflict handles this case with default header values.

A course with the same courseId or externalId already exists
*/
type PostLearnAPIPublicV3CoursesConflict struct {
	Payload *models.RestException
}

func (o *PostLearnAPIPublicV3CoursesConflict) Error() string {
	return fmt.Sprintf("[POST /learn/api/public/v3/courses][%d] postLearnApiPublicV3CoursesConflict  %+v", 409, o.Payload)
}

func (o *PostLearnAPIPublicV3CoursesConflict) GetPayload() *models.RestException {
	return o.Payload
}

func (o *PostLearnAPIPublicV3CoursesConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PostLearnAPIPublicV3CoursesBody post learn API public v3 courses body
swagger:model PostLearnAPIPublicV3CoursesBody
*/
type PostLearnAPIPublicV3CoursesBody struct {

	// Whether guests (users with the role guest) are allowed access to the course. Defaults to true.
	AllowGuests bool `json:"allowGuests,omitempty"`

	// availability
	Availability *PostLearnAPIPublicV3CoursesParamsBodyAvailability `json:"availability,omitempty"`

	// This status does not affect availability of the course for viewing in any way. closedComplete is valid for both Ultra and Classic courses. If an Ultra course is in closedComplete mode, updates are not possible. For a Classic course in closedComplete mode, updates are still possible (through Web UI but not through REST i.e. closed is enforced for original courses when updated through REST the same way Ultra courses are blocked) but new notifications are not generated.
	ClosedComplete bool `json:"closedComplete,omitempty"`

	// The Course ID attribute, shown to users in the UI.
	// Required: true
	// Max Length: 100
	CourseID *string `json:"courseId"`

	// The ID of the data source associated with this course. This may optionally be the data source's externalId using the syntax "externalId:math101".
	DataSourceID string `json:"dataSourceId,omitempty"`

	// The description of the course.
	Description string `json:"description,omitempty"`

	// enrollment
	Enrollment *PostLearnAPIPublicV3CoursesParamsBodyEnrollment `json:"enrollment,omitempty"`

	// An optional externally-defined unique ID for the course. Defaults to the courseId.
	//
	// Formerly known as 'batchUid'.
	// Max Length: 256
	ExternalID string `json:"externalId,omitempty"`

	// locale
	Locale *PostLearnAPIPublicV3CoursesParamsBodyLocale `json:"locale,omitempty"`

	// The name of the course.
	// Required: true
	// Max Length: 333
	Name *string `json:"name"`

	// Whether this object represents an Organization. Defaults to false.
	Organization bool `json:"organization,omitempty"`

	// The ID of the term associated to this course. This may optionally be the term's externalId using the syntax "externalId:spring.2016".
	TermID string `json:"termId,omitempty"`

	// Whether the course is rendered using Classic or Ultra Course View.
	//
	//
	// | Type      | Description
	//  | --------- | --------- |
	// | Undecided | The ultra status is not decided. |
	// | Classic | The course is decided as classic. |
	// | Ultra | The course is decided as ultra |
	// | UltraPreview | The course is currently in Ultra mode but during the preview state where it may still be reverted via a Restore to the classic state |
	//
	// Enum: [Undecided Classic Ultra UltraPreview]
	UltraStatus string `json:"ultraStatus,omitempty"`
}

// Validate validates this post learn API public v3 courses body
func (o *PostLearnAPIPublicV3CoursesBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAvailability(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCourseID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEnrollment(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExternalID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocale(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUltraStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostLearnAPIPublicV3CoursesBody) validateAvailability(formats strfmt.Registry) error {

	if swag.IsZero(o.Availability) { // not required
		return nil
	}

	if o.Availability != nil {
		if err := o.Availability.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("input" + "." + "availability")
			}
			return err
		}
	}

	return nil
}

func (o *PostLearnAPIPublicV3CoursesBody) validateCourseID(formats strfmt.Registry) error {

	if err := validate.Required("input"+"."+"courseId", "body", o.CourseID); err != nil {
		return err
	}

	if err := validate.MaxLength("input"+"."+"courseId", "body", string(*o.CourseID), 100); err != nil {
		return err
	}

	return nil
}

func (o *PostLearnAPIPublicV3CoursesBody) validateEnrollment(formats strfmt.Registry) error {

	if swag.IsZero(o.Enrollment) { // not required
		return nil
	}

	if o.Enrollment != nil {
		if err := o.Enrollment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("input" + "." + "enrollment")
			}
			return err
		}
	}

	return nil
}

func (o *PostLearnAPIPublicV3CoursesBody) validateExternalID(formats strfmt.Registry) error {

	if swag.IsZero(o.ExternalID) { // not required
		return nil
	}

	if err := validate.MaxLength("input"+"."+"externalId", "body", string(o.ExternalID), 256); err != nil {
		return err
	}

	return nil
}

func (o *PostLearnAPIPublicV3CoursesBody) validateLocale(formats strfmt.Registry) error {

	if swag.IsZero(o.Locale) { // not required
		return nil
	}

	if o.Locale != nil {
		if err := o.Locale.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("input" + "." + "locale")
			}
			return err
		}
	}

	return nil
}

func (o *PostLearnAPIPublicV3CoursesBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("input"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	if err := validate.MaxLength("input"+"."+"name", "body", string(*o.Name), 333); err != nil {
		return err
	}

	return nil
}

var postLearnApiPublicV3CoursesBodyTypeUltraStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Undecided","Classic","Ultra","UltraPreview"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postLearnApiPublicV3CoursesBodyTypeUltraStatusPropEnum = append(postLearnApiPublicV3CoursesBodyTypeUltraStatusPropEnum, v)
	}
}

const (

	// PostLearnAPIPublicV3CoursesBodyUltraStatusUndecided captures enum value "Undecided"
	PostLearnAPIPublicV3CoursesBodyUltraStatusUndecided string = "Undecided"

	// PostLearnAPIPublicV3CoursesBodyUltraStatusClassic captures enum value "Classic"
	PostLearnAPIPublicV3CoursesBodyUltraStatusClassic string = "Classic"

	// PostLearnAPIPublicV3CoursesBodyUltraStatusUltra captures enum value "Ultra"
	PostLearnAPIPublicV3CoursesBodyUltraStatusUltra string = "Ultra"

	// PostLearnAPIPublicV3CoursesBodyUltraStatusUltraPreview captures enum value "UltraPreview"
	PostLearnAPIPublicV3CoursesBodyUltraStatusUltraPreview string = "UltraPreview"
)

// prop value enum
func (o *PostLearnAPIPublicV3CoursesBody) validateUltraStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, postLearnApiPublicV3CoursesBodyTypeUltraStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *PostLearnAPIPublicV3CoursesBody) validateUltraStatus(formats strfmt.Registry) error {

	if swag.IsZero(o.UltraStatus) { // not required
		return nil
	}

	// value enum
	if err := o.validateUltraStatusEnum("input"+"."+"ultraStatus", "body", o.UltraStatus); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostLearnAPIPublicV3CoursesBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostLearnAPIPublicV3CoursesBody) UnmarshalBinary(b []byte) error {
	var res PostLearnAPIPublicV3CoursesBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostLearnAPIPublicV3CoursesParamsBodyAvailability Availability
//
// Settings controlling availability of the course to students.
swagger:model PostLearnAPIPublicV3CoursesParamsBodyAvailability
*/
type PostLearnAPIPublicV3CoursesParamsBodyAvailability struct {

	// Whether the course is currently available to students. Instructors can always access the course if they have 'Access unavailable course' entitlement. If set to 'Term', the course's parent term availability settings will be used.
	//
	//
	// | Type      | Description
	//  | --------- | --------- |
	// | Yes | Students may access the course. |
	// | No | Students may not access the course. |
	// | Disabled | Disabled by the SIS. Students may not access the course. @since 3100.0.0 |
	// | Term | Availability is inherited from the term settings. Requires a termId be set. |
	//
	// Enum: [Yes No Disabled Term]
	Available string `json:"available,omitempty"`

	// duration
	Duration *PostLearnAPIPublicV3CoursesParamsBodyAvailabilityDuration `json:"duration,omitempty"`
}

// Validate validates this post learn API public v3 courses params body availability
func (o *PostLearnAPIPublicV3CoursesParamsBodyAvailability) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAvailable(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDuration(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var postLearnApiPublicV3CoursesParamsBodyAvailabilityTypeAvailablePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Yes","No","Disabled","Term"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postLearnApiPublicV3CoursesParamsBodyAvailabilityTypeAvailablePropEnum = append(postLearnApiPublicV3CoursesParamsBodyAvailabilityTypeAvailablePropEnum, v)
	}
}

const (

	// PostLearnAPIPublicV3CoursesParamsBodyAvailabilityAvailableYes captures enum value "Yes"
	PostLearnAPIPublicV3CoursesParamsBodyAvailabilityAvailableYes string = "Yes"

	// PostLearnAPIPublicV3CoursesParamsBodyAvailabilityAvailableNo captures enum value "No"
	PostLearnAPIPublicV3CoursesParamsBodyAvailabilityAvailableNo string = "No"

	// PostLearnAPIPublicV3CoursesParamsBodyAvailabilityAvailableDisabled captures enum value "Disabled"
	PostLearnAPIPublicV3CoursesParamsBodyAvailabilityAvailableDisabled string = "Disabled"

	// PostLearnAPIPublicV3CoursesParamsBodyAvailabilityAvailableTerm captures enum value "Term"
	PostLearnAPIPublicV3CoursesParamsBodyAvailabilityAvailableTerm string = "Term"
)

// prop value enum
func (o *PostLearnAPIPublicV3CoursesParamsBodyAvailability) validateAvailableEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, postLearnApiPublicV3CoursesParamsBodyAvailabilityTypeAvailablePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *PostLearnAPIPublicV3CoursesParamsBodyAvailability) validateAvailable(formats strfmt.Registry) error {

	if swag.IsZero(o.Available) { // not required
		return nil
	}

	// value enum
	if err := o.validateAvailableEnum("input"+"."+"availability"+"."+"available", "body", o.Available); err != nil {
		return err
	}

	return nil
}

func (o *PostLearnAPIPublicV3CoursesParamsBodyAvailability) validateDuration(formats strfmt.Registry) error {

	if swag.IsZero(o.Duration) { // not required
		return nil
	}

	if o.Duration != nil {
		if err := o.Duration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("input" + "." + "availability" + "." + "duration")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostLearnAPIPublicV3CoursesParamsBodyAvailability) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostLearnAPIPublicV3CoursesParamsBodyAvailability) UnmarshalBinary(b []byte) error {
	var res PostLearnAPIPublicV3CoursesParamsBodyAvailability
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostLearnAPIPublicV3CoursesParamsBodyAvailabilityDuration Duration
//
// Settings controlling the length of time the course is available.
swagger:model PostLearnAPIPublicV3CoursesParamsBodyAvailabilityDuration
*/
type PostLearnAPIPublicV3CoursesParamsBodyAvailabilityDuration struct {

	// The number of days this course can be used. May only be set if availability.duration.type is FixedNumDays.
	DaysOfUse int32 `json:"daysOfUse,omitempty"`

	// The date this course ends. May only be set if availability.duration.type is DateRange.
	// Format: date-time
	End strfmt.DateTime `json:"end,omitempty"`

	// The date this course starts. May only be set if availability.duration.type is DateRange.
	// Format: date-time
	Start strfmt.DateTime `json:"start,omitempty"`

	// The intended length of the course. Possible values are:
	//
	// - Continuous: The course is active on an ongoing basis. This is the default.
	// - DateRange: The course will only be available between specific date ranges.
	// - FixedNumDays: The course will only be available for a set number of days.
	// - Term: The course's parent term duration settings will be used.
	//
	//
	// | Type      | Description
	//  | --------- | --------- |
	// | Continuous | Course is active on an ongoing basis. |
	// | DateRange | Course is only intended to be available between specific date ranges |
	// | FixedNumDays | Course is only available for a set number of days |
	// | Term | Course availablity is dictated by its associated term |
	//
	// Enum: [Continuous DateRange FixedNumDays Term]
	Type string `json:"type,omitempty"`
}

// Validate validates this post learn API public v3 courses params body availability duration
func (o *PostLearnAPIPublicV3CoursesParamsBodyAvailabilityDuration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStart(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostLearnAPIPublicV3CoursesParamsBodyAvailabilityDuration) validateEnd(formats strfmt.Registry) error {

	if swag.IsZero(o.End) { // not required
		return nil
	}

	if err := validate.FormatOf("input"+"."+"availability"+"."+"duration"+"."+"end", "body", "date-time", o.End.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *PostLearnAPIPublicV3CoursesParamsBodyAvailabilityDuration) validateStart(formats strfmt.Registry) error {

	if swag.IsZero(o.Start) { // not required
		return nil
	}

	if err := validate.FormatOf("input"+"."+"availability"+"."+"duration"+"."+"start", "body", "date-time", o.Start.String(), formats); err != nil {
		return err
	}

	return nil
}

var postLearnApiPublicV3CoursesParamsBodyAvailabilityDurationTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Continuous","DateRange","FixedNumDays","Term"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postLearnApiPublicV3CoursesParamsBodyAvailabilityDurationTypeTypePropEnum = append(postLearnApiPublicV3CoursesParamsBodyAvailabilityDurationTypeTypePropEnum, v)
	}
}

const (

	// PostLearnAPIPublicV3CoursesParamsBodyAvailabilityDurationTypeContinuous captures enum value "Continuous"
	PostLearnAPIPublicV3CoursesParamsBodyAvailabilityDurationTypeContinuous string = "Continuous"

	// PostLearnAPIPublicV3CoursesParamsBodyAvailabilityDurationTypeDateRange captures enum value "DateRange"
	PostLearnAPIPublicV3CoursesParamsBodyAvailabilityDurationTypeDateRange string = "DateRange"

	// PostLearnAPIPublicV3CoursesParamsBodyAvailabilityDurationTypeFixedNumDays captures enum value "FixedNumDays"
	PostLearnAPIPublicV3CoursesParamsBodyAvailabilityDurationTypeFixedNumDays string = "FixedNumDays"

	// PostLearnAPIPublicV3CoursesParamsBodyAvailabilityDurationTypeTerm captures enum value "Term"
	PostLearnAPIPublicV3CoursesParamsBodyAvailabilityDurationTypeTerm string = "Term"
)

// prop value enum
func (o *PostLearnAPIPublicV3CoursesParamsBodyAvailabilityDuration) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, postLearnApiPublicV3CoursesParamsBodyAvailabilityDurationTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *PostLearnAPIPublicV3CoursesParamsBodyAvailabilityDuration) validateType(formats strfmt.Registry) error {

	if swag.IsZero(o.Type) { // not required
		return nil
	}

	// value enum
	if err := o.validateTypeEnum("input"+"."+"availability"+"."+"duration"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostLearnAPIPublicV3CoursesParamsBodyAvailabilityDuration) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostLearnAPIPublicV3CoursesParamsBodyAvailabilityDuration) UnmarshalBinary(b []byte) error {
	var res PostLearnAPIPublicV3CoursesParamsBodyAvailabilityDuration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostLearnAPIPublicV3CoursesParamsBodyEnrollment Enrollment
//
// Settings controlling how students may enroll in the course.
swagger:model PostLearnAPIPublicV3CoursesParamsBodyEnrollment
*/
type PostLearnAPIPublicV3CoursesParamsBodyEnrollment struct {

	// The enrollment access code associated with this course. May only be set if enrollment.type is SelfEnrollment.
	// Max Length: 50
	AccessCode string `json:"accessCode,omitempty"`

	// The date on which enrollment in this course ends. May only be set if enrollment.type is SelfEnrollment.
	// Format: date-time
	End strfmt.DateTime `json:"end,omitempty"`

	// The date on which enrollments are allowed for the course. May only be set if enrollment.type is SelfEnrollment.
	// Format: date-time
	Start strfmt.DateTime `json:"start,omitempty"`

	// Specifies the enrollment options for the course. Defaults to InstructorLed.
	//
	//
	// | Type      | Description
	//  | --------- | --------- |
	// | InstructorLed | Enrollment tasks for the course can only performed by the instructor |
	// | SelfEnrollment | Instructors have the ability to enroll users, and students can also enroll themselves in the course |
	// | EmailEnrollment | Instructors have the ability to enroll users, and students can email requests to the instructor for enrollment |
	//
	// Enum: [InstructorLed SelfEnrollment EmailEnrollment]
	Type string `json:"type,omitempty"`
}

// Validate validates this post learn API public v3 courses params body enrollment
func (o *PostLearnAPIPublicV3CoursesParamsBodyEnrollment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccessCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStart(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostLearnAPIPublicV3CoursesParamsBodyEnrollment) validateAccessCode(formats strfmt.Registry) error {

	if swag.IsZero(o.AccessCode) { // not required
		return nil
	}

	if err := validate.MaxLength("input"+"."+"enrollment"+"."+"accessCode", "body", string(o.AccessCode), 50); err != nil {
		return err
	}

	return nil
}

func (o *PostLearnAPIPublicV3CoursesParamsBodyEnrollment) validateEnd(formats strfmt.Registry) error {

	if swag.IsZero(o.End) { // not required
		return nil
	}

	if err := validate.FormatOf("input"+"."+"enrollment"+"."+"end", "body", "date-time", o.End.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *PostLearnAPIPublicV3CoursesParamsBodyEnrollment) validateStart(formats strfmt.Registry) error {

	if swag.IsZero(o.Start) { // not required
		return nil
	}

	if err := validate.FormatOf("input"+"."+"enrollment"+"."+"start", "body", "date-time", o.Start.String(), formats); err != nil {
		return err
	}

	return nil
}

var postLearnApiPublicV3CoursesParamsBodyEnrollmentTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["InstructorLed","SelfEnrollment","EmailEnrollment"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postLearnApiPublicV3CoursesParamsBodyEnrollmentTypeTypePropEnum = append(postLearnApiPublicV3CoursesParamsBodyEnrollmentTypeTypePropEnum, v)
	}
}

const (

	// PostLearnAPIPublicV3CoursesParamsBodyEnrollmentTypeInstructorLed captures enum value "InstructorLed"
	PostLearnAPIPublicV3CoursesParamsBodyEnrollmentTypeInstructorLed string = "InstructorLed"

	// PostLearnAPIPublicV3CoursesParamsBodyEnrollmentTypeSelfEnrollment captures enum value "SelfEnrollment"
	PostLearnAPIPublicV3CoursesParamsBodyEnrollmentTypeSelfEnrollment string = "SelfEnrollment"

	// PostLearnAPIPublicV3CoursesParamsBodyEnrollmentTypeEmailEnrollment captures enum value "EmailEnrollment"
	PostLearnAPIPublicV3CoursesParamsBodyEnrollmentTypeEmailEnrollment string = "EmailEnrollment"
)

// prop value enum
func (o *PostLearnAPIPublicV3CoursesParamsBodyEnrollment) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, postLearnApiPublicV3CoursesParamsBodyEnrollmentTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *PostLearnAPIPublicV3CoursesParamsBodyEnrollment) validateType(formats strfmt.Registry) error {

	if swag.IsZero(o.Type) { // not required
		return nil
	}

	// value enum
	if err := o.validateTypeEnum("input"+"."+"enrollment"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostLearnAPIPublicV3CoursesParamsBodyEnrollment) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostLearnAPIPublicV3CoursesParamsBodyEnrollment) UnmarshalBinary(b []byte) error {
	var res PostLearnAPIPublicV3CoursesParamsBodyEnrollment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostLearnAPIPublicV3CoursesParamsBodyLocale Locale
//
// Settings controlling localization within the course.
swagger:model PostLearnAPIPublicV3CoursesParamsBodyLocale
*/
type PostLearnAPIPublicV3CoursesParamsBodyLocale struct {

	// Whether students are forced to use the course's specified locale.
	Force bool `json:"force,omitempty"`

	// The locale of this course.
	// Max Length: 20
	ID string `json:"id,omitempty"`
}

// Validate validates this post learn API public v3 courses params body locale
func (o *PostLearnAPIPublicV3CoursesParamsBodyLocale) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostLearnAPIPublicV3CoursesParamsBodyLocale) validateID(formats strfmt.Registry) error {

	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MaxLength("input"+"."+"locale"+"."+"id", "body", string(o.ID), 20); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostLearnAPIPublicV3CoursesParamsBodyLocale) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostLearnAPIPublicV3CoursesParamsBodyLocale) UnmarshalBinary(b []byte) error {
	var res PostLearnAPIPublicV3CoursesParamsBodyLocale
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
