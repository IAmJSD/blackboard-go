// Code generated by go-swagger; DO NOT EDIT.

package oauth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetLearnAPIPublicV1Oauth2AuthorizationcodeParams creates a new GetLearnAPIPublicV1Oauth2AuthorizationcodeParams object
// with the default values initialized.
func NewGetLearnAPIPublicV1Oauth2AuthorizationcodeParams() *GetLearnAPIPublicV1Oauth2AuthorizationcodeParams {
	var ()
	return &GetLearnAPIPublicV1Oauth2AuthorizationcodeParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetLearnAPIPublicV1Oauth2AuthorizationcodeParamsWithTimeout creates a new GetLearnAPIPublicV1Oauth2AuthorizationcodeParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetLearnAPIPublicV1Oauth2AuthorizationcodeParamsWithTimeout(timeout time.Duration) *GetLearnAPIPublicV1Oauth2AuthorizationcodeParams {
	var ()
	return &GetLearnAPIPublicV1Oauth2AuthorizationcodeParams{

		timeout: timeout,
	}
}

// NewGetLearnAPIPublicV1Oauth2AuthorizationcodeParamsWithContext creates a new GetLearnAPIPublicV1Oauth2AuthorizationcodeParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetLearnAPIPublicV1Oauth2AuthorizationcodeParamsWithContext(ctx context.Context) *GetLearnAPIPublicV1Oauth2AuthorizationcodeParams {
	var ()
	return &GetLearnAPIPublicV1Oauth2AuthorizationcodeParams{

		Context: ctx,
	}
}

// NewGetLearnAPIPublicV1Oauth2AuthorizationcodeParamsWithHTTPClient creates a new GetLearnAPIPublicV1Oauth2AuthorizationcodeParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetLearnAPIPublicV1Oauth2AuthorizationcodeParamsWithHTTPClient(client *http.Client) *GetLearnAPIPublicV1Oauth2AuthorizationcodeParams {
	var ()
	return &GetLearnAPIPublicV1Oauth2AuthorizationcodeParams{
		HTTPClient: client,
	}
}

/*GetLearnAPIPublicV1Oauth2AuthorizationcodeParams contains all the parameters to send to the API endpoint
for the get learn API public v1 oauth2 authorizationcode operation typically these are written to a http.Request
*/
type GetLearnAPIPublicV1Oauth2AuthorizationcodeParams struct {

	/*ClientID
	  Required. The client identifier for the registered application.

	*/
	ClientID *string
	/*CodeChallenge
	  A code challenge to verify credentials along with the granted authorization code. It is used with the PKCE standard.

	**Since**: 3700.4.0

	*/
	CodeChallenge *string
	/*CodeChallengeMethod
	  This is the method used to verify the code challenge using the PKCE standard. Blackboard only supports s256 as the code challenge method.

	**Since**: 3700.4.0

	*/
	CodeChallengeMethod *string
	/*RedirectURI
	  the redirectUri to send the end user to once an authorization code response is made in Oauth2 Authorization Code Workflow

	*/
	RedirectURI *string
	/*ResponseType
	  Required. The response_type expected which must to be set to "code"

	*/
	ResponseType *string
	/*Scope
	  the space delimited scope(s) being requested for this authorization. Example value: "read write offline"

	*/
	Scope *string
	/*State
	  Opaque value used by client to maintain state between request and callback. Used to prevent cross-site request forgery.

	*/
	State *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get learn API public v1 oauth2 authorizationcode params
func (o *GetLearnAPIPublicV1Oauth2AuthorizationcodeParams) WithTimeout(timeout time.Duration) *GetLearnAPIPublicV1Oauth2AuthorizationcodeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get learn API public v1 oauth2 authorizationcode params
func (o *GetLearnAPIPublicV1Oauth2AuthorizationcodeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get learn API public v1 oauth2 authorizationcode params
func (o *GetLearnAPIPublicV1Oauth2AuthorizationcodeParams) WithContext(ctx context.Context) *GetLearnAPIPublicV1Oauth2AuthorizationcodeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get learn API public v1 oauth2 authorizationcode params
func (o *GetLearnAPIPublicV1Oauth2AuthorizationcodeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get learn API public v1 oauth2 authorizationcode params
func (o *GetLearnAPIPublicV1Oauth2AuthorizationcodeParams) WithHTTPClient(client *http.Client) *GetLearnAPIPublicV1Oauth2AuthorizationcodeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get learn API public v1 oauth2 authorizationcode params
func (o *GetLearnAPIPublicV1Oauth2AuthorizationcodeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClientID adds the clientID to the get learn API public v1 oauth2 authorizationcode params
func (o *GetLearnAPIPublicV1Oauth2AuthorizationcodeParams) WithClientID(clientID *string) *GetLearnAPIPublicV1Oauth2AuthorizationcodeParams {
	o.SetClientID(clientID)
	return o
}

// SetClientID adds the clientId to the get learn API public v1 oauth2 authorizationcode params
func (o *GetLearnAPIPublicV1Oauth2AuthorizationcodeParams) SetClientID(clientID *string) {
	o.ClientID = clientID
}

// WithCodeChallenge adds the codeChallenge to the get learn API public v1 oauth2 authorizationcode params
func (o *GetLearnAPIPublicV1Oauth2AuthorizationcodeParams) WithCodeChallenge(codeChallenge *string) *GetLearnAPIPublicV1Oauth2AuthorizationcodeParams {
	o.SetCodeChallenge(codeChallenge)
	return o
}

// SetCodeChallenge adds the codeChallenge to the get learn API public v1 oauth2 authorizationcode params
func (o *GetLearnAPIPublicV1Oauth2AuthorizationcodeParams) SetCodeChallenge(codeChallenge *string) {
	o.CodeChallenge = codeChallenge
}

// WithCodeChallengeMethod adds the codeChallengeMethod to the get learn API public v1 oauth2 authorizationcode params
func (o *GetLearnAPIPublicV1Oauth2AuthorizationcodeParams) WithCodeChallengeMethod(codeChallengeMethod *string) *GetLearnAPIPublicV1Oauth2AuthorizationcodeParams {
	o.SetCodeChallengeMethod(codeChallengeMethod)
	return o
}

// SetCodeChallengeMethod adds the codeChallengeMethod to the get learn API public v1 oauth2 authorizationcode params
func (o *GetLearnAPIPublicV1Oauth2AuthorizationcodeParams) SetCodeChallengeMethod(codeChallengeMethod *string) {
	o.CodeChallengeMethod = codeChallengeMethod
}

// WithRedirectURI adds the redirectURI to the get learn API public v1 oauth2 authorizationcode params
func (o *GetLearnAPIPublicV1Oauth2AuthorizationcodeParams) WithRedirectURI(redirectURI *string) *GetLearnAPIPublicV1Oauth2AuthorizationcodeParams {
	o.SetRedirectURI(redirectURI)
	return o
}

// SetRedirectURI adds the redirectUri to the get learn API public v1 oauth2 authorizationcode params
func (o *GetLearnAPIPublicV1Oauth2AuthorizationcodeParams) SetRedirectURI(redirectURI *string) {
	o.RedirectURI = redirectURI
}

// WithResponseType adds the responseType to the get learn API public v1 oauth2 authorizationcode params
func (o *GetLearnAPIPublicV1Oauth2AuthorizationcodeParams) WithResponseType(responseType *string) *GetLearnAPIPublicV1Oauth2AuthorizationcodeParams {
	o.SetResponseType(responseType)
	return o
}

// SetResponseType adds the responseType to the get learn API public v1 oauth2 authorizationcode params
func (o *GetLearnAPIPublicV1Oauth2AuthorizationcodeParams) SetResponseType(responseType *string) {
	o.ResponseType = responseType
}

// WithScope adds the scope to the get learn API public v1 oauth2 authorizationcode params
func (o *GetLearnAPIPublicV1Oauth2AuthorizationcodeParams) WithScope(scope *string) *GetLearnAPIPublicV1Oauth2AuthorizationcodeParams {
	o.SetScope(scope)
	return o
}

// SetScope adds the scope to the get learn API public v1 oauth2 authorizationcode params
func (o *GetLearnAPIPublicV1Oauth2AuthorizationcodeParams) SetScope(scope *string) {
	o.Scope = scope
}

// WithState adds the state to the get learn API public v1 oauth2 authorizationcode params
func (o *GetLearnAPIPublicV1Oauth2AuthorizationcodeParams) WithState(state *string) *GetLearnAPIPublicV1Oauth2AuthorizationcodeParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the get learn API public v1 oauth2 authorizationcode params
func (o *GetLearnAPIPublicV1Oauth2AuthorizationcodeParams) SetState(state *string) {
	o.State = state
}

// WriteToRequest writes these params to a swagger request
func (o *GetLearnAPIPublicV1Oauth2AuthorizationcodeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ClientID != nil {

		// query param client_id
		var qrClientID string
		if o.ClientID != nil {
			qrClientID = *o.ClientID
		}
		qClientID := qrClientID
		if qClientID != "" {
			if err := r.SetQueryParam("client_id", qClientID); err != nil {
				return err
			}
		}

	}

	if o.CodeChallenge != nil {

		// query param code_challenge
		var qrCodeChallenge string
		if o.CodeChallenge != nil {
			qrCodeChallenge = *o.CodeChallenge
		}
		qCodeChallenge := qrCodeChallenge
		if qCodeChallenge != "" {
			if err := r.SetQueryParam("code_challenge", qCodeChallenge); err != nil {
				return err
			}
		}

	}

	if o.CodeChallengeMethod != nil {

		// query param code_challenge_method
		var qrCodeChallengeMethod string
		if o.CodeChallengeMethod != nil {
			qrCodeChallengeMethod = *o.CodeChallengeMethod
		}
		qCodeChallengeMethod := qrCodeChallengeMethod
		if qCodeChallengeMethod != "" {
			if err := r.SetQueryParam("code_challenge_method", qCodeChallengeMethod); err != nil {
				return err
			}
		}

	}

	if o.RedirectURI != nil {

		// query param redirect_uri
		var qrRedirectURI string
		if o.RedirectURI != nil {
			qrRedirectURI = *o.RedirectURI
		}
		qRedirectURI := qrRedirectURI
		if qRedirectURI != "" {
			if err := r.SetQueryParam("redirect_uri", qRedirectURI); err != nil {
				return err
			}
		}

	}

	if o.ResponseType != nil {

		// query param response_type
		var qrResponseType string
		if o.ResponseType != nil {
			qrResponseType = *o.ResponseType
		}
		qResponseType := qrResponseType
		if qResponseType != "" {
			if err := r.SetQueryParam("response_type", qResponseType); err != nil {
				return err
			}
		}

	}

	if o.Scope != nil {

		// query param scope
		var qrScope string
		if o.Scope != nil {
			qrScope = *o.Scope
		}
		qScope := qrScope
		if qScope != "" {
			if err := r.SetQueryParam("scope", qScope); err != nil {
				return err
			}
		}

	}

	if o.State != nil {

		// query param state
		var qrState string
		if o.State != nil {
			qrState = *o.State
		}
		qState := qrState
		if qState != "" {
			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
