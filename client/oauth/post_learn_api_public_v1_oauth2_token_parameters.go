// Code generated by go-swagger; DO NOT EDIT.

package oauth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPostLearnAPIPublicV1Oauth2TokenParams creates a new PostLearnAPIPublicV1Oauth2TokenParams object
// with the default values initialized.
func NewPostLearnAPIPublicV1Oauth2TokenParams() *PostLearnAPIPublicV1Oauth2TokenParams {
	var ()
	return &PostLearnAPIPublicV1Oauth2TokenParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostLearnAPIPublicV1Oauth2TokenParamsWithTimeout creates a new PostLearnAPIPublicV1Oauth2TokenParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostLearnAPIPublicV1Oauth2TokenParamsWithTimeout(timeout time.Duration) *PostLearnAPIPublicV1Oauth2TokenParams {
	var ()
	return &PostLearnAPIPublicV1Oauth2TokenParams{

		timeout: timeout,
	}
}

// NewPostLearnAPIPublicV1Oauth2TokenParamsWithContext creates a new PostLearnAPIPublicV1Oauth2TokenParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostLearnAPIPublicV1Oauth2TokenParamsWithContext(ctx context.Context) *PostLearnAPIPublicV1Oauth2TokenParams {
	var ()
	return &PostLearnAPIPublicV1Oauth2TokenParams{

		Context: ctx,
	}
}

// NewPostLearnAPIPublicV1Oauth2TokenParamsWithHTTPClient creates a new PostLearnAPIPublicV1Oauth2TokenParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostLearnAPIPublicV1Oauth2TokenParamsWithHTTPClient(client *http.Client) *PostLearnAPIPublicV1Oauth2TokenParams {
	var ()
	return &PostLearnAPIPublicV1Oauth2TokenParams{
		HTTPClient: client,
	}
}

/*PostLearnAPIPublicV1Oauth2TokenParams contains all the parameters to send to the API endpoint
for the post learn API public v1 oauth2 token operation typically these are written to a http.Request
*/
type PostLearnAPIPublicV1Oauth2TokenParams struct {

	/*Code
	  The authorization code granted by an end user for use by an application in Oauth2 Authorization Code Workflow

	*/
	Code *string
	/*CodeVerifier
	  The code_verifier to be passed along with authorization code if PKCE standard was used to grant the authorization code.

	**Since**: 3700.4.0

	*/
	CodeVerifier *string
	/*GrantType
	  The Grant Type. Acceptable values include: 'client_credentials', 'authorization_code' (since 3200.7.0), or 'refresh_token' (since 3200.7.0).

	*/
	GrantType *string
	/*RedirectURI
	  The redirectUri to send the end user to once an access token response is made in Oauth2 Authorization Code Workflow

	**Since**: 3200.7.0

	*/
	RedirectURI *string
	/*RefreshToken
	  The refresh token granted for use by an application in Oauth2 Refresh Token Workflow

	**Since**: 3200.7.0

	*/
	RefreshToken *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post learn API public v1 oauth2 token params
func (o *PostLearnAPIPublicV1Oauth2TokenParams) WithTimeout(timeout time.Duration) *PostLearnAPIPublicV1Oauth2TokenParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post learn API public v1 oauth2 token params
func (o *PostLearnAPIPublicV1Oauth2TokenParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post learn API public v1 oauth2 token params
func (o *PostLearnAPIPublicV1Oauth2TokenParams) WithContext(ctx context.Context) *PostLearnAPIPublicV1Oauth2TokenParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post learn API public v1 oauth2 token params
func (o *PostLearnAPIPublicV1Oauth2TokenParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post learn API public v1 oauth2 token params
func (o *PostLearnAPIPublicV1Oauth2TokenParams) WithHTTPClient(client *http.Client) *PostLearnAPIPublicV1Oauth2TokenParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post learn API public v1 oauth2 token params
func (o *PostLearnAPIPublicV1Oauth2TokenParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCode adds the code to the post learn API public v1 oauth2 token params
func (o *PostLearnAPIPublicV1Oauth2TokenParams) WithCode(code *string) *PostLearnAPIPublicV1Oauth2TokenParams {
	o.SetCode(code)
	return o
}

// SetCode adds the code to the post learn API public v1 oauth2 token params
func (o *PostLearnAPIPublicV1Oauth2TokenParams) SetCode(code *string) {
	o.Code = code
}

// WithCodeVerifier adds the codeVerifier to the post learn API public v1 oauth2 token params
func (o *PostLearnAPIPublicV1Oauth2TokenParams) WithCodeVerifier(codeVerifier *string) *PostLearnAPIPublicV1Oauth2TokenParams {
	o.SetCodeVerifier(codeVerifier)
	return o
}

// SetCodeVerifier adds the codeVerifier to the post learn API public v1 oauth2 token params
func (o *PostLearnAPIPublicV1Oauth2TokenParams) SetCodeVerifier(codeVerifier *string) {
	o.CodeVerifier = codeVerifier
}

// WithGrantType adds the grantType to the post learn API public v1 oauth2 token params
func (o *PostLearnAPIPublicV1Oauth2TokenParams) WithGrantType(grantType *string) *PostLearnAPIPublicV1Oauth2TokenParams {
	o.SetGrantType(grantType)
	return o
}

// SetGrantType adds the grantType to the post learn API public v1 oauth2 token params
func (o *PostLearnAPIPublicV1Oauth2TokenParams) SetGrantType(grantType *string) {
	o.GrantType = grantType
}

// WithRedirectURI adds the redirectURI to the post learn API public v1 oauth2 token params
func (o *PostLearnAPIPublicV1Oauth2TokenParams) WithRedirectURI(redirectURI *string) *PostLearnAPIPublicV1Oauth2TokenParams {
	o.SetRedirectURI(redirectURI)
	return o
}

// SetRedirectURI adds the redirectUri to the post learn API public v1 oauth2 token params
func (o *PostLearnAPIPublicV1Oauth2TokenParams) SetRedirectURI(redirectURI *string) {
	o.RedirectURI = redirectURI
}

// WithRefreshToken adds the refreshToken to the post learn API public v1 oauth2 token params
func (o *PostLearnAPIPublicV1Oauth2TokenParams) WithRefreshToken(refreshToken *string) *PostLearnAPIPublicV1Oauth2TokenParams {
	o.SetRefreshToken(refreshToken)
	return o
}

// SetRefreshToken adds the refreshToken to the post learn API public v1 oauth2 token params
func (o *PostLearnAPIPublicV1Oauth2TokenParams) SetRefreshToken(refreshToken *string) {
	o.RefreshToken = refreshToken
}

// WriteToRequest writes these params to a swagger request
func (o *PostLearnAPIPublicV1Oauth2TokenParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Code != nil {

		// query param code
		var qrCode string
		if o.Code != nil {
			qrCode = *o.Code
		}
		qCode := qrCode
		if qCode != "" {
			if err := r.SetQueryParam("code", qCode); err != nil {
				return err
			}
		}

	}

	if o.CodeVerifier != nil {

		// query param code_verifier
		var qrCodeVerifier string
		if o.CodeVerifier != nil {
			qrCodeVerifier = *o.CodeVerifier
		}
		qCodeVerifier := qrCodeVerifier
		if qCodeVerifier != "" {
			if err := r.SetQueryParam("code_verifier", qCodeVerifier); err != nil {
				return err
			}
		}

	}

	if o.GrantType != nil {

		// query param grant_type
		var qrGrantType string
		if o.GrantType != nil {
			qrGrantType = *o.GrantType
		}
		qGrantType := qrGrantType
		if qGrantType != "" {
			if err := r.SetQueryParam("grant_type", qGrantType); err != nil {
				return err
			}
		}

	}

	if o.RedirectURI != nil {

		// query param redirect_uri
		var qrRedirectURI string
		if o.RedirectURI != nil {
			qrRedirectURI = *o.RedirectURI
		}
		qRedirectURI := qrRedirectURI
		if qRedirectURI != "" {
			if err := r.SetQueryParam("redirect_uri", qRedirectURI); err != nil {
				return err
			}
		}

	}

	if o.RefreshToken != nil {

		// query param refresh_token
		var qrRefreshToken string
		if o.RefreshToken != nil {
			qrRefreshToken = *o.RefreshToken
		}
		qRefreshToken := qrRefreshToken
		if qRefreshToken != "" {
			if err := r.SetQueryParam("refresh_token", qRefreshToken); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
