// Code generated by go-swagger; DO NOT EDIT.

package course_assessments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new course assessments API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for course assessments API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionID(params *DeleteLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDNoContent, error)

	GetLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestions(params *GetLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsOK, error)

	GetLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionID(params *GetLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDOK, error)

	PatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionID(params *PatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDOK, error)

	PostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestions(params *PostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsParams, authInfo runtime.ClientAuthInfoWriter) (*PostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionID deletes question

  Delete a question, specified by Id, from an Ultra Assessment.

The 'course.assessment.DELETE' entitlement is needed to perform the operation.

**Since**: 3300.9.0
*/
func (a *Client) DeleteLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionID(params *DeleteLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionID",
		Method:             "DELETE",
		PathPattern:        "/learn/api/public/v1/courses/{courseId}/assessments/{assessmentId}/questions/{questionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestions gets questions

  Get the list of questions for an Ultra Assessment.

Either 'course.assessment.CREATE' or 'course.assessment.MODIFY' entitlement is needed to view questions. If the assessment has the external submissions setting enabled, then either the 'course.assessment.VIEW' or 'course.assessment.EXECUTE' entitlement is needed to view questions, and only presentation questions are returned.

**Since**: 3300.9.0
*/
func (a *Client) GetLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestions(params *GetLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestions",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v1/courses/{courseId}/assessments/{assessmentId}/questions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionID gets question by Id

  Get a question by Id from an Ultra Assessment.

Either 'course.assessment.CREATE' or 'course.assessment.MODIFY' entitlement is needed to view a question.

**Since**: 3300.9.0
*/
func (a *Client) GetLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionID(params *GetLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionID",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v1/courses/{courseId}/assessments/{assessmentId}/questions/{questionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionID updates question

  Update a question, specified by Id, from an Ultra Assessment.

The 'course.assessment.MODIFY' entitlement is needed to perform the operation.

**Since**: 3300.9.0
*/
func (a *Client) PatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionID(params *PatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionID",
		Method:             "PATCH",
		PathPattern:        "/learn/api/public/v1/courses/{courseId}/assessments/{assessmentId}/questions/{questionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestions creates question

  Creates a question for an Ultra Assessment.

The 'course.assessment.MODIFY' entitlement is needed to create a question.

**Since**: 3300.9.0
*/
func (a *Client) PostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestions(params *PostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsParams, authInfo runtime.ClientAuthInfoWriter) (*PostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestions",
		Method:             "POST",
		PathPattern:        "/learn/api/public/v1/courses/{courseId}/assessments/{assessmentId}/questions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
