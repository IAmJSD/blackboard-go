// Code generated by go-swagger; DO NOT EDIT.

package course_assessments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/jakemakesstuff/blackboard-go/models"
)

// PostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsReader is a Reader for the PostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestions structure.
type PostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewPostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsCreated creates a PostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsCreated with default headers values
func NewPostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsCreated() *PostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsCreated {
	return &PostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsCreated{}
}

/*PostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsCreated handles this case with default header values.

Created
*/
type PostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsCreated struct {
	Payload *models.Question
}

func (o *PostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsCreated) Error() string {
	return fmt.Sprintf("[POST /learn/api/public/v1/courses/{courseId}/assessments/{assessmentId}/questions][%d] postLearnApiPublicV1CoursesCourseIdAssessmentsAssessmentIdQuestionsCreated  %+v", 201, o.Payload)
}

func (o *PostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsCreated) GetPayload() *models.Question {
	return o.Payload
}

func (o *PostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Question)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsBadRequest creates a PostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsBadRequest with default headers values
func NewPostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsBadRequest() *PostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsBadRequest {
	return &PostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsBadRequest{}
}

/*PostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsBadRequest handles this case with default header values.

The request did not specify valid data
*/
type PostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsBadRequest struct {
	Payload *models.RestException
}

func (o *PostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsBadRequest) Error() string {
	return fmt.Sprintf("[POST /learn/api/public/v1/courses/{courseId}/assessments/{assessmentId}/questions][%d] postLearnApiPublicV1CoursesCourseIdAssessmentsAssessmentIdQuestionsBadRequest  %+v", 400, o.Payload)
}

func (o *PostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsBadRequest) GetPayload() *models.RestException {
	return o.Payload
}

func (o *PostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsForbidden creates a PostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsForbidden with default headers values
func NewPostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsForbidden() *PostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsForbidden {
	return &PostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsForbidden{}
}

/*PostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsForbidden handles this case with default header values.

The user does not have entitlements to create questions
*/
type PostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsForbidden struct {
	Payload *models.RestException
}

func (o *PostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsForbidden) Error() string {
	return fmt.Sprintf("[POST /learn/api/public/v1/courses/{courseId}/assessments/{assessmentId}/questions][%d] postLearnApiPublicV1CoursesCourseIdAssessmentsAssessmentIdQuestionsForbidden  %+v", 403, o.Payload)
}

func (o *PostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsForbidden) GetPayload() *models.RestException {
	return o.Payload
}

func (o *PostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsConflict creates a PostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsConflict with default headers values
func NewPostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsConflict() *PostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsConflict {
	return &PostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsConflict{}
}

/*PostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsConflict handles this case with default header values.

The question can not be created because it conflicts with other data
*/
type PostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsConflict struct {
	Payload *models.RestException
}

func (o *PostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsConflict) Error() string {
	return fmt.Sprintf("[POST /learn/api/public/v1/courses/{courseId}/assessments/{assessmentId}/questions][%d] postLearnApiPublicV1CoursesCourseIdAssessmentsAssessmentIdQuestionsConflict  %+v", 409, o.Payload)
}

func (o *PostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsConflict) GetPayload() *models.RestException {
	return o.Payload
}

func (o *PostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsBody post learn API public v1 courses course ID assessments assessment ID questions body
swagger:model PostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsBody
*/
type PostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsBody struct {

	// Feedback displayed to students when their submitted response is correct.
	CorrectResponseFeedback string `json:"correctResponseFeedback,omitempty"`

	// Feedback displayed to students when their submitted response is incorrect.
	IncorrectResponseFeedback string `json:"incorrectResponseFeedback,omitempty"`

	// Text added to the question as a note for the instructor. It is not intended to be displayed to students.
	InstructorNotes string `json:"instructorNotes,omitempty"`

	// The point value for the question.
	Points float64 `json:"points,omitempty"`

	// Position of the Question on the Assessment Canvas.
	Position int32 `json:"position,omitempty"`

	// question handler
	QuestionHandler *models.QuestionHandler `json:"questionHandler,omitempty"`

	// The main text content for the question. It may include plain and formatted text, and all kinds of content supported by the full text editor.
	// Required: true
	Text *string `json:"text"`

	// The title of the question.
	Title string `json:"title,omitempty"`
}

// Validate validates this post learn API public v1 courses course ID assessments assessment ID questions body
func (o *PostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateQuestionHandler(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateText(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsBody) validateQuestionHandler(formats strfmt.Registry) error {

	if swag.IsZero(o.QuestionHandler) { // not required
		return nil
	}

	if o.QuestionHandler != nil {
		if err := o.QuestionHandler.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("input" + "." + "questionHandler")
			}
			return err
		}
	}

	return nil
}

func (o *PostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsBody) validateText(formats strfmt.Registry) error {

	if err := validate.Required("input"+"."+"text", "body", o.Text); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsBody) UnmarshalBinary(b []byte) error {
	var res PostLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
