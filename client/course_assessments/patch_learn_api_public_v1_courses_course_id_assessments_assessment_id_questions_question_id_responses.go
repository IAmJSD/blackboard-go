// Code generated by go-swagger; DO NOT EDIT.

package course_assessments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/jakemakesstuff/blackboard-go/models"
)

// PatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDReader is a Reader for the PatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionID structure.
type PatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDOK creates a PatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDOK with default headers values
func NewPatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDOK() *PatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDOK {
	return &PatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDOK{}
}

/*PatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDOK handles this case with default header values.

OK
*/
type PatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDOK struct {
	Payload *models.Question
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDOK) Error() string {
	return fmt.Sprintf("[PATCH /learn/api/public/v1/courses/{courseId}/assessments/{assessmentId}/questions/{questionId}][%d] patchLearnApiPublicV1CoursesCourseIdAssessmentsAssessmentIdQuestionsQuestionIdOK  %+v", 200, o.Payload)
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDOK) GetPayload() *models.Question {
	return o.Payload
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Question)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDBadRequest creates a PatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDBadRequest with default headers values
func NewPatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDBadRequest() *PatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDBadRequest {
	return &PatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDBadRequest{}
}

/*PatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDBadRequest handles this case with default header values.

Bad Request
*/
type PatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDBadRequest struct {
	Payload *models.RestException
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /learn/api/public/v1/courses/{courseId}/assessments/{assessmentId}/questions/{questionId}][%d] patchLearnApiPublicV1CoursesCourseIdAssessmentsAssessmentIdQuestionsQuestionIdBadRequest  %+v", 400, o.Payload)
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDBadRequest) GetPayload() *models.RestException {
	return o.Payload
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDForbidden creates a PatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDForbidden with default headers values
func NewPatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDForbidden() *PatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDForbidden {
	return &PatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDForbidden{}
}

/*PatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDForbidden handles this case with default header values.

Forbidden
*/
type PatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDForbidden struct {
	Payload *models.RestException
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDForbidden) Error() string {
	return fmt.Sprintf("[PATCH /learn/api/public/v1/courses/{courseId}/assessments/{assessmentId}/questions/{questionId}][%d] patchLearnApiPublicV1CoursesCourseIdAssessmentsAssessmentIdQuestionsQuestionIdForbidden  %+v", 403, o.Payload)
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDForbidden) GetPayload() *models.RestException {
	return o.Payload
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDNotFound creates a PatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDNotFound with default headers values
func NewPatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDNotFound() *PatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDNotFound {
	return &PatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDNotFound{}
}

/*PatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDNotFound handles this case with default header values.

Not Found
*/
type PatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDNotFound struct {
	Payload *models.RestException
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /learn/api/public/v1/courses/{courseId}/assessments/{assessmentId}/questions/{questionId}][%d] patchLearnApiPublicV1CoursesCourseIdAssessmentsAssessmentIdQuestionsQuestionIdNotFound  %+v", 404, o.Payload)
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDNotFound) GetPayload() *models.RestException {
	return o.Payload
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDBody patch learn API public v1 courses course ID assessments assessment ID questions question ID body
swagger:model PatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDBody
*/
type PatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDBody struct {

	// Feedback displayed to students when their submitted response is correct.
	CorrectResponseFeedback string `json:"correctResponseFeedback,omitempty"`

	// Feedback displayed to students when their submitted response is incorrect.
	IncorrectResponseFeedback string `json:"incorrectResponseFeedback,omitempty"`

	// Text added to the question as a note for the instructor. It is not intended to be displayed to students.
	InstructorNotes string `json:"instructorNotes,omitempty"`

	// The point value for the question.
	Points float64 `json:"points,omitempty"`

	// Position of the Question on the Assessment Canvas.
	Position int32 `json:"position,omitempty"`

	// question handler
	QuestionHandler *models.QuestionHandler `json:"questionHandler,omitempty"`

	// The main text content for the question. It may include plain and formatted text, and all kinds of content supported by the full text editor.
	Text string `json:"text,omitempty"`

	// The title of the question.
	Title string `json:"title,omitempty"`
}

// Validate validates this patch learn API public v1 courses course ID assessments assessment ID questions question ID body
func (o *PatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateQuestionHandler(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDBody) validateQuestionHandler(formats strfmt.Registry) error {

	if swag.IsZero(o.QuestionHandler) { // not required
		return nil
	}

	if o.QuestionHandler != nil {
		if err := o.QuestionHandler.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("input" + "." + "questionHandler")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDBody) UnmarshalBinary(b []byte) error {
	var res PatchLearnAPIPublicV1CoursesCourseIDAssessmentsAssessmentIDQuestionsQuestionIDBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
