// Code generated by go-swagger; DO NOT EDIT.

package terms

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/jakemakesstuff/blackboard-go/models"
)

// GetLearnAPIPublicV1TermsTermIDReader is a Reader for the GetLearnAPIPublicV1TermsTermID structure.
type GetLearnAPIPublicV1TermsTermIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLearnAPIPublicV1TermsTermIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetLearnAPIPublicV1TermsTermIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetLearnAPIPublicV1TermsTermIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetLearnAPIPublicV1TermsTermIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetLearnAPIPublicV1TermsTermIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetLearnAPIPublicV1TermsTermIDOK creates a GetLearnAPIPublicV1TermsTermIDOK with default headers values
func NewGetLearnAPIPublicV1TermsTermIDOK() *GetLearnAPIPublicV1TermsTermIDOK {
	return &GetLearnAPIPublicV1TermsTermIDOK{}
}

/*GetLearnAPIPublicV1TermsTermIDOK handles this case with default header values.

OK
*/
type GetLearnAPIPublicV1TermsTermIDOK struct {
	Payload *models.Term
}

func (o *GetLearnAPIPublicV1TermsTermIDOK) Error() string {
	return fmt.Sprintf("[GET /learn/api/public/v1/terms/{termId}][%d] getLearnApiPublicV1TermsTermIdOK  %+v", 200, o.Payload)
}

func (o *GetLearnAPIPublicV1TermsTermIDOK) GetPayload() *models.Term {
	return o.Payload
}

func (o *GetLearnAPIPublicV1TermsTermIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Term)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLearnAPIPublicV1TermsTermIDBadRequest creates a GetLearnAPIPublicV1TermsTermIDBadRequest with default headers values
func NewGetLearnAPIPublicV1TermsTermIDBadRequest() *GetLearnAPIPublicV1TermsTermIDBadRequest {
	return &GetLearnAPIPublicV1TermsTermIDBadRequest{}
}

/*GetLearnAPIPublicV1TermsTermIDBadRequest handles this case with default header values.

Bad Request
*/
type GetLearnAPIPublicV1TermsTermIDBadRequest struct {
	Payload *models.RestException
}

func (o *GetLearnAPIPublicV1TermsTermIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /learn/api/public/v1/terms/{termId}][%d] getLearnApiPublicV1TermsTermIdBadRequest  %+v", 400, o.Payload)
}

func (o *GetLearnAPIPublicV1TermsTermIDBadRequest) GetPayload() *models.RestException {
	return o.Payload
}

func (o *GetLearnAPIPublicV1TermsTermIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLearnAPIPublicV1TermsTermIDForbidden creates a GetLearnAPIPublicV1TermsTermIDForbidden with default headers values
func NewGetLearnAPIPublicV1TermsTermIDForbidden() *GetLearnAPIPublicV1TermsTermIDForbidden {
	return &GetLearnAPIPublicV1TermsTermIDForbidden{}
}

/*GetLearnAPIPublicV1TermsTermIDForbidden handles this case with default header values.

Forbidden
*/
type GetLearnAPIPublicV1TermsTermIDForbidden struct {
	Payload *models.RestException
}

func (o *GetLearnAPIPublicV1TermsTermIDForbidden) Error() string {
	return fmt.Sprintf("[GET /learn/api/public/v1/terms/{termId}][%d] getLearnApiPublicV1TermsTermIdForbidden  %+v", 403, o.Payload)
}

func (o *GetLearnAPIPublicV1TermsTermIDForbidden) GetPayload() *models.RestException {
	return o.Payload
}

func (o *GetLearnAPIPublicV1TermsTermIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLearnAPIPublicV1TermsTermIDNotFound creates a GetLearnAPIPublicV1TermsTermIDNotFound with default headers values
func NewGetLearnAPIPublicV1TermsTermIDNotFound() *GetLearnAPIPublicV1TermsTermIDNotFound {
	return &GetLearnAPIPublicV1TermsTermIDNotFound{}
}

/*GetLearnAPIPublicV1TermsTermIDNotFound handles this case with default header values.

Not Found
*/
type GetLearnAPIPublicV1TermsTermIDNotFound struct {
	Payload *models.RestException
}

func (o *GetLearnAPIPublicV1TermsTermIDNotFound) Error() string {
	return fmt.Sprintf("[GET /learn/api/public/v1/terms/{termId}][%d] getLearnApiPublicV1TermsTermIdNotFound  %+v", 404, o.Payload)
}

func (o *GetLearnAPIPublicV1TermsTermIDNotFound) GetPayload() *models.RestException {
	return o.Payload
}

func (o *GetLearnAPIPublicV1TermsTermIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
