// Code generated by go-swagger; DO NOT EDIT.

package terms

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new terms API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for terms API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteLearnAPIPublicV1TermsTermID(params *DeleteLearnAPIPublicV1TermsTermIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLearnAPIPublicV1TermsTermIDNoContent, error)

	GetLearnAPIPublicV1Terms(params *GetLearnAPIPublicV1TermsParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1TermsOK, error)

	GetLearnAPIPublicV1TermsTermID(params *GetLearnAPIPublicV1TermsTermIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1TermsTermIDOK, error)

	PatchLearnAPIPublicV1TermsTermID(params *PatchLearnAPIPublicV1TermsTermIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchLearnAPIPublicV1TermsTermIDOK, error)

	PostLearnAPIPublicV1Terms(params *PostLearnAPIPublicV1TermsParams, authInfo runtime.ClientAuthInfoWriter) (*PostLearnAPIPublicV1TermsCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteLearnAPIPublicV1TermsTermID deletes term

  Deletes a term.

The 'system.term.MODIFY' entitlement is needed.

**Since**: 2015.11.0
*/
func (a *Client) DeleteLearnAPIPublicV1TermsTermID(params *DeleteLearnAPIPublicV1TermsTermIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLearnAPIPublicV1TermsTermIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLearnAPIPublicV1TermsTermIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLearnAPIPublicV1TermsTermID",
		Method:             "DELETE",
		PathPattern:        "/learn/api/public/v1/terms/{termId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteLearnAPIPublicV1TermsTermIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLearnAPIPublicV1TermsTermIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLearnAPIPublicV1TermsTermID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnAPIPublicV1Terms gets terms

  Returns a list of terms.

At least one of the entitlements 'system.term.VIEW' or 'system.term.MODIFY' are needed.

**Since**: 3000.1.0
*/
func (a *Client) GetLearnAPIPublicV1Terms(params *GetLearnAPIPublicV1TermsParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1TermsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV1TermsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV1Terms",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v1/terms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV1TermsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV1TermsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV1Terms: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnAPIPublicV1TermsTermID gets term

  Loads a term.

The caller must be enrolled in a course contained within the term, or must have at least one of the entitlements 'system.term.VIEW' or 'system.term.MODIFY'.

**Since**: 2015.11.0
*/
func (a *Client) GetLearnAPIPublicV1TermsTermID(params *GetLearnAPIPublicV1TermsTermIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1TermsTermIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV1TermsTermIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV1TermsTermID",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v1/terms/{termId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV1TermsTermIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV1TermsTermIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV1TermsTermID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchLearnAPIPublicV1TermsTermID updates term

  Updates a term.

The 'system.term.MODIFY' entitlement is needed.

**Since**: 2015.11.0
*/
func (a *Client) PatchLearnAPIPublicV1TermsTermID(params *PatchLearnAPIPublicV1TermsTermIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchLearnAPIPublicV1TermsTermIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchLearnAPIPublicV1TermsTermIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchLearnAPIPublicV1TermsTermID",
		Method:             "PATCH",
		PathPattern:        "/learn/api/public/v1/terms/{termId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchLearnAPIPublicV1TermsTermIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchLearnAPIPublicV1TermsTermIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchLearnAPIPublicV1TermsTermID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostLearnAPIPublicV1Terms creates term

  Creates a term.

The 'system.term.MODIFY' entitlement is needed.

**Since**: 2015.11.0
*/
func (a *Client) PostLearnAPIPublicV1Terms(params *PostLearnAPIPublicV1TermsParams, authInfo runtime.ClientAuthInfoWriter) (*PostLearnAPIPublicV1TermsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLearnAPIPublicV1TermsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLearnAPIPublicV1Terms",
		Method:             "POST",
		PathPattern:        "/learn/api/public/v1/terms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostLearnAPIPublicV1TermsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLearnAPIPublicV1TermsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLearnAPIPublicV1Terms: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
