// Code generated by go-swagger; DO NOT EDIT.

package terms

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/jakemakesstuff/blackboard-go/models"
)

// PostLearnAPIPublicV1TermsReader is a Reader for the PostLearnAPIPublicV1Terms structure.
type PostLearnAPIPublicV1TermsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostLearnAPIPublicV1TermsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewPostLearnAPIPublicV1TermsCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostLearnAPIPublicV1TermsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostLearnAPIPublicV1TermsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPostLearnAPIPublicV1TermsConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostLearnAPIPublicV1TermsCreated creates a PostLearnAPIPublicV1TermsCreated with default headers values
func NewPostLearnAPIPublicV1TermsCreated() *PostLearnAPIPublicV1TermsCreated {
	return &PostLearnAPIPublicV1TermsCreated{}
}

/*PostLearnAPIPublicV1TermsCreated handles this case with default header values.

Created
*/
type PostLearnAPIPublicV1TermsCreated struct {
	Payload *models.Term
}

func (o *PostLearnAPIPublicV1TermsCreated) Error() string {
	return fmt.Sprintf("[POST /learn/api/public/v1/terms][%d] postLearnApiPublicV1TermsCreated  %+v", 201, o.Payload)
}

func (o *PostLearnAPIPublicV1TermsCreated) GetPayload() *models.Term {
	return o.Payload
}

func (o *PostLearnAPIPublicV1TermsCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Term)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostLearnAPIPublicV1TermsBadRequest creates a PostLearnAPIPublicV1TermsBadRequest with default headers values
func NewPostLearnAPIPublicV1TermsBadRequest() *PostLearnAPIPublicV1TermsBadRequest {
	return &PostLearnAPIPublicV1TermsBadRequest{}
}

/*PostLearnAPIPublicV1TermsBadRequest handles this case with default header values.

Bad Request
*/
type PostLearnAPIPublicV1TermsBadRequest struct {
	Payload *models.RestException
}

func (o *PostLearnAPIPublicV1TermsBadRequest) Error() string {
	return fmt.Sprintf("[POST /learn/api/public/v1/terms][%d] postLearnApiPublicV1TermsBadRequest  %+v", 400, o.Payload)
}

func (o *PostLearnAPIPublicV1TermsBadRequest) GetPayload() *models.RestException {
	return o.Payload
}

func (o *PostLearnAPIPublicV1TermsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostLearnAPIPublicV1TermsForbidden creates a PostLearnAPIPublicV1TermsForbidden with default headers values
func NewPostLearnAPIPublicV1TermsForbidden() *PostLearnAPIPublicV1TermsForbidden {
	return &PostLearnAPIPublicV1TermsForbidden{}
}

/*PostLearnAPIPublicV1TermsForbidden handles this case with default header values.

Forbidden
*/
type PostLearnAPIPublicV1TermsForbidden struct {
	Payload *models.RestException
}

func (o *PostLearnAPIPublicV1TermsForbidden) Error() string {
	return fmt.Sprintf("[POST /learn/api/public/v1/terms][%d] postLearnApiPublicV1TermsForbidden  %+v", 403, o.Payload)
}

func (o *PostLearnAPIPublicV1TermsForbidden) GetPayload() *models.RestException {
	return o.Payload
}

func (o *PostLearnAPIPublicV1TermsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostLearnAPIPublicV1TermsConflict creates a PostLearnAPIPublicV1TermsConflict with default headers values
func NewPostLearnAPIPublicV1TermsConflict() *PostLearnAPIPublicV1TermsConflict {
	return &PostLearnAPIPublicV1TermsConflict{}
}

/*PostLearnAPIPublicV1TermsConflict handles this case with default header values.

Conflict
*/
type PostLearnAPIPublicV1TermsConflict struct {
	Payload *models.RestException
}

func (o *PostLearnAPIPublicV1TermsConflict) Error() string {
	return fmt.Sprintf("[POST /learn/api/public/v1/terms][%d] postLearnApiPublicV1TermsConflict  %+v", 409, o.Payload)
}

func (o *PostLearnAPIPublicV1TermsConflict) GetPayload() *models.RestException {
	return o.Payload
}

func (o *PostLearnAPIPublicV1TermsConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PostLearnAPIPublicV1TermsBody post learn API public v1 terms body
swagger:model PostLearnAPIPublicV1TermsBody
*/
type PostLearnAPIPublicV1TermsBody struct {

	// availability
	Availability *PostLearnAPIPublicV1TermsParamsBodyAvailability `json:"availability,omitempty"`

	// The ID of the data source associated with this term.  This may optionally be the data source's externalId using the syntax "externalId:math101".
	DataSourceID string `json:"dataSourceId,omitempty"`

	// The description of the term. This field supports BbML; see <a target='_blank' href='https://docs.blackboard.com/learn/REST/Blackboard%20Markup%20Language%20-%20BbML.html'>here</a> for more information.
	Description string `json:"description,omitempty"`

	// An externally-defined unique ID for the term.
	//
	// Formerly known as 'sourcedidId'.
	// Required: true
	// Max Length: 256
	ExternalID *string `json:"externalId"`

	// The name of the term.
	// Required: true
	// Max Length: 333
	Name *string `json:"name"`
}

// Validate validates this post learn API public v1 terms body
func (o *PostLearnAPIPublicV1TermsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAvailability(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExternalID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostLearnAPIPublicV1TermsBody) validateAvailability(formats strfmt.Registry) error {

	if swag.IsZero(o.Availability) { // not required
		return nil
	}

	if o.Availability != nil {
		if err := o.Availability.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("input" + "." + "availability")
			}
			return err
		}
	}

	return nil
}

func (o *PostLearnAPIPublicV1TermsBody) validateExternalID(formats strfmt.Registry) error {

	if err := validate.Required("input"+"."+"externalId", "body", o.ExternalID); err != nil {
		return err
	}

	if err := validate.MaxLength("input"+"."+"externalId", "body", string(*o.ExternalID), 256); err != nil {
		return err
	}

	return nil
}

func (o *PostLearnAPIPublicV1TermsBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("input"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	if err := validate.MaxLength("input"+"."+"name", "body", string(*o.Name), 333); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostLearnAPIPublicV1TermsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostLearnAPIPublicV1TermsBody) UnmarshalBinary(b []byte) error {
	var res PostLearnAPIPublicV1TermsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostLearnAPIPublicV1TermsParamsBodyAvailability Availability
//
// Settings controlling availability of the term to students.
swagger:model PostLearnAPIPublicV1TermsParamsBodyAvailability
*/
type PostLearnAPIPublicV1TermsParamsBodyAvailability struct {

	// Whether the term and the courses it contains are available to students.  Instructors can always access their courses.
	//
	//
	// | Type      | Description
	//  | --------- | --------- |
	// | Yes | Students may access the term and the courses it contains. |
	// | No | Students may not access the term or the courses it contains. |
	//
	// Enum: [Yes No]
	Available string `json:"available,omitempty"`

	// duration
	Duration *PostLearnAPIPublicV1TermsParamsBodyAvailabilityDuration `json:"duration,omitempty"`
}

// Validate validates this post learn API public v1 terms params body availability
func (o *PostLearnAPIPublicV1TermsParamsBodyAvailability) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAvailable(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDuration(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var postLearnApiPublicV1TermsParamsBodyAvailabilityTypeAvailablePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Yes","No"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postLearnApiPublicV1TermsParamsBodyAvailabilityTypeAvailablePropEnum = append(postLearnApiPublicV1TermsParamsBodyAvailabilityTypeAvailablePropEnum, v)
	}
}

const (

	// PostLearnAPIPublicV1TermsParamsBodyAvailabilityAvailableYes captures enum value "Yes"
	PostLearnAPIPublicV1TermsParamsBodyAvailabilityAvailableYes string = "Yes"

	// PostLearnAPIPublicV1TermsParamsBodyAvailabilityAvailableNo captures enum value "No"
	PostLearnAPIPublicV1TermsParamsBodyAvailabilityAvailableNo string = "No"
)

// prop value enum
func (o *PostLearnAPIPublicV1TermsParamsBodyAvailability) validateAvailableEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, postLearnApiPublicV1TermsParamsBodyAvailabilityTypeAvailablePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *PostLearnAPIPublicV1TermsParamsBodyAvailability) validateAvailable(formats strfmt.Registry) error {

	if swag.IsZero(o.Available) { // not required
		return nil
	}

	// value enum
	if err := o.validateAvailableEnum("input"+"."+"availability"+"."+"available", "body", o.Available); err != nil {
		return err
	}

	return nil
}

func (o *PostLearnAPIPublicV1TermsParamsBodyAvailability) validateDuration(formats strfmt.Registry) error {

	if swag.IsZero(o.Duration) { // not required
		return nil
	}

	if o.Duration != nil {
		if err := o.Duration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("input" + "." + "availability" + "." + "duration")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostLearnAPIPublicV1TermsParamsBodyAvailability) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostLearnAPIPublicV1TermsParamsBodyAvailability) UnmarshalBinary(b []byte) error {
	var res PostLearnAPIPublicV1TermsParamsBodyAvailability
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostLearnAPIPublicV1TermsParamsBodyAvailabilityDuration Duration
//
// Settings controlling the length of time the term is available.
swagger:model PostLearnAPIPublicV1TermsParamsBodyAvailabilityDuration
*/
type PostLearnAPIPublicV1TermsParamsBodyAvailabilityDuration struct {

	// The number of days courses within this term can be used.  May only be set if availability.duration.type is FixedNumDays.
	DaysOfUse int32 `json:"daysOfUse,omitempty"`

	// The date this term ends.  May only be set if availability.duration.type is DateRange.
	// Format: date-time
	End strfmt.DateTime `json:"end,omitempty"`

	// The date this term starts.  May only be set if availability.duration.type is DateRange.
	// Format: date-time
	Start strfmt.DateTime `json:"start,omitempty"`

	// The intended length of the term.  Possible values are:
	//
	//
	// | Type      | Description
	//  | --------- | --------- |
	// | Continuous | The term is active on an ongoing basis. This is the default. |
	// | DateRange | The term will only be available between specific date ranges. |
	// | FixedNumDays | The term will only be available for a set number of days. |
	//
	// Enum: [Continuous DateRange FixedNumDays]
	Type string `json:"type,omitempty"`
}

// Validate validates this post learn API public v1 terms params body availability duration
func (o *PostLearnAPIPublicV1TermsParamsBodyAvailabilityDuration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStart(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostLearnAPIPublicV1TermsParamsBodyAvailabilityDuration) validateEnd(formats strfmt.Registry) error {

	if swag.IsZero(o.End) { // not required
		return nil
	}

	if err := validate.FormatOf("input"+"."+"availability"+"."+"duration"+"."+"end", "body", "date-time", o.End.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *PostLearnAPIPublicV1TermsParamsBodyAvailabilityDuration) validateStart(formats strfmt.Registry) error {

	if swag.IsZero(o.Start) { // not required
		return nil
	}

	if err := validate.FormatOf("input"+"."+"availability"+"."+"duration"+"."+"start", "body", "date-time", o.Start.String(), formats); err != nil {
		return err
	}

	return nil
}

var postLearnApiPublicV1TermsParamsBodyAvailabilityDurationTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Continuous","DateRange","FixedNumDays"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postLearnApiPublicV1TermsParamsBodyAvailabilityDurationTypeTypePropEnum = append(postLearnApiPublicV1TermsParamsBodyAvailabilityDurationTypeTypePropEnum, v)
	}
}

const (

	// PostLearnAPIPublicV1TermsParamsBodyAvailabilityDurationTypeContinuous captures enum value "Continuous"
	PostLearnAPIPublicV1TermsParamsBodyAvailabilityDurationTypeContinuous string = "Continuous"

	// PostLearnAPIPublicV1TermsParamsBodyAvailabilityDurationTypeDateRange captures enum value "DateRange"
	PostLearnAPIPublicV1TermsParamsBodyAvailabilityDurationTypeDateRange string = "DateRange"

	// PostLearnAPIPublicV1TermsParamsBodyAvailabilityDurationTypeFixedNumDays captures enum value "FixedNumDays"
	PostLearnAPIPublicV1TermsParamsBodyAvailabilityDurationTypeFixedNumDays string = "FixedNumDays"
)

// prop value enum
func (o *PostLearnAPIPublicV1TermsParamsBodyAvailabilityDuration) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, postLearnApiPublicV1TermsParamsBodyAvailabilityDurationTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *PostLearnAPIPublicV1TermsParamsBodyAvailabilityDuration) validateType(formats strfmt.Registry) error {

	if swag.IsZero(o.Type) { // not required
		return nil
	}

	// value enum
	if err := o.validateTypeEnum("input"+"."+"availability"+"."+"duration"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostLearnAPIPublicV1TermsParamsBodyAvailabilityDuration) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostLearnAPIPublicV1TermsParamsBodyAvailabilityDuration) UnmarshalBinary(b []byte) error {
	var res PostLearnAPIPublicV1TermsParamsBodyAvailabilityDuration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
