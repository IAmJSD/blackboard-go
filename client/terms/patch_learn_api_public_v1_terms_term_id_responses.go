// Code generated by go-swagger; DO NOT EDIT.

package terms

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/jakemakesstuff/blackboard-go/models"
)

// PatchLearnAPIPublicV1TermsTermIDReader is a Reader for the PatchLearnAPIPublicV1TermsTermID structure.
type PatchLearnAPIPublicV1TermsTermIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchLearnAPIPublicV1TermsTermIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchLearnAPIPublicV1TermsTermIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchLearnAPIPublicV1TermsTermIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchLearnAPIPublicV1TermsTermIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchLearnAPIPublicV1TermsTermIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPatchLearnAPIPublicV1TermsTermIDConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchLearnAPIPublicV1TermsTermIDOK creates a PatchLearnAPIPublicV1TermsTermIDOK with default headers values
func NewPatchLearnAPIPublicV1TermsTermIDOK() *PatchLearnAPIPublicV1TermsTermIDOK {
	return &PatchLearnAPIPublicV1TermsTermIDOK{}
}

/*PatchLearnAPIPublicV1TermsTermIDOK handles this case with default header values.

OK
*/
type PatchLearnAPIPublicV1TermsTermIDOK struct {
	Payload *models.Term
}

func (o *PatchLearnAPIPublicV1TermsTermIDOK) Error() string {
	return fmt.Sprintf("[PATCH /learn/api/public/v1/terms/{termId}][%d] patchLearnApiPublicV1TermsTermIdOK  %+v", 200, o.Payload)
}

func (o *PatchLearnAPIPublicV1TermsTermIDOK) GetPayload() *models.Term {
	return o.Payload
}

func (o *PatchLearnAPIPublicV1TermsTermIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Term)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearnAPIPublicV1TermsTermIDBadRequest creates a PatchLearnAPIPublicV1TermsTermIDBadRequest with default headers values
func NewPatchLearnAPIPublicV1TermsTermIDBadRequest() *PatchLearnAPIPublicV1TermsTermIDBadRequest {
	return &PatchLearnAPIPublicV1TermsTermIDBadRequest{}
}

/*PatchLearnAPIPublicV1TermsTermIDBadRequest handles this case with default header values.

Bad Request
*/
type PatchLearnAPIPublicV1TermsTermIDBadRequest struct {
	Payload *models.RestException
}

func (o *PatchLearnAPIPublicV1TermsTermIDBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /learn/api/public/v1/terms/{termId}][%d] patchLearnApiPublicV1TermsTermIdBadRequest  %+v", 400, o.Payload)
}

func (o *PatchLearnAPIPublicV1TermsTermIDBadRequest) GetPayload() *models.RestException {
	return o.Payload
}

func (o *PatchLearnAPIPublicV1TermsTermIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearnAPIPublicV1TermsTermIDForbidden creates a PatchLearnAPIPublicV1TermsTermIDForbidden with default headers values
func NewPatchLearnAPIPublicV1TermsTermIDForbidden() *PatchLearnAPIPublicV1TermsTermIDForbidden {
	return &PatchLearnAPIPublicV1TermsTermIDForbidden{}
}

/*PatchLearnAPIPublicV1TermsTermIDForbidden handles this case with default header values.

Forbidden
*/
type PatchLearnAPIPublicV1TermsTermIDForbidden struct {
	Payload *models.RestException
}

func (o *PatchLearnAPIPublicV1TermsTermIDForbidden) Error() string {
	return fmt.Sprintf("[PATCH /learn/api/public/v1/terms/{termId}][%d] patchLearnApiPublicV1TermsTermIdForbidden  %+v", 403, o.Payload)
}

func (o *PatchLearnAPIPublicV1TermsTermIDForbidden) GetPayload() *models.RestException {
	return o.Payload
}

func (o *PatchLearnAPIPublicV1TermsTermIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearnAPIPublicV1TermsTermIDNotFound creates a PatchLearnAPIPublicV1TermsTermIDNotFound with default headers values
func NewPatchLearnAPIPublicV1TermsTermIDNotFound() *PatchLearnAPIPublicV1TermsTermIDNotFound {
	return &PatchLearnAPIPublicV1TermsTermIDNotFound{}
}

/*PatchLearnAPIPublicV1TermsTermIDNotFound handles this case with default header values.

Not Found
*/
type PatchLearnAPIPublicV1TermsTermIDNotFound struct {
	Payload *models.RestException
}

func (o *PatchLearnAPIPublicV1TermsTermIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /learn/api/public/v1/terms/{termId}][%d] patchLearnApiPublicV1TermsTermIdNotFound  %+v", 404, o.Payload)
}

func (o *PatchLearnAPIPublicV1TermsTermIDNotFound) GetPayload() *models.RestException {
	return o.Payload
}

func (o *PatchLearnAPIPublicV1TermsTermIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearnAPIPublicV1TermsTermIDConflict creates a PatchLearnAPIPublicV1TermsTermIDConflict with default headers values
func NewPatchLearnAPIPublicV1TermsTermIDConflict() *PatchLearnAPIPublicV1TermsTermIDConflict {
	return &PatchLearnAPIPublicV1TermsTermIDConflict{}
}

/*PatchLearnAPIPublicV1TermsTermIDConflict handles this case with default header values.

Conflict
*/
type PatchLearnAPIPublicV1TermsTermIDConflict struct {
	Payload *models.RestException
}

func (o *PatchLearnAPIPublicV1TermsTermIDConflict) Error() string {
	return fmt.Sprintf("[PATCH /learn/api/public/v1/terms/{termId}][%d] patchLearnApiPublicV1TermsTermIdConflict  %+v", 409, o.Payload)
}

func (o *PatchLearnAPIPublicV1TermsTermIDConflict) GetPayload() *models.RestException {
	return o.Payload
}

func (o *PatchLearnAPIPublicV1TermsTermIDConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PatchLearnAPIPublicV1TermsTermIDBody patch learn API public v1 terms term ID body
swagger:model PatchLearnAPIPublicV1TermsTermIDBody
*/
type PatchLearnAPIPublicV1TermsTermIDBody struct {

	// availability
	Availability *PatchLearnAPIPublicV1TermsTermIDParamsBodyAvailability `json:"availability,omitempty"`

	// The ID of the data source associated with this term.  This may optionally be the data source's externalId using the syntax "externalId:math101".
	DataSourceID string `json:"dataSourceId,omitempty"`

	// The description of the term. This field supports BbML; see <a target='_blank' href='https://docs.blackboard.com/learn/REST/Blackboard%20Markup%20Language%20-%20BbML.html'>here</a> for more information.
	Description string `json:"description,omitempty"`

	// An externally-defined unique ID for the term.
	//
	// Formerly known as 'sourcedidId'.
	// Max Length: 256
	ExternalID string `json:"externalId,omitempty"`

	// The name of the term.
	// Max Length: 333
	Name string `json:"name,omitempty"`
}

// Validate validates this patch learn API public v1 terms term ID body
func (o *PatchLearnAPIPublicV1TermsTermIDBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAvailability(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExternalID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchLearnAPIPublicV1TermsTermIDBody) validateAvailability(formats strfmt.Registry) error {

	if swag.IsZero(o.Availability) { // not required
		return nil
	}

	if o.Availability != nil {
		if err := o.Availability.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("input" + "." + "availability")
			}
			return err
		}
	}

	return nil
}

func (o *PatchLearnAPIPublicV1TermsTermIDBody) validateExternalID(formats strfmt.Registry) error {

	if swag.IsZero(o.ExternalID) { // not required
		return nil
	}

	if err := validate.MaxLength("input"+"."+"externalId", "body", string(o.ExternalID), 256); err != nil {
		return err
	}

	return nil
}

func (o *PatchLearnAPIPublicV1TermsTermIDBody) validateName(formats strfmt.Registry) error {

	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("input"+"."+"name", "body", string(o.Name), 333); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchLearnAPIPublicV1TermsTermIDBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchLearnAPIPublicV1TermsTermIDBody) UnmarshalBinary(b []byte) error {
	var res PatchLearnAPIPublicV1TermsTermIDBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchLearnAPIPublicV1TermsTermIDParamsBodyAvailability Availability
//
// Settings controlling availability of the term to students.
swagger:model PatchLearnAPIPublicV1TermsTermIDParamsBodyAvailability
*/
type PatchLearnAPIPublicV1TermsTermIDParamsBodyAvailability struct {

	// Whether the term and the courses it contains are available to students.  Instructors can always access their courses.
	//
	//
	// | Type      | Description
	//  | --------- | --------- |
	// | Yes | Students may access the term and the courses it contains. |
	// | No | Students may not access the term or the courses it contains. |
	//
	// Enum: [Yes No]
	Available string `json:"available,omitempty"`

	// duration
	Duration *PatchLearnAPIPublicV1TermsTermIDParamsBodyAvailabilityDuration `json:"duration,omitempty"`
}

// Validate validates this patch learn API public v1 terms term ID params body availability
func (o *PatchLearnAPIPublicV1TermsTermIDParamsBodyAvailability) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAvailable(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDuration(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var patchLearnApiPublicV1TermsTermIdParamsBodyAvailabilityTypeAvailablePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Yes","No"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		patchLearnApiPublicV1TermsTermIdParamsBodyAvailabilityTypeAvailablePropEnum = append(patchLearnApiPublicV1TermsTermIdParamsBodyAvailabilityTypeAvailablePropEnum, v)
	}
}

const (

	// PatchLearnAPIPublicV1TermsTermIDParamsBodyAvailabilityAvailableYes captures enum value "Yes"
	PatchLearnAPIPublicV1TermsTermIDParamsBodyAvailabilityAvailableYes string = "Yes"

	// PatchLearnAPIPublicV1TermsTermIDParamsBodyAvailabilityAvailableNo captures enum value "No"
	PatchLearnAPIPublicV1TermsTermIDParamsBodyAvailabilityAvailableNo string = "No"
)

// prop value enum
func (o *PatchLearnAPIPublicV1TermsTermIDParamsBodyAvailability) validateAvailableEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, patchLearnApiPublicV1TermsTermIdParamsBodyAvailabilityTypeAvailablePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *PatchLearnAPIPublicV1TermsTermIDParamsBodyAvailability) validateAvailable(formats strfmt.Registry) error {

	if swag.IsZero(o.Available) { // not required
		return nil
	}

	// value enum
	if err := o.validateAvailableEnum("input"+"."+"availability"+"."+"available", "body", o.Available); err != nil {
		return err
	}

	return nil
}

func (o *PatchLearnAPIPublicV1TermsTermIDParamsBodyAvailability) validateDuration(formats strfmt.Registry) error {

	if swag.IsZero(o.Duration) { // not required
		return nil
	}

	if o.Duration != nil {
		if err := o.Duration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("input" + "." + "availability" + "." + "duration")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchLearnAPIPublicV1TermsTermIDParamsBodyAvailability) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchLearnAPIPublicV1TermsTermIDParamsBodyAvailability) UnmarshalBinary(b []byte) error {
	var res PatchLearnAPIPublicV1TermsTermIDParamsBodyAvailability
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchLearnAPIPublicV1TermsTermIDParamsBodyAvailabilityDuration Duration
//
// Settings controlling the length of time the term is available.
swagger:model PatchLearnAPIPublicV1TermsTermIDParamsBodyAvailabilityDuration
*/
type PatchLearnAPIPublicV1TermsTermIDParamsBodyAvailabilityDuration struct {

	// The number of days courses within this term can be used.  May only be set if availability.duration.type is FixedNumDays.
	DaysOfUse int32 `json:"daysOfUse,omitempty"`

	// The date this term ends.  May only be set if availability.duration.type is DateRange.
	// Format: date-time
	End strfmt.DateTime `json:"end,omitempty"`

	// The date this term starts.  May only be set if availability.duration.type is DateRange.
	// Format: date-time
	Start strfmt.DateTime `json:"start,omitempty"`

	// The intended length of the term.  Possible values are:
	//
	//
	// | Type      | Description
	//  | --------- | --------- |
	// | Continuous | The term is active on an ongoing basis. This is the default. |
	// | DateRange | The term will only be available between specific date ranges. |
	// | FixedNumDays | The term will only be available for a set number of days. |
	//
	// Enum: [Continuous DateRange FixedNumDays]
	Type string `json:"type,omitempty"`
}

// Validate validates this patch learn API public v1 terms term ID params body availability duration
func (o *PatchLearnAPIPublicV1TermsTermIDParamsBodyAvailabilityDuration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStart(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchLearnAPIPublicV1TermsTermIDParamsBodyAvailabilityDuration) validateEnd(formats strfmt.Registry) error {

	if swag.IsZero(o.End) { // not required
		return nil
	}

	if err := validate.FormatOf("input"+"."+"availability"+"."+"duration"+"."+"end", "body", "date-time", o.End.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *PatchLearnAPIPublicV1TermsTermIDParamsBodyAvailabilityDuration) validateStart(formats strfmt.Registry) error {

	if swag.IsZero(o.Start) { // not required
		return nil
	}

	if err := validate.FormatOf("input"+"."+"availability"+"."+"duration"+"."+"start", "body", "date-time", o.Start.String(), formats); err != nil {
		return err
	}

	return nil
}

var patchLearnApiPublicV1TermsTermIdParamsBodyAvailabilityDurationTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Continuous","DateRange","FixedNumDays"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		patchLearnApiPublicV1TermsTermIdParamsBodyAvailabilityDurationTypeTypePropEnum = append(patchLearnApiPublicV1TermsTermIdParamsBodyAvailabilityDurationTypeTypePropEnum, v)
	}
}

const (

	// PatchLearnAPIPublicV1TermsTermIDParamsBodyAvailabilityDurationTypeContinuous captures enum value "Continuous"
	PatchLearnAPIPublicV1TermsTermIDParamsBodyAvailabilityDurationTypeContinuous string = "Continuous"

	// PatchLearnAPIPublicV1TermsTermIDParamsBodyAvailabilityDurationTypeDateRange captures enum value "DateRange"
	PatchLearnAPIPublicV1TermsTermIDParamsBodyAvailabilityDurationTypeDateRange string = "DateRange"

	// PatchLearnAPIPublicV1TermsTermIDParamsBodyAvailabilityDurationTypeFixedNumDays captures enum value "FixedNumDays"
	PatchLearnAPIPublicV1TermsTermIDParamsBodyAvailabilityDurationTypeFixedNumDays string = "FixedNumDays"
)

// prop value enum
func (o *PatchLearnAPIPublicV1TermsTermIDParamsBodyAvailabilityDuration) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, patchLearnApiPublicV1TermsTermIdParamsBodyAvailabilityDurationTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *PatchLearnAPIPublicV1TermsTermIDParamsBodyAvailabilityDuration) validateType(formats strfmt.Registry) error {

	if swag.IsZero(o.Type) { // not required
		return nil
	}

	// value enum
	if err := o.validateTypeEnum("input"+"."+"availability"+"."+"duration"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchLearnAPIPublicV1TermsTermIDParamsBodyAvailabilityDuration) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchLearnAPIPublicV1TermsTermIDParamsBodyAvailabilityDuration) UnmarshalBinary(b []byte) error {
	var res PatchLearnAPIPublicV1TermsTermIDParamsBodyAvailabilityDuration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
