// Code generated by go-swagger; DO NOT EDIT.

package deprecated_courses

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new deprecated courses API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for deprecated courses API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteLearnAPIPublicV1CoursesCourseID(params *DeleteLearnAPIPublicV1CoursesCourseIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLearnAPIPublicV1CoursesCourseIDNoContent, error)

	DeleteLearnAPIPublicV2CoursesCourseID(params *DeleteLearnAPIPublicV2CoursesCourseIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLearnAPIPublicV2CoursesCourseIDNoContent, error)

	GetLearnAPIPublicV1Courses(params *GetLearnAPIPublicV1CoursesParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1CoursesOK, error)

	GetLearnAPIPublicV1CoursesCourseID(params *GetLearnAPIPublicV1CoursesCourseIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1CoursesCourseIDOK, error)

	GetLearnAPIPublicV2Courses(params *GetLearnAPIPublicV2CoursesParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV2CoursesOK, error)

	GetLearnAPIPublicV2CoursesCourseID(params *GetLearnAPIPublicV2CoursesCourseIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV2CoursesCourseIDOK, error)

	PatchLearnAPIPublicV1CoursesCourseID(params *PatchLearnAPIPublicV1CoursesCourseIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchLearnAPIPublicV1CoursesCourseIDOK, error)

	PatchLearnAPIPublicV2CoursesCourseID(params *PatchLearnAPIPublicV2CoursesCourseIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchLearnAPIPublicV2CoursesCourseIDOK, error)

	PostLearnAPIPublicV1Courses(params *PostLearnAPIPublicV1CoursesParams, authInfo runtime.ClientAuthInfoWriter) (*PostLearnAPIPublicV1CoursesCreated, error)

	PostLearnAPIPublicV1CoursesCourseIDCopy(params *PostLearnAPIPublicV1CoursesCourseIDCopyParams, authInfo runtime.ClientAuthInfoWriter) (*PostLearnAPIPublicV1CoursesCourseIDCopyAccepted, error)

	PostLearnAPIPublicV2Courses(params *PostLearnAPIPublicV2CoursesParams, authInfo runtime.ClientAuthInfoWriter) (*PostLearnAPIPublicV2CoursesCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteLearnAPIPublicV1CoursesCourseID deletes course

  Deletes a course or organization in synchronous fashion.

The 'system.course.DELETE' entitlement is needed to delete a course, while 'system.org.DELETE' is needed for an organization.

**Since**: 2015.11.0

**Deprecated**: since 3400.8.0; use the v2 end-point instead
*/
func (a *Client) DeleteLearnAPIPublicV1CoursesCourseID(params *DeleteLearnAPIPublicV1CoursesCourseIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLearnAPIPublicV1CoursesCourseIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLearnAPIPublicV1CoursesCourseIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLearnAPIPublicV1CoursesCourseID",
		Method:             "DELETE",
		PathPattern:        "/learn/api/public/v1/courses/{courseId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteLearnAPIPublicV1CoursesCourseIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLearnAPIPublicV1CoursesCourseIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLearnAPIPublicV1CoursesCourseID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteLearnAPIPublicV2CoursesCourseID deletes course

  Deletes a course or organization in synchronous fashion.

The 'system.course.DELETE' entitlement is needed to delete a course, while 'system.org.DELETE' is needed for an organization.

**Since**: 3400.8.0

**Deprecated**: since 3800.1.0; use the v3 end-point instead
*/
func (a *Client) DeleteLearnAPIPublicV2CoursesCourseID(params *DeleteLearnAPIPublicV2CoursesCourseIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLearnAPIPublicV2CoursesCourseIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLearnAPIPublicV2CoursesCourseIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLearnAPIPublicV2CoursesCourseID",
		Method:             "DELETE",
		PathPattern:        "/learn/api/public/v2/courses/{courseId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteLearnAPIPublicV2CoursesCourseIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLearnAPIPublicV2CoursesCourseIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLearnAPIPublicV2CoursesCourseID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnAPIPublicV1Courses gets courses

  Returns a list of courses and organizations.

To view disabled courses a user must have the entitlement 'system.course.VIEW'.

Users with the 'course.configure-properties.EXECUTE' entitlement can access all course properties.

Users enrolled in the course have read access to all properties except:

- uuid
- externalId
- dataSourceId
- created
- allowGuests
- enrollment.accessCode

Users who are not enrolled in the course and do not have associated entitlements only have read access to the following properties:

- id
- courseId
- name
- description
- organization
- readOnly
- termId
- availability.available
- availability.duration.type
- availability.duration.start
- availability.duration.end
- availability.duration.daysOfUse
If the course enrollment is self-enroll, all users can view the course as though they were enrolled.

**Since**: 3000.1.0

**Deprecated**: since 3400.8.0; use the v2 end-point instead
*/
func (a *Client) GetLearnAPIPublicV1Courses(params *GetLearnAPIPublicV1CoursesParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1CoursesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV1CoursesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV1Courses",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v1/courses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV1CoursesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV1CoursesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV1Courses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnAPIPublicV1CoursesCourseID gets course

  Loads a specific course or organization.

To view disabled courses a user must have the entitlement 'system.course.VIEW'.

Users with the 'course.configure-properties.EXECUTE' entitlement can access all course properties.

Users enrolled in the course have read access to all properties except:

- uuid
- externalId
- dataSourceId
- created
- allowGuests
- enrollment.accessCode

Users who are not enrolled in the course and do not have associated entitlements only have read access to the following properties:

- id
- courseId
- name
- description
- organization
- readOnly
- termId
- availability.available
- availability.duration.type
- availability.duration.start
- availability.duration.end
- availability.duration.daysOfUse
If the course enrollment is self-enroll, all users can view the course as though they were enrolled.

**Since**: 2015.11.0

**Deprecated**: since 3400.8.0; use the v2 end-point instead
*/
func (a *Client) GetLearnAPIPublicV1CoursesCourseID(params *GetLearnAPIPublicV1CoursesCourseIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1CoursesCourseIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV1CoursesCourseIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV1CoursesCourseID",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v1/courses/{courseId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV1CoursesCourseIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV1CoursesCourseIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV1CoursesCourseID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnAPIPublicV2Courses gets courses

  Returns a list of courses and organizations.

To view disabled courses a user must have the entitlement 'system.course.VIEW'.

Users with the 'course.configure-properties.EXECUTE' course entitlement, or the 'system.course.properties.MODIFY' system entitlement can access all course properties.

Users enrolled in the course have read access to all properties except:

- uuid
- externalId
- dataSourceId
- created
- allowGuests
- enrollment.accessCode

Users who are not enrolled in the course and do not have associated entitlements only have read access to the following properties:

- id
- courseId
- name
- description
- organization
- readOnly
- termId
- availability.available
- availability.duration.type
- availability.duration.start
- availability.duration.end
- availability.duration.daysOfUse
If the course enrollment is self-enroll, all users can view the course as though they were enrolled.

**Since**: 3400.8.0

**Deprecated**: since 3800.1.0; use the v3 end-point instead
*/
func (a *Client) GetLearnAPIPublicV2Courses(params *GetLearnAPIPublicV2CoursesParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV2CoursesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV2CoursesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV2Courses",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v2/courses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV2CoursesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV2CoursesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV2Courses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnAPIPublicV2CoursesCourseID gets course

  Loads a specific course or organization.

To view disabled courses a user must have the entitlement 'system.course.VIEW'.

Users with the 'course.configure-properties.EXECUTE' entitlement can access all course properties.

Users enrolled in the course have read access to all properties except:

- uuid
- externalId
- dataSourceId
- created
- allowGuests
- enrollment.accessCode

Users with no access to the course only have read access to the following properties:

- id
- courseId
- name
- description
- organization
- closedComplete
- termId
- availability.available
- availability.duration.type
- availability.duration.start
- availability.duration.end
- availability.duration.daysOfUse
If the course enrollment is self-enroll, all users can view the course as though they were enrolled.

**Since**: 3400.8.0

**Deprecated**: since 3800.1.0; use the v3 end-point instead
*/
func (a *Client) GetLearnAPIPublicV2CoursesCourseID(params *GetLearnAPIPublicV2CoursesCourseIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV2CoursesCourseIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV2CoursesCourseIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV2CoursesCourseID",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v2/courses/{courseId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV2CoursesCourseIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV2CoursesCourseIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV2CoursesCourseID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchLearnAPIPublicV1CoursesCourseID updates course

  Updates a course or organization.

To update a course, the user must have either 'system.course|org.properties.MODIFY' or 'course.configure-properties.EXECUTE' entitlements.  However, if the user has the latter entitlement, then additional entitlements are needed to be able to update certain fields, as shown below:

 | Field                           | Entitlements Required                                                  |
 |---------------------------------|------------------------------------------------------------------------|
 | name                            | course.name.MODIFY                                                     |
 | description                     | course.name.MODIFY                                                     |
 | allowGuests                     | course.configure-guest-access.EXECUTE                                  |
 | enrollment.type                 | course.configure-properties.EXECUTE, course.enrollment.MODIFY          |
 | enrollment.start                | course.configure-properties.EXECUTE, course.enrollment.MODIFY          |
 | enrollment.end                  | course.configure-properties.EXECUTE, course.enrollment.MODIFY          |
 | enrollment.accessCode           | course.configure-properties.EXECUTE, course.enrollment.MODIFY          |
 | availability.available          | course.configure-properties.EXECUTE, course.availability.MODIFY        |
 | locale.id                       | course.configure-properties.EXECUTE, course.locale.MODIFY              |
 | locale.force                    | course.configure-properties.EXECUTE, course.locale.MODIFY              |
 | availability.duration.type      | course.configure-properties.EXECUTE, course.configure-duration.EXECUTE |
 | availability.duration.start     | course.configure-properties.EXECUTE, course.configure-duration.EXECUTE |
 | availability.duration.end       | course.configure-properties.EXECUTE, course.configure-duration.EXECUTE |
 | availability.duration.daysOfUse | course.configure-properties.EXECUTE, course.configure-duration.EXECUTE |


**Since**: 2015.11.0

**Deprecated**: since 3400.8.0; use the v2 end-point instead
*/
func (a *Client) PatchLearnAPIPublicV1CoursesCourseID(params *PatchLearnAPIPublicV1CoursesCourseIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchLearnAPIPublicV1CoursesCourseIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchLearnAPIPublicV1CoursesCourseIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchLearnAPIPublicV1CoursesCourseID",
		Method:             "PATCH",
		PathPattern:        "/learn/api/public/v1/courses/{courseId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchLearnAPIPublicV1CoursesCourseIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchLearnAPIPublicV1CoursesCourseIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchLearnAPIPublicV1CoursesCourseID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchLearnAPIPublicV2CoursesCourseID updates course

  Updates a course or organization.

To update a course, the user must have either 'system.course|org.properties.MODIFY' or 'course.configure-properties.EXECUTE' entitlements.  However, if the user has the latter entitlement, then additional entitlements are needed to be able to update certain fields, as shown below:

 | Field                           | Entitlements Required                                                  |
 |---------------------------------|------------------------------------------------------------------------|
 | name                            | course.name.MODIFY                                                     |
 | description                     | course.name.MODIFY                                                     |
 | allowGuests                     | course.configure-guest-access.EXECUTE                                  |
 | enrollment.type                 | course.configure-properties.EXECUTE, course.enrollment.MODIFY          |
 | enrollment.start                | course.configure-properties.EXECUTE, course.enrollment.MODIFY          |
 | enrollment.end                  | course.configure-properties.EXECUTE, course.enrollment.MODIFY          |
 | enrollment.accessCode           | course.configure-properties.EXECUTE, course.enrollment.MODIFY          |
 | availability.available          | course.configure-properties.EXECUTE, course.availability.MODIFY        |
 | locale.id                       | course.configure-properties.EXECUTE, course.locale.MODIFY              |
 | locale.force                    | course.configure-properties.EXECUTE, course.locale.MODIFY              |
 | availability.duration.type      | course.configure-properties.EXECUTE, course.configure-duration.EXECUTE |
 | availability.duration.start     | course.configure-properties.EXECUTE, course.configure-duration.EXECUTE |
 | availability.duration.end       | course.configure-properties.EXECUTE, course.configure-duration.EXECUTE |
 | availability.duration.daysOfUse | course.configure-properties.EXECUTE, course.configure-duration.EXECUTE |


**Since**: 3400.8.0

**Deprecated**: since 3800.1.0; use the v3 end-point instead
*/
func (a *Client) PatchLearnAPIPublicV2CoursesCourseID(params *PatchLearnAPIPublicV2CoursesCourseIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchLearnAPIPublicV2CoursesCourseIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchLearnAPIPublicV2CoursesCourseIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchLearnAPIPublicV2CoursesCourseID",
		Method:             "PATCH",
		PathPattern:        "/learn/api/public/v2/courses/{courseId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchLearnAPIPublicV2CoursesCourseIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchLearnAPIPublicV2CoursesCourseIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchLearnAPIPublicV2CoursesCourseID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostLearnAPIPublicV1Courses creates course

  Creates a course or organization.

The 'system.course.CREATE' entitlement is needed to create a course, while 'system.org.CREATE' is needed for an organization.

**Since**: 2015.11.0

**Deprecated**: since 3400.8.0; use the v2 end-point instead
*/
func (a *Client) PostLearnAPIPublicV1Courses(params *PostLearnAPIPublicV1CoursesParams, authInfo runtime.ClientAuthInfoWriter) (*PostLearnAPIPublicV1CoursesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLearnAPIPublicV1CoursesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLearnAPIPublicV1Courses",
		Method:             "POST",
		PathPattern:        "/learn/api/public/v1/courses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostLearnAPIPublicV1CoursesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLearnAPIPublicV1CoursesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLearnAPIPublicV1Courses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostLearnAPIPublicV1CoursesCourseIDCopy copies course

  Creates an exact copy of an existing Course into a new Course.

Users with entitlements 'system.course.copy.EXECUTE' can create a course copy. Users with entitlements 'system.org.copy.EXECUTE' can create an organization copy. All users's must also have 'course.content.copy.EXECUTE' entitlement associated with the specified source courseId.

**Since**: 3300.0.0

**Deprecated**: since 3800.0.0; use the v2 end-point instead.
*/
func (a *Client) PostLearnAPIPublicV1CoursesCourseIDCopy(params *PostLearnAPIPublicV1CoursesCourseIDCopyParams, authInfo runtime.ClientAuthInfoWriter) (*PostLearnAPIPublicV1CoursesCourseIDCopyAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLearnAPIPublicV1CoursesCourseIDCopyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLearnAPIPublicV1CoursesCourseIDCopy",
		Method:             "POST",
		PathPattern:        "/learn/api/public/v1/courses/{courseId}/copy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostLearnAPIPublicV1CoursesCourseIDCopyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLearnAPIPublicV1CoursesCourseIDCopyAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLearnAPIPublicV1CoursesCourseIDCopy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostLearnAPIPublicV2Courses creates course

  Creates a course or organization.

The 'system.course.CREATE' entitlement is needed to create a course, while 'system.org.CREATE' is needed for an organization.

**Since**: 3400.8.0

**Deprecated**: since 3800.1.0; use the v3 end-point instead
*/
func (a *Client) PostLearnAPIPublicV2Courses(params *PostLearnAPIPublicV2CoursesParams, authInfo runtime.ClientAuthInfoWriter) (*PostLearnAPIPublicV2CoursesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLearnAPIPublicV2CoursesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLearnAPIPublicV2Courses",
		Method:             "POST",
		PathPattern:        "/learn/api/public/v2/courses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostLearnAPIPublicV2CoursesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLearnAPIPublicV2CoursesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLearnAPIPublicV2Courses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
