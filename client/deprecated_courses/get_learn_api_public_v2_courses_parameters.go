// Code generated by go-swagger; DO NOT EDIT.

package deprecated_courses

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetLearnAPIPublicV2CoursesParams creates a new GetLearnAPIPublicV2CoursesParams object
// with the default values initialized.
func NewGetLearnAPIPublicV2CoursesParams() *GetLearnAPIPublicV2CoursesParams {
	var ()
	return &GetLearnAPIPublicV2CoursesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetLearnAPIPublicV2CoursesParamsWithTimeout creates a new GetLearnAPIPublicV2CoursesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetLearnAPIPublicV2CoursesParamsWithTimeout(timeout time.Duration) *GetLearnAPIPublicV2CoursesParams {
	var ()
	return &GetLearnAPIPublicV2CoursesParams{

		timeout: timeout,
	}
}

// NewGetLearnAPIPublicV2CoursesParamsWithContext creates a new GetLearnAPIPublicV2CoursesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetLearnAPIPublicV2CoursesParamsWithContext(ctx context.Context) *GetLearnAPIPublicV2CoursesParams {
	var ()
	return &GetLearnAPIPublicV2CoursesParams{

		Context: ctx,
	}
}

// NewGetLearnAPIPublicV2CoursesParamsWithHTTPClient creates a new GetLearnAPIPublicV2CoursesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetLearnAPIPublicV2CoursesParamsWithHTTPClient(client *http.Client) *GetLearnAPIPublicV2CoursesParams {
	var ()
	return &GetLearnAPIPublicV2CoursesParams{
		HTTPClient: client,
	}
}

/*GetLearnAPIPublicV2CoursesParams contains all the parameters to send to the API endpoint
for the get learn API public v2 courses operation typically these are written to a http.Request
*/
type GetLearnAPIPublicV2CoursesParams struct {

	/*AllowGuests
	  Search for courses which are configured to allow/disallow guest access, based on input.  Default: n/a (return courses regardless of guests allowed)

	**Since**: 3200.3.0

	*/
	AllowGuests *bool
	/*AvailabilityAvailable
	  Search for courses with availability.available properties that contain this value.

	**Since**: 3000.13.0


	| Type      | Description
	 | --------- | --------- |
	| Yes | Students may access the course. |
	| No | Students may not access the course. |
	| Disabled | Disabled by the SIS. Students may not access the course.  **Since**: 3100.0.0 |
	| Term | Availability is inherited from the term settings. Requires a termId be set. |


	*/
	AvailabilityAvailable *string
	/*CourseID
	  Search for courses with courseId properties that contain this value.

	**Since**: 3100.0.0

	*/
	CourseID *string
	/*Created
	  Search for courses with a created date relative to this value.  'createdCompare' may also be sent to control search behavior.

	**Since**: 3100.0.0

	*/
	Created *strfmt.DateTime
	/*CreatedCompare
	  Used alongside the 'created' search parameter.  Defaults to greaterOrEqual if not specified.

	**Since**: 3100.0.0


	| Type      | Description
	 | --------- | --------- |
	| lessThan |  |
	| greaterOrEqual |  |


	*/
	CreatedCompare *string
	/*DataSourceID
	  Search for courses with this dataSourceId.  This may optionally be the data source's externalId using the syntax "externalId:math101".

	**Since**: 3100.0.0

	*/
	DataSourceID *string
	/*Description
	  Search for courses with description properties that contain this value.

	**Since**: 3100.0.0

	*/
	Description *string
	/*ExternalID
	  Search for courses with externalId properties that contain this value.

	**Since**: 3100.0.0

	*/
	ExternalID *string
	/*Fields
	  A comma-delimited list of fields to include in the response. If not specified, all fields will be returned.

	*/
	Fields *string
	/*Limit
	  The maximum number of results to be returned. There may be less if the query returned less than the maximum.

	*/
	Limit *int32
	/*Modified
	  Search for courses with a modified date relative to this value.  'modifiedCompare' may also be sent to control search behavior.

	**Since**: 3500.4.0

	*/
	Modified *strfmt.DateTime
	/*ModifiedCompare
	  Used alongside the 'modified' search parameter. Defaults to greaterOrEqual if not specified.

	**Since**: 3500.4.0


	| Type      | Description
	 | --------- | --------- |
	| lessThan |  |
	| greaterOrEqual |  |


	*/
	ModifiedCompare *string
	/*Name
	  Search for courses with name properties that contain this value.

	**Since**: 3100.0.0

	*/
	Name *string
	/*Offset
	  The number of rows to skip before beginning to return rows. An offset of 0 is the same as omitting the offset parameter.

	*/
	Offset *int32
	/*Organization
	  Search for courses by organization flag.  A value of 'true' indicates that search results should be limited to only Organizations.  A value of 'false' indicates results should be limited to Courses.  Not setting this field indicates that both Courses and Organizations should be returned.

	**Since**: 3100.0.0

	*/
	Organization *bool
	/*Sort
	  Properties to sort by. This is a comma-delimited list of JSON properties, with an optional "(desc)" suffix to request a descending sort for that property. e.g. "name(desc),created" Supported fields are:

	- courseId
	- name
	- externalId
	- created
	- modified

	**Since**: 3400.8.0

	*/
	Sort *string
	/*TermID
	  Search for courses with this termId.  This may optionally be the term's externalId using the syntax "externalId:spring2015".

	**Since**: 3100.0.0

	*/
	TermID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get learn API public v2 courses params
func (o *GetLearnAPIPublicV2CoursesParams) WithTimeout(timeout time.Duration) *GetLearnAPIPublicV2CoursesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get learn API public v2 courses params
func (o *GetLearnAPIPublicV2CoursesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get learn API public v2 courses params
func (o *GetLearnAPIPublicV2CoursesParams) WithContext(ctx context.Context) *GetLearnAPIPublicV2CoursesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get learn API public v2 courses params
func (o *GetLearnAPIPublicV2CoursesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get learn API public v2 courses params
func (o *GetLearnAPIPublicV2CoursesParams) WithHTTPClient(client *http.Client) *GetLearnAPIPublicV2CoursesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get learn API public v2 courses params
func (o *GetLearnAPIPublicV2CoursesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAllowGuests adds the allowGuests to the get learn API public v2 courses params
func (o *GetLearnAPIPublicV2CoursesParams) WithAllowGuests(allowGuests *bool) *GetLearnAPIPublicV2CoursesParams {
	o.SetAllowGuests(allowGuests)
	return o
}

// SetAllowGuests adds the allowGuests to the get learn API public v2 courses params
func (o *GetLearnAPIPublicV2CoursesParams) SetAllowGuests(allowGuests *bool) {
	o.AllowGuests = allowGuests
}

// WithAvailabilityAvailable adds the availabilityAvailable to the get learn API public v2 courses params
func (o *GetLearnAPIPublicV2CoursesParams) WithAvailabilityAvailable(availabilityAvailable *string) *GetLearnAPIPublicV2CoursesParams {
	o.SetAvailabilityAvailable(availabilityAvailable)
	return o
}

// SetAvailabilityAvailable adds the availabilityAvailable to the get learn API public v2 courses params
func (o *GetLearnAPIPublicV2CoursesParams) SetAvailabilityAvailable(availabilityAvailable *string) {
	o.AvailabilityAvailable = availabilityAvailable
}

// WithCourseID adds the courseID to the get learn API public v2 courses params
func (o *GetLearnAPIPublicV2CoursesParams) WithCourseID(courseID *string) *GetLearnAPIPublicV2CoursesParams {
	o.SetCourseID(courseID)
	return o
}

// SetCourseID adds the courseId to the get learn API public v2 courses params
func (o *GetLearnAPIPublicV2CoursesParams) SetCourseID(courseID *string) {
	o.CourseID = courseID
}

// WithCreated adds the created to the get learn API public v2 courses params
func (o *GetLearnAPIPublicV2CoursesParams) WithCreated(created *strfmt.DateTime) *GetLearnAPIPublicV2CoursesParams {
	o.SetCreated(created)
	return o
}

// SetCreated adds the created to the get learn API public v2 courses params
func (o *GetLearnAPIPublicV2CoursesParams) SetCreated(created *strfmt.DateTime) {
	o.Created = created
}

// WithCreatedCompare adds the createdCompare to the get learn API public v2 courses params
func (o *GetLearnAPIPublicV2CoursesParams) WithCreatedCompare(createdCompare *string) *GetLearnAPIPublicV2CoursesParams {
	o.SetCreatedCompare(createdCompare)
	return o
}

// SetCreatedCompare adds the createdCompare to the get learn API public v2 courses params
func (o *GetLearnAPIPublicV2CoursesParams) SetCreatedCompare(createdCompare *string) {
	o.CreatedCompare = createdCompare
}

// WithDataSourceID adds the dataSourceID to the get learn API public v2 courses params
func (o *GetLearnAPIPublicV2CoursesParams) WithDataSourceID(dataSourceID *string) *GetLearnAPIPublicV2CoursesParams {
	o.SetDataSourceID(dataSourceID)
	return o
}

// SetDataSourceID adds the dataSourceId to the get learn API public v2 courses params
func (o *GetLearnAPIPublicV2CoursesParams) SetDataSourceID(dataSourceID *string) {
	o.DataSourceID = dataSourceID
}

// WithDescription adds the description to the get learn API public v2 courses params
func (o *GetLearnAPIPublicV2CoursesParams) WithDescription(description *string) *GetLearnAPIPublicV2CoursesParams {
	o.SetDescription(description)
	return o
}

// SetDescription adds the description to the get learn API public v2 courses params
func (o *GetLearnAPIPublicV2CoursesParams) SetDescription(description *string) {
	o.Description = description
}

// WithExternalID adds the externalID to the get learn API public v2 courses params
func (o *GetLearnAPIPublicV2CoursesParams) WithExternalID(externalID *string) *GetLearnAPIPublicV2CoursesParams {
	o.SetExternalID(externalID)
	return o
}

// SetExternalID adds the externalId to the get learn API public v2 courses params
func (o *GetLearnAPIPublicV2CoursesParams) SetExternalID(externalID *string) {
	o.ExternalID = externalID
}

// WithFields adds the fields to the get learn API public v2 courses params
func (o *GetLearnAPIPublicV2CoursesParams) WithFields(fields *string) *GetLearnAPIPublicV2CoursesParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the get learn API public v2 courses params
func (o *GetLearnAPIPublicV2CoursesParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithLimit adds the limit to the get learn API public v2 courses params
func (o *GetLearnAPIPublicV2CoursesParams) WithLimit(limit *int32) *GetLearnAPIPublicV2CoursesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get learn API public v2 courses params
func (o *GetLearnAPIPublicV2CoursesParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithModified adds the modified to the get learn API public v2 courses params
func (o *GetLearnAPIPublicV2CoursesParams) WithModified(modified *strfmt.DateTime) *GetLearnAPIPublicV2CoursesParams {
	o.SetModified(modified)
	return o
}

// SetModified adds the modified to the get learn API public v2 courses params
func (o *GetLearnAPIPublicV2CoursesParams) SetModified(modified *strfmt.DateTime) {
	o.Modified = modified
}

// WithModifiedCompare adds the modifiedCompare to the get learn API public v2 courses params
func (o *GetLearnAPIPublicV2CoursesParams) WithModifiedCompare(modifiedCompare *string) *GetLearnAPIPublicV2CoursesParams {
	o.SetModifiedCompare(modifiedCompare)
	return o
}

// SetModifiedCompare adds the modifiedCompare to the get learn API public v2 courses params
func (o *GetLearnAPIPublicV2CoursesParams) SetModifiedCompare(modifiedCompare *string) {
	o.ModifiedCompare = modifiedCompare
}

// WithName adds the name to the get learn API public v2 courses params
func (o *GetLearnAPIPublicV2CoursesParams) WithName(name *string) *GetLearnAPIPublicV2CoursesParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get learn API public v2 courses params
func (o *GetLearnAPIPublicV2CoursesParams) SetName(name *string) {
	o.Name = name
}

// WithOffset adds the offset to the get learn API public v2 courses params
func (o *GetLearnAPIPublicV2CoursesParams) WithOffset(offset *int32) *GetLearnAPIPublicV2CoursesParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get learn API public v2 courses params
func (o *GetLearnAPIPublicV2CoursesParams) SetOffset(offset *int32) {
	o.Offset = offset
}

// WithOrganization adds the organization to the get learn API public v2 courses params
func (o *GetLearnAPIPublicV2CoursesParams) WithOrganization(organization *bool) *GetLearnAPIPublicV2CoursesParams {
	o.SetOrganization(organization)
	return o
}

// SetOrganization adds the organization to the get learn API public v2 courses params
func (o *GetLearnAPIPublicV2CoursesParams) SetOrganization(organization *bool) {
	o.Organization = organization
}

// WithSort adds the sort to the get learn API public v2 courses params
func (o *GetLearnAPIPublicV2CoursesParams) WithSort(sort *string) *GetLearnAPIPublicV2CoursesParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the get learn API public v2 courses params
func (o *GetLearnAPIPublicV2CoursesParams) SetSort(sort *string) {
	o.Sort = sort
}

// WithTermID adds the termID to the get learn API public v2 courses params
func (o *GetLearnAPIPublicV2CoursesParams) WithTermID(termID *string) *GetLearnAPIPublicV2CoursesParams {
	o.SetTermID(termID)
	return o
}

// SetTermID adds the termId to the get learn API public v2 courses params
func (o *GetLearnAPIPublicV2CoursesParams) SetTermID(termID *string) {
	o.TermID = termID
}

// WriteToRequest writes these params to a swagger request
func (o *GetLearnAPIPublicV2CoursesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AllowGuests != nil {

		// query param allowGuests
		var qrAllowGuests bool
		if o.AllowGuests != nil {
			qrAllowGuests = *o.AllowGuests
		}
		qAllowGuests := swag.FormatBool(qrAllowGuests)
		if qAllowGuests != "" {
			if err := r.SetQueryParam("allowGuests", qAllowGuests); err != nil {
				return err
			}
		}

	}

	if o.AvailabilityAvailable != nil {

		// query param availability.available
		var qrAvailabilityAvailable string
		if o.AvailabilityAvailable != nil {
			qrAvailabilityAvailable = *o.AvailabilityAvailable
		}
		qAvailabilityAvailable := qrAvailabilityAvailable
		if qAvailabilityAvailable != "" {
			if err := r.SetQueryParam("availability.available", qAvailabilityAvailable); err != nil {
				return err
			}
		}

	}

	if o.CourseID != nil {

		// query param courseId
		var qrCourseID string
		if o.CourseID != nil {
			qrCourseID = *o.CourseID
		}
		qCourseID := qrCourseID
		if qCourseID != "" {
			if err := r.SetQueryParam("courseId", qCourseID); err != nil {
				return err
			}
		}

	}

	if o.Created != nil {

		// query param created
		var qrCreated strfmt.DateTime
		if o.Created != nil {
			qrCreated = *o.Created
		}
		qCreated := qrCreated.String()
		if qCreated != "" {
			if err := r.SetQueryParam("created", qCreated); err != nil {
				return err
			}
		}

	}

	if o.CreatedCompare != nil {

		// query param createdCompare
		var qrCreatedCompare string
		if o.CreatedCompare != nil {
			qrCreatedCompare = *o.CreatedCompare
		}
		qCreatedCompare := qrCreatedCompare
		if qCreatedCompare != "" {
			if err := r.SetQueryParam("createdCompare", qCreatedCompare); err != nil {
				return err
			}
		}

	}

	if o.DataSourceID != nil {

		// query param dataSourceId
		var qrDataSourceID string
		if o.DataSourceID != nil {
			qrDataSourceID = *o.DataSourceID
		}
		qDataSourceID := qrDataSourceID
		if qDataSourceID != "" {
			if err := r.SetQueryParam("dataSourceId", qDataSourceID); err != nil {
				return err
			}
		}

	}

	if o.Description != nil {

		// query param description
		var qrDescription string
		if o.Description != nil {
			qrDescription = *o.Description
		}
		qDescription := qrDescription
		if qDescription != "" {
			if err := r.SetQueryParam("description", qDescription); err != nil {
				return err
			}
		}

	}

	if o.ExternalID != nil {

		// query param externalId
		var qrExternalID string
		if o.ExternalID != nil {
			qrExternalID = *o.ExternalID
		}
		qExternalID := qrExternalID
		if qExternalID != "" {
			if err := r.SetQueryParam("externalId", qExternalID); err != nil {
				return err
			}
		}

	}

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Modified != nil {

		// query param modified
		var qrModified strfmt.DateTime
		if o.Modified != nil {
			qrModified = *o.Modified
		}
		qModified := qrModified.String()
		if qModified != "" {
			if err := r.SetQueryParam("modified", qModified); err != nil {
				return err
			}
		}

	}

	if o.ModifiedCompare != nil {

		// query param modifiedCompare
		var qrModifiedCompare string
		if o.ModifiedCompare != nil {
			qrModifiedCompare = *o.ModifiedCompare
		}
		qModifiedCompare := qrModifiedCompare
		if qModifiedCompare != "" {
			if err := r.SetQueryParam("modifiedCompare", qModifiedCompare); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int32
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt32(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.Organization != nil {

		// query param organization
		var qrOrganization bool
		if o.Organization != nil {
			qrOrganization = *o.Organization
		}
		qOrganization := swag.FormatBool(qrOrganization)
		if qOrganization != "" {
			if err := r.SetQueryParam("organization", qOrganization); err != nil {
				return err
			}
		}

	}

	if o.Sort != nil {

		// query param sort
		var qrSort string
		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {
			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}

	}

	if o.TermID != nil {

		// query param termId
		var qrTermID string
		if o.TermID != nil {
			qrTermID = *o.TermID
		}
		qTermID := qrTermID
		if qTermID != "" {
			if err := r.SetQueryParam("termId", qTermID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
