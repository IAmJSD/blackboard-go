// Code generated by go-swagger; DO NOT EDIT.

package deprecated_courses

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/jakemakesstuff/blackboard-go/models"
)

// DeleteLearnAPIPublicV2CoursesCourseIDReader is a Reader for the DeleteLearnAPIPublicV2CoursesCourseID structure.
type DeleteLearnAPIPublicV2CoursesCourseIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteLearnAPIPublicV2CoursesCourseIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteLearnAPIPublicV2CoursesCourseIDNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteLearnAPIPublicV2CoursesCourseIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteLearnAPIPublicV2CoursesCourseIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteLearnAPIPublicV2CoursesCourseIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteLearnAPIPublicV2CoursesCourseIDNoContent creates a DeleteLearnAPIPublicV2CoursesCourseIDNoContent with default headers values
func NewDeleteLearnAPIPublicV2CoursesCourseIDNoContent() *DeleteLearnAPIPublicV2CoursesCourseIDNoContent {
	return &DeleteLearnAPIPublicV2CoursesCourseIDNoContent{}
}

/*DeleteLearnAPIPublicV2CoursesCourseIDNoContent handles this case with default header values.

No Content
*/
type DeleteLearnAPIPublicV2CoursesCourseIDNoContent struct {
}

func (o *DeleteLearnAPIPublicV2CoursesCourseIDNoContent) Error() string {
	return fmt.Sprintf("[DELETE /learn/api/public/v2/courses/{courseId}][%d] deleteLearnApiPublicV2CoursesCourseIdNoContent ", 204)
}

func (o *DeleteLearnAPIPublicV2CoursesCourseIDNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteLearnAPIPublicV2CoursesCourseIDBadRequest creates a DeleteLearnAPIPublicV2CoursesCourseIDBadRequest with default headers values
func NewDeleteLearnAPIPublicV2CoursesCourseIDBadRequest() *DeleteLearnAPIPublicV2CoursesCourseIDBadRequest {
	return &DeleteLearnAPIPublicV2CoursesCourseIDBadRequest{}
}

/*DeleteLearnAPIPublicV2CoursesCourseIDBadRequest handles this case with default header values.

Invalid courseId provided
*/
type DeleteLearnAPIPublicV2CoursesCourseIDBadRequest struct {
	Payload *models.RestException
}

func (o *DeleteLearnAPIPublicV2CoursesCourseIDBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /learn/api/public/v2/courses/{courseId}][%d] deleteLearnApiPublicV2CoursesCourseIdBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteLearnAPIPublicV2CoursesCourseIDBadRequest) GetPayload() *models.RestException {
	return o.Payload
}

func (o *DeleteLearnAPIPublicV2CoursesCourseIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLearnAPIPublicV2CoursesCourseIDForbidden creates a DeleteLearnAPIPublicV2CoursesCourseIDForbidden with default headers values
func NewDeleteLearnAPIPublicV2CoursesCourseIDForbidden() *DeleteLearnAPIPublicV2CoursesCourseIDForbidden {
	return &DeleteLearnAPIPublicV2CoursesCourseIDForbidden{}
}

/*DeleteLearnAPIPublicV2CoursesCourseIDForbidden handles this case with default header values.

The user is not authorized to delete the specified Course object
*/
type DeleteLearnAPIPublicV2CoursesCourseIDForbidden struct {
	Payload *models.RestException
}

func (o *DeleteLearnAPIPublicV2CoursesCourseIDForbidden) Error() string {
	return fmt.Sprintf("[DELETE /learn/api/public/v2/courses/{courseId}][%d] deleteLearnApiPublicV2CoursesCourseIdForbidden  %+v", 403, o.Payload)
}

func (o *DeleteLearnAPIPublicV2CoursesCourseIDForbidden) GetPayload() *models.RestException {
	return o.Payload
}

func (o *DeleteLearnAPIPublicV2CoursesCourseIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLearnAPIPublicV2CoursesCourseIDNotFound creates a DeleteLearnAPIPublicV2CoursesCourseIDNotFound with default headers values
func NewDeleteLearnAPIPublicV2CoursesCourseIDNotFound() *DeleteLearnAPIPublicV2CoursesCourseIDNotFound {
	return &DeleteLearnAPIPublicV2CoursesCourseIDNotFound{}
}

/*DeleteLearnAPIPublicV2CoursesCourseIDNotFound handles this case with default header values.

Not Found
*/
type DeleteLearnAPIPublicV2CoursesCourseIDNotFound struct {
	Payload *models.RestException
}

func (o *DeleteLearnAPIPublicV2CoursesCourseIDNotFound) Error() string {
	return fmt.Sprintf("[DELETE /learn/api/public/v2/courses/{courseId}][%d] deleteLearnApiPublicV2CoursesCourseIdNotFound  %+v", 404, o.Payload)
}

func (o *DeleteLearnAPIPublicV2CoursesCourseIDNotFound) GetPayload() *models.RestException {
	return o.Payload
}

func (o *DeleteLearnAPIPublicV2CoursesCourseIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
