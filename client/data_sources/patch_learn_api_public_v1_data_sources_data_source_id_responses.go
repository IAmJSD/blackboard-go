// Code generated by go-swagger; DO NOT EDIT.

package data_sources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/jakemakesstuff/blackboard-go/models"
)

// PatchLearnAPIPublicV1DataSourcesDataSourceIDReader is a Reader for the PatchLearnAPIPublicV1DataSourcesDataSourceID structure.
type PatchLearnAPIPublicV1DataSourcesDataSourceIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchLearnAPIPublicV1DataSourcesDataSourceIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchLearnAPIPublicV1DataSourcesDataSourceIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchLearnAPIPublicV1DataSourcesDataSourceIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchLearnAPIPublicV1DataSourcesDataSourceIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchLearnAPIPublicV1DataSourcesDataSourceIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPatchLearnAPIPublicV1DataSourcesDataSourceIDConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchLearnAPIPublicV1DataSourcesDataSourceIDOK creates a PatchLearnAPIPublicV1DataSourcesDataSourceIDOK with default headers values
func NewPatchLearnAPIPublicV1DataSourcesDataSourceIDOK() *PatchLearnAPIPublicV1DataSourcesDataSourceIDOK {
	return &PatchLearnAPIPublicV1DataSourcesDataSourceIDOK{}
}

/*PatchLearnAPIPublicV1DataSourcesDataSourceIDOK handles this case with default header values.

OK
*/
type PatchLearnAPIPublicV1DataSourcesDataSourceIDOK struct {
	Payload *models.DataSource
}

func (o *PatchLearnAPIPublicV1DataSourcesDataSourceIDOK) Error() string {
	return fmt.Sprintf("[PATCH /learn/api/public/v1/dataSources/{dataSourceId}][%d] patchLearnApiPublicV1DataSourcesDataSourceIdOK  %+v", 200, o.Payload)
}

func (o *PatchLearnAPIPublicV1DataSourcesDataSourceIDOK) GetPayload() *models.DataSource {
	return o.Payload
}

func (o *PatchLearnAPIPublicV1DataSourcesDataSourceIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DataSource)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearnAPIPublicV1DataSourcesDataSourceIDBadRequest creates a PatchLearnAPIPublicV1DataSourcesDataSourceIDBadRequest with default headers values
func NewPatchLearnAPIPublicV1DataSourcesDataSourceIDBadRequest() *PatchLearnAPIPublicV1DataSourcesDataSourceIDBadRequest {
	return &PatchLearnAPIPublicV1DataSourcesDataSourceIDBadRequest{}
}

/*PatchLearnAPIPublicV1DataSourcesDataSourceIDBadRequest handles this case with default header values.

Bad Request
*/
type PatchLearnAPIPublicV1DataSourcesDataSourceIDBadRequest struct {
	Payload *models.RestException
}

func (o *PatchLearnAPIPublicV1DataSourcesDataSourceIDBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /learn/api/public/v1/dataSources/{dataSourceId}][%d] patchLearnApiPublicV1DataSourcesDataSourceIdBadRequest  %+v", 400, o.Payload)
}

func (o *PatchLearnAPIPublicV1DataSourcesDataSourceIDBadRequest) GetPayload() *models.RestException {
	return o.Payload
}

func (o *PatchLearnAPIPublicV1DataSourcesDataSourceIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearnAPIPublicV1DataSourcesDataSourceIDForbidden creates a PatchLearnAPIPublicV1DataSourcesDataSourceIDForbidden with default headers values
func NewPatchLearnAPIPublicV1DataSourcesDataSourceIDForbidden() *PatchLearnAPIPublicV1DataSourcesDataSourceIDForbidden {
	return &PatchLearnAPIPublicV1DataSourcesDataSourceIDForbidden{}
}

/*PatchLearnAPIPublicV1DataSourcesDataSourceIDForbidden handles this case with default header values.

Forbidden
*/
type PatchLearnAPIPublicV1DataSourcesDataSourceIDForbidden struct {
	Payload *models.RestException
}

func (o *PatchLearnAPIPublicV1DataSourcesDataSourceIDForbidden) Error() string {
	return fmt.Sprintf("[PATCH /learn/api/public/v1/dataSources/{dataSourceId}][%d] patchLearnApiPublicV1DataSourcesDataSourceIdForbidden  %+v", 403, o.Payload)
}

func (o *PatchLearnAPIPublicV1DataSourcesDataSourceIDForbidden) GetPayload() *models.RestException {
	return o.Payload
}

func (o *PatchLearnAPIPublicV1DataSourcesDataSourceIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearnAPIPublicV1DataSourcesDataSourceIDNotFound creates a PatchLearnAPIPublicV1DataSourcesDataSourceIDNotFound with default headers values
func NewPatchLearnAPIPublicV1DataSourcesDataSourceIDNotFound() *PatchLearnAPIPublicV1DataSourcesDataSourceIDNotFound {
	return &PatchLearnAPIPublicV1DataSourcesDataSourceIDNotFound{}
}

/*PatchLearnAPIPublicV1DataSourcesDataSourceIDNotFound handles this case with default header values.

Not Found
*/
type PatchLearnAPIPublicV1DataSourcesDataSourceIDNotFound struct {
	Payload *models.RestException
}

func (o *PatchLearnAPIPublicV1DataSourcesDataSourceIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /learn/api/public/v1/dataSources/{dataSourceId}][%d] patchLearnApiPublicV1DataSourcesDataSourceIdNotFound  %+v", 404, o.Payload)
}

func (o *PatchLearnAPIPublicV1DataSourcesDataSourceIDNotFound) GetPayload() *models.RestException {
	return o.Payload
}

func (o *PatchLearnAPIPublicV1DataSourcesDataSourceIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearnAPIPublicV1DataSourcesDataSourceIDConflict creates a PatchLearnAPIPublicV1DataSourcesDataSourceIDConflict with default headers values
func NewPatchLearnAPIPublicV1DataSourcesDataSourceIDConflict() *PatchLearnAPIPublicV1DataSourcesDataSourceIDConflict {
	return &PatchLearnAPIPublicV1DataSourcesDataSourceIDConflict{}
}

/*PatchLearnAPIPublicV1DataSourcesDataSourceIDConflict handles this case with default header values.

Conflict
*/
type PatchLearnAPIPublicV1DataSourcesDataSourceIDConflict struct {
	Payload *models.RestException
}

func (o *PatchLearnAPIPublicV1DataSourcesDataSourceIDConflict) Error() string {
	return fmt.Sprintf("[PATCH /learn/api/public/v1/dataSources/{dataSourceId}][%d] patchLearnApiPublicV1DataSourcesDataSourceIdConflict  %+v", 409, o.Payload)
}

func (o *PatchLearnAPIPublicV1DataSourcesDataSourceIDConflict) GetPayload() *models.RestException {
	return o.Payload
}

func (o *PatchLearnAPIPublicV1DataSourcesDataSourceIDConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PatchLearnAPIPublicV1DataSourcesDataSourceIDBody patch learn API public v1 data sources data source ID body
swagger:model PatchLearnAPIPublicV1DataSourcesDataSourceIDBody
*/
type PatchLearnAPIPublicV1DataSourcesDataSourceIDBody struct {

	// The description of the data source.
	Description string `json:"description,omitempty"`

	// An externally-defined unique ID for the data source.
	//
	// Formerly known as 'batchUid'.
	ExternalID string `json:"externalId,omitempty"`
}

// Validate validates this patch learn API public v1 data sources data source ID body
func (o *PatchLearnAPIPublicV1DataSourcesDataSourceIDBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchLearnAPIPublicV1DataSourcesDataSourceIDBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchLearnAPIPublicV1DataSourcesDataSourceIDBody) UnmarshalBinary(b []byte) error {
	var res PatchLearnAPIPublicV1DataSourcesDataSourceIDBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
