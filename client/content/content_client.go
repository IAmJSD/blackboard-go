// Code generated by go-swagger; DO NOT EDIT.

package content

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new content API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for content API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteLearnAPIPublicV1CoursesCourseIDContentsContentID(params *DeleteLearnAPIPublicV1CoursesCourseIDContentsContentIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLearnAPIPublicV1CoursesCourseIDContentsContentIDNoContent, error)

	GetLearnAPIPublicV1CoursesCourseIDContents(params *GetLearnAPIPublicV1CoursesCourseIDContentsParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1CoursesCourseIDContentsOK, error)

	GetLearnAPIPublicV1CoursesCourseIDContentsContentID(params *GetLearnAPIPublicV1CoursesCourseIDContentsContentIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1CoursesCourseIDContentsContentIDOK, error)

	GetLearnAPIPublicV1CoursesCourseIDContentsContentIDChildren(params *GetLearnAPIPublicV1CoursesCourseIDContentsContentIDChildrenParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1CoursesCourseIDContentsContentIDChildrenOK, error)

	PatchLearnAPIPublicV1CoursesCourseIDContentsContentID(params *PatchLearnAPIPublicV1CoursesCourseIDContentsContentIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchLearnAPIPublicV1CoursesCourseIDContentsContentIDOK, error)

	PostLearnAPIPublicV1CoursesCourseIDContents(params *PostLearnAPIPublicV1CoursesCourseIDContentsParams, authInfo runtime.ClientAuthInfoWriter) (*PostLearnAPIPublicV1CoursesCourseIDContentsCreated, error)

	PostLearnAPIPublicV1CoursesCourseIDContentsContentIDChildren(params *PostLearnAPIPublicV1CoursesCourseIDContentsContentIDChildrenParams, authInfo runtime.ClientAuthInfoWriter) (*PostLearnAPIPublicV1CoursesCourseIDContentsContentIDChildrenCreated, error)

	PostLearnAPIPublicV1CoursesCourseIDContentsCreateAssignment(params *PostLearnAPIPublicV1CoursesCourseIDContentsCreateAssignmentParams, authInfo runtime.ClientAuthInfoWriter) (*PostLearnAPIPublicV1CoursesCourseIDContentsCreateAssignmentCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteLearnAPIPublicV1CoursesCourseIDContentsContentID deletes content

  Delete a content item.

The 'course.content.DELETE' entitlement is required.

**Since**: 3000.1.0
*/
func (a *Client) DeleteLearnAPIPublicV1CoursesCourseIDContentsContentID(params *DeleteLearnAPIPublicV1CoursesCourseIDContentsContentIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLearnAPIPublicV1CoursesCourseIDContentsContentIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLearnAPIPublicV1CoursesCourseIDContentsContentIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLearnAPIPublicV1CoursesCourseIDContentsContentID",
		Method:             "DELETE",
		PathPattern:        "/learn/api/public/v1/courses/{courseId}/contents/{contentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteLearnAPIPublicV1CoursesCourseIDContentsContentIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLearnAPIPublicV1CoursesCourseIDContentsContentIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLearnAPIPublicV1CoursesCourseIDContentsContentID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnAPIPublicV1CoursesCourseIDContents gets contents

  List top-level content items in a course.

Users with at least one of the following entitlements may access any content item:

- course.adaptiverelease.CREATE
- course.adaptiverelease.DELETE
- course.adaptiverelease.MODIFY
- course.adaptiverelease.VIEW
- course.configure-areas.EXECUTE
- course.content-item.copy.EXECUTE
- course.content.DELETE
- course.content.MODIFY
- course.learningstandards.alignment.CREATE
- course.performance.dashboard.VIEW
</p>

For other users, permission to view the content item will depend on the availability settings of the course and  the content item.  The following fields will be filtered out:

- availability.available
- availability.allowGuests
- availability.adaptiveRelease
</p>

**Since**: 3000.1.0
*/
func (a *Client) GetLearnAPIPublicV1CoursesCourseIDContents(params *GetLearnAPIPublicV1CoursesCourseIDContentsParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1CoursesCourseIDContentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV1CoursesCourseIDContentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV1CoursesCourseIDContents",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v1/courses/{courseId}/contents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV1CoursesCourseIDContentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV1CoursesCourseIDContentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV1CoursesCourseIDContents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnAPIPublicV1CoursesCourseIDContentsContentID gets content

  Load a specific content item from a course.

Users with at least one of the following entitlements may access any content item:

- course.adaptiverelease.CREATE
- course.adaptiverelease.DELETE
- course.adaptiverelease.MODIFY
- course.adaptiverelease.VIEW
- course.configure-areas.EXECUTE
- course.content-item.copy.EXECUTE
- course.content.DELETE
- course.content.MODIFY
- course.learningstandards.alignment.CREATE
- course.performance.dashboard.VIEW

For other users, permission to view the content item will depend on the availability settings of the course and the content item.  The following fields will be filtered out:

- availability.available
- availability.allowGuests
- availability.adaptiveRelease

**Since**: 3000.1.0
*/
func (a *Client) GetLearnAPIPublicV1CoursesCourseIDContentsContentID(params *GetLearnAPIPublicV1CoursesCourseIDContentsContentIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1CoursesCourseIDContentsContentIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV1CoursesCourseIDContentsContentIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV1CoursesCourseIDContentsContentID",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v1/courses/{courseId}/contents/{contentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV1CoursesCourseIDContentsContentIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV1CoursesCourseIDContentsContentIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV1CoursesCourseIDContentsContentID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnAPIPublicV1CoursesCourseIDContentsContentIDChildren gets content children

  List all child content items directly beneath another content item.  This is only valid for content items that are allowed to have children (e.g. Folders).

Users with at least one of the following entitlements may access all child contents from a content item:

- course.adaptiverelease.CREATE
- course.adaptiverelease.DELETE
- course.adaptiverelease.MODIFY
- course.adaptiverelease.VIEW
- course.configure-areas.EXECUTE
- course.content-item.copy.EXECUTE
- course.content.DELETE
- course.content.MODIFY
- course.learningstandards.alignment.CREATE
- course.performance.dashboard.VIEW
In any of the following cases, the user may also get the child contents from a content item.

- The user has a role in the course other than guest or observer, and doesn't have any of the previously mentioned entitlements.
- The user has the role of observer, and both the course and the underlying content allow observer access.
- The user accesses the course as guest, both the course and the underlying content allow guest access, further, the course content menu allows guest access as well for the original courses.
For other users, permission to view the content item will depend on the availability settings of the course and  the content item. The following fields will be filtered out:

- availability.available
- availability.allowGuests
- availability.adaptiveRelease
</p>

**Since**: 3000.1.0
*/
func (a *Client) GetLearnAPIPublicV1CoursesCourseIDContentsContentIDChildren(params *GetLearnAPIPublicV1CoursesCourseIDContentsContentIDChildrenParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1CoursesCourseIDContentsContentIDChildrenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV1CoursesCourseIDContentsContentIDChildrenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV1CoursesCourseIDContentsContentIDChildren",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v1/courses/{courseId}/contents/{contentId}/children",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV1CoursesCourseIDContentsContentIDChildrenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV1CoursesCourseIDContentsContentIDChildrenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV1CoursesCourseIDContentsContentIDChildren: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchLearnAPIPublicV1CoursesCourseIDContentsContentID updates content

  Update a content item.

The 'course.content.MODIFY' entitlement is required.

**Since**: 3000.1.0
*/
func (a *Client) PatchLearnAPIPublicV1CoursesCourseIDContentsContentID(params *PatchLearnAPIPublicV1CoursesCourseIDContentsContentIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchLearnAPIPublicV1CoursesCourseIDContentsContentIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchLearnAPIPublicV1CoursesCourseIDContentsContentIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchLearnAPIPublicV1CoursesCourseIDContentsContentID",
		Method:             "PATCH",
		PathPattern:        "/learn/api/public/v1/courses/{courseId}/contents/{contentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchLearnAPIPublicV1CoursesCourseIDContentsContentIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchLearnAPIPublicV1CoursesCourseIDContentsContentIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchLearnAPIPublicV1CoursesCourseIDContentsContentID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostLearnAPIPublicV1CoursesCourseIDContents creates content

  Create a new top-level content item. Currently only folders may be created as top-level content items in a Classic course. For Ultra courses any content item is allowed and will be placed under the ROOT folder. Entitlement "course.content.CREATE" required to create Course Content.

**Since**: 3000.7.0
*/
func (a *Client) PostLearnAPIPublicV1CoursesCourseIDContents(params *PostLearnAPIPublicV1CoursesCourseIDContentsParams, authInfo runtime.ClientAuthInfoWriter) (*PostLearnAPIPublicV1CoursesCourseIDContentsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLearnAPIPublicV1CoursesCourseIDContentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLearnAPIPublicV1CoursesCourseIDContents",
		Method:             "POST",
		PathPattern:        "/learn/api/public/v1/courses/{courseId}/contents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostLearnAPIPublicV1CoursesCourseIDContentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLearnAPIPublicV1CoursesCourseIDContentsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLearnAPIPublicV1CoursesCourseIDContents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostLearnAPIPublicV1CoursesCourseIDContentsContentIDChildren creates child

  Create a new child content item beneath an existing content item.  This is only valid for content items that are allowed to have children (e.g. Folders). Entitlement "course.content.CREATE" required to create Course Content.

**Since**: 3000.1.0
*/
func (a *Client) PostLearnAPIPublicV1CoursesCourseIDContentsContentIDChildren(params *PostLearnAPIPublicV1CoursesCourseIDContentsContentIDChildrenParams, authInfo runtime.ClientAuthInfoWriter) (*PostLearnAPIPublicV1CoursesCourseIDContentsContentIDChildrenCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLearnAPIPublicV1CoursesCourseIDContentsContentIDChildrenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLearnAPIPublicV1CoursesCourseIDContentsContentIDChildren",
		Method:             "POST",
		PathPattern:        "/learn/api/public/v1/courses/{courseId}/contents/{contentId}/children",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostLearnAPIPublicV1CoursesCourseIDContentsContentIDChildrenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLearnAPIPublicV1CoursesCourseIDContentsContentIDChildrenCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLearnAPIPublicV1CoursesCourseIDContentsContentIDChildren: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostLearnAPIPublicV1CoursesCourseIDContentsCreateAssignment creates assignment

  Create assignment content, grade column and file attachments in one POST. Any files specified with assignment creation must be previously uploaded using the uploads endpoint. Ultra courses supported since 3300.9.0 Classic courses supported since 3400.9.0 </p> For Ultra courses, this will create:

- A content item with a contentHandler.id = resource/x-bb-asmt-test-link
- A gradebook column with contentId = id of the new content
- An assessment question with questionHandler.type = presentation that includes the instructions as the question text
- An assessment question with questionHandler.type = presentation for each given file attachment
</p> The following entitlements are required to create an Ultra assignment:

- course.content.CREATE
- course.assessment.CREATE
- course.content.assessment.deploy.EXECUTE
- course.gradebook.MODIFY
- course.assessment.MODIFY, if instructions or files are specified
</p> For Classic courses, this will create:

- A content item with contentHandler.id = resource/x-bb-assignment
- A gradebook column with contentId = id of the new content
- A file attachment for each given file attachment id
The following entitlements are required to create a Classic assignment:

- course.content.CREATE
- course.gradebook.MODIFY
- course.content.MODIFY, if files are specified
</p>

**Since**: 3300.9.0
*/
func (a *Client) PostLearnAPIPublicV1CoursesCourseIDContentsCreateAssignment(params *PostLearnAPIPublicV1CoursesCourseIDContentsCreateAssignmentParams, authInfo runtime.ClientAuthInfoWriter) (*PostLearnAPIPublicV1CoursesCourseIDContentsCreateAssignmentCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLearnAPIPublicV1CoursesCourseIDContentsCreateAssignmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLearnAPIPublicV1CoursesCourseIDContentsCreateAssignment",
		Method:             "POST",
		PathPattern:        "/learn/api/public/v1/courses/{courseId}/contents/createAssignment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostLearnAPIPublicV1CoursesCourseIDContentsCreateAssignmentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLearnAPIPublicV1CoursesCourseIDContentsCreateAssignmentCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLearnAPIPublicV1CoursesCourseIDContentsCreateAssignment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
