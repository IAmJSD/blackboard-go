// Code generated by go-swagger; DO NOT EDIT.

package course_announcements

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/jakemakesstuff/blackboard-go/models"
)

// PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDReader is a Reader for the PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementID structure.
type PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDOK creates a PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDOK with default headers values
func NewPatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDOK() *PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDOK {
	return &PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDOK{}
}

/*PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDOK handles this case with default header values.

OK
*/
type PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDOK struct {
	Payload *models.CourseAnnouncement
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDOK) Error() string {
	return fmt.Sprintf("[PATCH /learn/api/public/v1/courses/{courseId}/announcements/{announcementId}][%d] patchLearnApiPublicV1CoursesCourseIdAnnouncementsAnnouncementIdOK  %+v", 200, o.Payload)
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDOK) GetPayload() *models.CourseAnnouncement {
	return o.Payload
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CourseAnnouncement)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDBadRequest creates a PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDBadRequest with default headers values
func NewPatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDBadRequest() *PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDBadRequest {
	return &PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDBadRequest{}
}

/*PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDBadRequest handles this case with default header values.

An invalid request state was found while updating an announcement
*/
type PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDBadRequest struct {
	Payload *models.RestException
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /learn/api/public/v1/courses/{courseId}/announcements/{announcementId}][%d] patchLearnApiPublicV1CoursesCourseIdAnnouncementsAnnouncementIdBadRequest  %+v", 400, o.Payload)
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDBadRequest) GetPayload() *models.RestException {
	return o.Payload
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDForbidden creates a PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDForbidden with default headers values
func NewPatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDForbidden() *PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDForbidden {
	return &PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDForbidden{}
}

/*PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDForbidden handles this case with default header values.

The currently authenticated user has insufficient privileges to update an announcement
*/
type PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDForbidden struct {
	Payload *models.RestException
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDForbidden) Error() string {
	return fmt.Sprintf("[PATCH /learn/api/public/v1/courses/{courseId}/announcements/{announcementId}][%d] patchLearnApiPublicV1CoursesCourseIdAnnouncementsAnnouncementIdForbidden  %+v", 403, o.Payload)
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDForbidden) GetPayload() *models.RestException {
	return o.Payload
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDNotFound creates a PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDNotFound with default headers values
func NewPatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDNotFound() *PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDNotFound {
	return &PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDNotFound{}
}

/*PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDNotFound handles this case with default header values.

Announcement cannot be found
*/
type PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDNotFound struct {
	Payload *models.RestException
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /learn/api/public/v1/courses/{courseId}/announcements/{announcementId}][%d] patchLearnApiPublicV1CoursesCourseIdAnnouncementsAnnouncementIdNotFound  %+v", 404, o.Payload)
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDNotFound) GetPayload() *models.RestException {
	return o.Payload
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDBody patch learn API public v1 courses course ID announcements announcement ID body
swagger:model PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDBody
*/
type PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDBody struct {

	// availability
	Availability *PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDParamsBodyAvailability `json:"availability,omitempty"`

	// The message body of the Announcement. This field supports BbML; see <a target='_blank' href='https://docs.blackboard.com/learn/REST/Blackboard%20Markup%20Language%20-%20BbML.html'>here</a> for more information.
	Body string `json:"body,omitempty"`

	// An indication of whether or not the Announcement is in draft status.
	Draft bool `json:"draft,omitempty"`

	// The title of this Announcement.
	Title string `json:"title,omitempty"`
}

// Validate validates this patch learn API public v1 courses course ID announcements announcement ID body
func (o *PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAvailability(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDBody) validateAvailability(formats strfmt.Registry) error {

	if swag.IsZero(o.Availability) { // not required
		return nil
	}

	if o.Availability != nil {
		if err := o.Availability.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("input" + "." + "availability")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDBody) UnmarshalBinary(b []byte) error {
	var res PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDParamsBodyAvailability Availability
//
// Settings controlling availability of the course to students.
swagger:model PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDParamsBodyAvailability
*/
type PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDParamsBodyAvailability struct {

	// duration
	Duration *PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDParamsBodyAvailabilityDuration `json:"duration,omitempty"`
}

// Validate validates this patch learn API public v1 courses course ID announcements announcement ID params body availability
func (o *PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDParamsBodyAvailability) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDuration(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDParamsBodyAvailability) validateDuration(formats strfmt.Registry) error {

	if swag.IsZero(o.Duration) { // not required
		return nil
	}

	if o.Duration != nil {
		if err := o.Duration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("input" + "." + "availability" + "." + "duration")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDParamsBodyAvailability) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDParamsBodyAvailability) UnmarshalBinary(b []byte) error {
	var res PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDParamsBodyAvailability
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDParamsBodyAvailabilityDuration Duration
//
// Duration indicates when the System Announcement is Available based on whether it is Permanent or if the date/time of the request falls within its Start & End dates.
swagger:model PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDParamsBodyAvailabilityDuration
*/
type PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDParamsBodyAvailabilityDuration struct {

	// The date this Announcement stops being Available.
	// Format: date-time
	End strfmt.DateTime `json:"end,omitempty"`

	// The date this Announcement starts being Available.
	// Format: date-time
	Start strfmt.DateTime `json:"start,omitempty"`
}

// Validate validates this patch learn API public v1 courses course ID announcements announcement ID params body availability duration
func (o *PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDParamsBodyAvailabilityDuration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStart(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDParamsBodyAvailabilityDuration) validateEnd(formats strfmt.Registry) error {

	if swag.IsZero(o.End) { // not required
		return nil
	}

	if err := validate.FormatOf("input"+"."+"availability"+"."+"duration"+"."+"end", "body", "date-time", o.End.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDParamsBodyAvailabilityDuration) validateStart(formats strfmt.Registry) error {

	if swag.IsZero(o.Start) { // not required
		return nil
	}

	if err := validate.FormatOf("input"+"."+"availability"+"."+"duration"+"."+"start", "body", "date-time", o.Start.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDParamsBodyAvailabilityDuration) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDParamsBodyAvailabilityDuration) UnmarshalBinary(b []byte) error {
	var res PatchLearnAPIPublicV1CoursesCourseIDAnnouncementsAnnouncementIDParamsBodyAvailabilityDuration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
