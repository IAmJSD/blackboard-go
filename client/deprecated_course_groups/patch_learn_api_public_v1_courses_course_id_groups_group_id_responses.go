// Code generated by go-swagger; DO NOT EDIT.

package deprecated_course_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/jakemakesstuff/blackboard-go/models"
)

// PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDReader is a Reader for the PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupID structure.
type PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDOK creates a PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDOK with default headers values
func NewPatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDOK() *PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDOK {
	return &PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDOK{}
}

/*PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDOK handles this case with default header values.

OK
*/
type PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDOK struct {
	Payload *models.Group
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDOK) Error() string {
	return fmt.Sprintf("[PATCH /learn/api/public/v1/courses/{courseId}/groups/{groupId}][%d] patchLearnApiPublicV1CoursesCourseIdGroupsGroupIdOK  %+v", 200, o.Payload)
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDOK) GetPayload() *models.Group {
	return o.Payload
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Group)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDBadRequest creates a PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDBadRequest with default headers values
func NewPatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDBadRequest() *PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDBadRequest {
	return &PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDBadRequest{}
}

/*PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDBadRequest handles this case with default header values.

Bad Request
*/
type PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDBadRequest struct {
	Payload *models.RestException
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /learn/api/public/v1/courses/{courseId}/groups/{groupId}][%d] patchLearnApiPublicV1CoursesCourseIdGroupsGroupIdBadRequest  %+v", 400, o.Payload)
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDBadRequest) GetPayload() *models.RestException {
	return o.Payload
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDForbidden creates a PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDForbidden with default headers values
func NewPatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDForbidden() *PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDForbidden {
	return &PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDForbidden{}
}

/*PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDForbidden handles this case with default header values.

Forbidden
*/
type PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDForbidden struct {
	Payload *models.RestException
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDForbidden) Error() string {
	return fmt.Sprintf("[PATCH /learn/api/public/v1/courses/{courseId}/groups/{groupId}][%d] patchLearnApiPublicV1CoursesCourseIdGroupsGroupIdForbidden  %+v", 403, o.Payload)
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDForbidden) GetPayload() *models.RestException {
	return o.Payload
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDNotFound creates a PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDNotFound with default headers values
func NewPatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDNotFound() *PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDNotFound {
	return &PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDNotFound{}
}

/*PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDNotFound handles this case with default header values.

Not Found
*/
type PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDNotFound struct {
	Payload *models.RestException
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /learn/api/public/v1/courses/{courseId}/groups/{groupId}][%d] patchLearnApiPublicV1CoursesCourseIdGroupsGroupIdNotFound  %+v", 404, o.Payload)
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDNotFound) GetPayload() *models.RestException {
	return o.Payload
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDConflict creates a PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDConflict with default headers values
func NewPatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDConflict() *PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDConflict {
	return &PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDConflict{}
}

/*PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDConflict handles this case with default header values.

Conflict
*/
type PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDConflict struct {
	Payload *models.RestException
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDConflict) Error() string {
	return fmt.Sprintf("[PATCH /learn/api/public/v1/courses/{courseId}/groups/{groupId}][%d] patchLearnApiPublicV1CoursesCourseIdGroupsGroupIdConflict  %+v", 409, o.Payload)
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDConflict) GetPayload() *models.RestException {
	return o.Payload
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDBody patch learn API public v1 courses course ID groups group ID body
swagger:model PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDBody
*/
type PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDBody struct {

	// availability
	Availability *PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDParamsBodyAvailability `json:"availability,omitempty"`

	// The description of the group. This field supports BbML; see <a target='_blank' href='https://docs.blackboard.com/learn/REST/Blackboard%20Markup%20Language%20-%20BbML.html'>here</a> for more information.
	Description string `json:"description,omitempty"`

	// enrollment
	Enrollment *PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDParamsBodyEnrollment `json:"enrollment,omitempty"`

	// An externally-defined unique ID for the group. Defaults to a random UUID if not provided during create.
	ExternalID string `json:"externalId,omitempty"`

	// The title of the group.
	Name string `json:"name,omitempty"`

	// The primary ID of the group's parent group set.
	ParentID string `json:"parentId,omitempty"`
}

// Validate validates this patch learn API public v1 courses course ID groups group ID body
func (o *PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAvailability(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEnrollment(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDBody) validateAvailability(formats strfmt.Registry) error {

	if swag.IsZero(o.Availability) { // not required
		return nil
	}

	if o.Availability != nil {
		if err := o.Availability.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("input" + "." + "availability")
			}
			return err
		}
	}

	return nil
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDBody) validateEnrollment(formats strfmt.Registry) error {

	if swag.IsZero(o.Enrollment) { // not required
		return nil
	}

	if o.Enrollment != nil {
		if err := o.Enrollment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("input" + "." + "enrollment")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDBody) UnmarshalBinary(b []byte) error {
	var res PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDParamsBodyAvailability Availability
//
// Settings controlling availability of the group to students.
swagger:model PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDParamsBodyAvailability
*/
type PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDParamsBodyAvailability struct {

	// Whether the Group is currently available to students.
	//
	//
	// | Type      | Description
	//  | --------- | --------- |
	// | Yes | Students may access the group. |
	// | No | Students may not access the group. |
	// | SignupOnly | Students may only signup and see the group listed, not yet access it. |
	//
	// Enum: [Yes No SignupOnly]
	Available string `json:"available,omitempty"`
}

// Validate validates this patch learn API public v1 courses course ID groups group ID params body availability
func (o *PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDParamsBodyAvailability) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAvailable(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var patchLearnApiPublicV1CoursesCourseIdGroupsGroupIdParamsBodyAvailabilityTypeAvailablePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Yes","No","SignupOnly"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		patchLearnApiPublicV1CoursesCourseIdGroupsGroupIdParamsBodyAvailabilityTypeAvailablePropEnum = append(patchLearnApiPublicV1CoursesCourseIdGroupsGroupIdParamsBodyAvailabilityTypeAvailablePropEnum, v)
	}
}

const (

	// PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDParamsBodyAvailabilityAvailableYes captures enum value "Yes"
	PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDParamsBodyAvailabilityAvailableYes string = "Yes"

	// PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDParamsBodyAvailabilityAvailableNo captures enum value "No"
	PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDParamsBodyAvailabilityAvailableNo string = "No"

	// PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDParamsBodyAvailabilityAvailableSignupOnly captures enum value "SignupOnly"
	PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDParamsBodyAvailabilityAvailableSignupOnly string = "SignupOnly"
)

// prop value enum
func (o *PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDParamsBodyAvailability) validateAvailableEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, patchLearnApiPublicV1CoursesCourseIdGroupsGroupIdParamsBodyAvailabilityTypeAvailablePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDParamsBodyAvailability) validateAvailable(formats strfmt.Registry) error {

	if swag.IsZero(o.Available) { // not required
		return nil
	}

	// value enum
	if err := o.validateAvailableEnum("input"+"."+"availability"+"."+"available", "body", o.Available); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDParamsBodyAvailability) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDParamsBodyAvailability) UnmarshalBinary(b []byte) error {
	var res PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDParamsBodyAvailability
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDParamsBodyEnrollment Enrollment
//
// Settings controlling enrollment of the group to students.
swagger:model PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDParamsBodyEnrollment
*/
type PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDParamsBodyEnrollment struct {

	// The maximum allowed enrollment size for self enrolled groups.
	Limit int32 `json:"limit,omitempty"`

	// signup sheet
	SignupSheet *PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDParamsBodyEnrollmentSignupSheet `json:"signupSheet,omitempty"`
}

// Validate validates this patch learn API public v1 courses course ID groups group ID params body enrollment
func (o *PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDParamsBodyEnrollment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSignupSheet(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDParamsBodyEnrollment) validateSignupSheet(formats strfmt.Registry) error {

	if swag.IsZero(o.SignupSheet) { // not required
		return nil
	}

	if o.SignupSheet != nil {
		if err := o.SignupSheet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("input" + "." + "enrollment" + "." + "signupSheet")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDParamsBodyEnrollment) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDParamsBodyEnrollment) UnmarshalBinary(b []byte) error {
	var res PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDParamsBodyEnrollment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDParamsBodyEnrollmentSignupSheet SignupSheet
//
// Settings controlling signup to the group for students. Only applicable if Enrollment.Type allows self enrollment.
swagger:model PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDParamsBodyEnrollmentSignupSheet
*/
type PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDParamsBodyEnrollmentSignupSheet struct {

	// The description of the signup sheet This field supports BbML; see <a target='_blank' href='https://docs.blackboard.com/learn/REST/Blackboard%20Markup%20Language%20-%20BbML.html'>here</a> for more information.
	Description string `json:"description,omitempty"`

	// The name of the signup sheet
	Name string `json:"name,omitempty"`

	// A boolean indicating whether or not members can be seen by others prior to signing up.
	ShowMembers bool `json:"showMembers,omitempty"`
}

// Validate validates this patch learn API public v1 courses course ID groups group ID params body enrollment signup sheet
func (o *PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDParamsBodyEnrollmentSignupSheet) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDParamsBodyEnrollmentSignupSheet) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDParamsBodyEnrollmentSignupSheet) UnmarshalBinary(b []byte) error {
	var res PatchLearnAPIPublicV1CoursesCourseIDGroupsGroupIDParamsBodyEnrollmentSignupSheet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
