// Code generated by go-swagger; DO NOT EDIT.

package course_memberships

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/jakemakesstuff/blackboard-go/models"
)

// PutLearnAPIPublicV1CoursesCourseIDUsersUserIDReader is a Reader for the PutLearnAPIPublicV1CoursesCourseIDUsersUserID structure.
type PutLearnAPIPublicV1CoursesCourseIDUsersUserIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutLearnAPIPublicV1CoursesCourseIDUsersUserIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewPutLearnAPIPublicV1CoursesCourseIDUsersUserIDCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutLearnAPIPublicV1CoursesCourseIDUsersUserIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutLearnAPIPublicV1CoursesCourseIDUsersUserIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutLearnAPIPublicV1CoursesCourseIDUsersUserIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPutLearnAPIPublicV1CoursesCourseIDUsersUserIDConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutLearnAPIPublicV1CoursesCourseIDUsersUserIDCreated creates a PutLearnAPIPublicV1CoursesCourseIDUsersUserIDCreated with default headers values
func NewPutLearnAPIPublicV1CoursesCourseIDUsersUserIDCreated() *PutLearnAPIPublicV1CoursesCourseIDUsersUserIDCreated {
	return &PutLearnAPIPublicV1CoursesCourseIDUsersUserIDCreated{}
}

/*PutLearnAPIPublicV1CoursesCourseIDUsersUserIDCreated handles this case with default header values.

Created
*/
type PutLearnAPIPublicV1CoursesCourseIDUsersUserIDCreated struct {
	Payload *models.CourseMembership
}

func (o *PutLearnAPIPublicV1CoursesCourseIDUsersUserIDCreated) Error() string {
	return fmt.Sprintf("[PUT /learn/api/public/v1/courses/{courseId}/users/{userId}][%d] putLearnApiPublicV1CoursesCourseIdUsersUserIdCreated  %+v", 201, o.Payload)
}

func (o *PutLearnAPIPublicV1CoursesCourseIDUsersUserIDCreated) GetPayload() *models.CourseMembership {
	return o.Payload
}

func (o *PutLearnAPIPublicV1CoursesCourseIDUsersUserIDCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CourseMembership)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutLearnAPIPublicV1CoursesCourseIDUsersUserIDBadRequest creates a PutLearnAPIPublicV1CoursesCourseIDUsersUserIDBadRequest with default headers values
func NewPutLearnAPIPublicV1CoursesCourseIDUsersUserIDBadRequest() *PutLearnAPIPublicV1CoursesCourseIDUsersUserIDBadRequest {
	return &PutLearnAPIPublicV1CoursesCourseIDUsersUserIDBadRequest{}
}

/*PutLearnAPIPublicV1CoursesCourseIDUsersUserIDBadRequest handles this case with default header values.

Invalid Course in body of request; or User not in same Domain as Logged-on User; or User is an Observer; or Access Code Incorrect; or User is the System Guest; or Invalid CourseMembership data
*/
type PutLearnAPIPublicV1CoursesCourseIDUsersUserIDBadRequest struct {
	Payload *models.RestException
}

func (o *PutLearnAPIPublicV1CoursesCourseIDUsersUserIDBadRequest) Error() string {
	return fmt.Sprintf("[PUT /learn/api/public/v1/courses/{courseId}/users/{userId}][%d] putLearnApiPublicV1CoursesCourseIdUsersUserIdBadRequest  %+v", 400, o.Payload)
}

func (o *PutLearnAPIPublicV1CoursesCourseIDUsersUserIDBadRequest) GetPayload() *models.RestException {
	return o.Payload
}

func (o *PutLearnAPIPublicV1CoursesCourseIDUsersUserIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutLearnAPIPublicV1CoursesCourseIDUsersUserIDForbidden creates a PutLearnAPIPublicV1CoursesCourseIDUsersUserIDForbidden with default headers values
func NewPutLearnAPIPublicV1CoursesCourseIDUsersUserIDForbidden() *PutLearnAPIPublicV1CoursesCourseIDUsersUserIDForbidden {
	return &PutLearnAPIPublicV1CoursesCourseIDUsersUserIDForbidden{}
}

/*PutLearnAPIPublicV1CoursesCourseIDUsersUserIDForbidden handles this case with default header values.

User is a System Admin and the Logged-on User is not a System Administrator; or Logged-on User has insufficient privileges
*/
type PutLearnAPIPublicV1CoursesCourseIDUsersUserIDForbidden struct {
	Payload *models.RestException
}

func (o *PutLearnAPIPublicV1CoursesCourseIDUsersUserIDForbidden) Error() string {
	return fmt.Sprintf("[PUT /learn/api/public/v1/courses/{courseId}/users/{userId}][%d] putLearnApiPublicV1CoursesCourseIdUsersUserIdForbidden  %+v", 403, o.Payload)
}

func (o *PutLearnAPIPublicV1CoursesCourseIDUsersUserIDForbidden) GetPayload() *models.RestException {
	return o.Payload
}

func (o *PutLearnAPIPublicV1CoursesCourseIDUsersUserIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutLearnAPIPublicV1CoursesCourseIDUsersUserIDNotFound creates a PutLearnAPIPublicV1CoursesCourseIDUsersUserIDNotFound with default headers values
func NewPutLearnAPIPublicV1CoursesCourseIDUsersUserIDNotFound() *PutLearnAPIPublicV1CoursesCourseIDUsersUserIDNotFound {
	return &PutLearnAPIPublicV1CoursesCourseIDUsersUserIDNotFound{}
}

/*PutLearnAPIPublicV1CoursesCourseIDUsersUserIDNotFound handles this case with default header values.

User does not exist; or Role does not exist
*/
type PutLearnAPIPublicV1CoursesCourseIDUsersUserIDNotFound struct {
	Payload *models.RestException
}

func (o *PutLearnAPIPublicV1CoursesCourseIDUsersUserIDNotFound) Error() string {
	return fmt.Sprintf("[PUT /learn/api/public/v1/courses/{courseId}/users/{userId}][%d] putLearnApiPublicV1CoursesCourseIdUsersUserIdNotFound  %+v", 404, o.Payload)
}

func (o *PutLearnAPIPublicV1CoursesCourseIDUsersUserIDNotFound) GetPayload() *models.RestException {
	return o.Payload
}

func (o *PutLearnAPIPublicV1CoursesCourseIDUsersUserIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutLearnAPIPublicV1CoursesCourseIDUsersUserIDConflict creates a PutLearnAPIPublicV1CoursesCourseIDUsersUserIDConflict with default headers values
func NewPutLearnAPIPublicV1CoursesCourseIDUsersUserIDConflict() *PutLearnAPIPublicV1CoursesCourseIDUsersUserIDConflict {
	return &PutLearnAPIPublicV1CoursesCourseIDUsersUserIDConflict{}
}

/*PutLearnAPIPublicV1CoursesCourseIDUsersUserIDConflict handles this case with default header values.

User already enrolled
*/
type PutLearnAPIPublicV1CoursesCourseIDUsersUserIDConflict struct {
	Payload *models.RestException
}

func (o *PutLearnAPIPublicV1CoursesCourseIDUsersUserIDConflict) Error() string {
	return fmt.Sprintf("[PUT /learn/api/public/v1/courses/{courseId}/users/{userId}][%d] putLearnApiPublicV1CoursesCourseIdUsersUserIdConflict  %+v", 409, o.Payload)
}

func (o *PutLearnAPIPublicV1CoursesCourseIDUsersUserIDConflict) GetPayload() *models.RestException {
	return o.Payload
}

func (o *PutLearnAPIPublicV1CoursesCourseIDUsersUserIDConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PutLearnAPIPublicV1CoursesCourseIDUsersUserIDBody put learn API public v1 courses course ID users user ID body
swagger:model PutLearnAPIPublicV1CoursesCourseIDUsersUserIDBody
*/
type PutLearnAPIPublicV1CoursesCourseIDUsersUserIDBody struct {

	// Settings controlling availability of the course membership.
	Availability *models.Availability `json:"availability,omitempty"`

	// The primary ID of the child, cross-listed course, in which the user is directly enrolled. </p> This field is read only in Learn versions 3000.11.0 through 3400.0.0. As of 3400.1.0, this field is mutable.  </p> If this membership's course is a parent course in a cross-listed set, the childCourseId can be updated to move the membership enrollment between child courses and the parent course in  the set.  Patching the childCourseId to "null" will move the membership to the parent course.
	//
	// **Since**: 3000.11.0
	ChildCourseID string `json:"childCourseId,omitempty"`

	// The user's role in the course.
	//
	// These roles are also valid for an organization, although they are named differently in the UI.
	//
	// Custom course roles may also be referenced by their IDs.
	//
	//
	// | Type      | Description
	//  | --------- | --------- |
	// | Instructor | Has access to all areas in the Control Panel. This role is generally given to those developing, teaching, or facilitating the class. Instructors may access a course that is unavailable to students. This role is customizable and may have different capabilities from what is documented here. |
	// | BbFacilitator | The facilitator is an instructor like role. Facilitators are restricted versions of an instructor, in that they are able to deliver course instruction and administer all aspects of a pre-constructed course, but are not allowed to modify or alter the course. This role is customizable and may have different capabilities from what is documented here. |
	// | TeachingAssistant | The teaching assistant role is that of a co-teacher. Teaching assistants are able to administer all areas of a course. Their only limitations are those imposed by the instructor or Blackboard administrator at your school. This role is customizable and may have different capabilities from what is documented here. |
	// | CourseBuilder | Manages the course without having access to student grades. This role is customizable and may have different capabilities from what is documented here. |
	// | Grader | Assists the instructor in the creation, management, delivery, and grading of items. This role is customizable and may have different capabilities from what is documented here. |
	// | Student |  |
	// | Guest | Has no access to the Control Panel. Areas within the course are made available to guests, but typically they can only view course materials; they do not have access to tests or assessments, and do not have permission to post on discussion boards. This role's behavior is immutable. |
	//
	// Enum: [Instructor BbFacilitator TeachingAssistant CourseBuilder Grader Student Guest]
	CourseRoleID string `json:"courseRoleId,omitempty"`

	// The ID of the data source associated with this course.  This may optionally be the data source's externalId using the syntax "externalId:math101".
	DataSourceID string `json:"dataSourceId,omitempty"`
}

// Validate validates this put learn API public v1 courses course ID users user ID body
func (o *PutLearnAPIPublicV1CoursesCourseIDUsersUserIDBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAvailability(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCourseRoleID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutLearnAPIPublicV1CoursesCourseIDUsersUserIDBody) validateAvailability(formats strfmt.Registry) error {

	if swag.IsZero(o.Availability) { // not required
		return nil
	}

	if o.Availability != nil {
		if err := o.Availability.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("input" + "." + "availability")
			}
			return err
		}
	}

	return nil
}

var putLearnApiPublicV1CoursesCourseIdUsersUserIdBodyTypeCourseRoleIDPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Instructor","BbFacilitator","TeachingAssistant","CourseBuilder","Grader","Student","Guest"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		putLearnApiPublicV1CoursesCourseIdUsersUserIdBodyTypeCourseRoleIDPropEnum = append(putLearnApiPublicV1CoursesCourseIdUsersUserIdBodyTypeCourseRoleIDPropEnum, v)
	}
}

const (

	// PutLearnAPIPublicV1CoursesCourseIDUsersUserIDBodyCourseRoleIDInstructor captures enum value "Instructor"
	PutLearnAPIPublicV1CoursesCourseIDUsersUserIDBodyCourseRoleIDInstructor string = "Instructor"

	// PutLearnAPIPublicV1CoursesCourseIDUsersUserIDBodyCourseRoleIDBbFacilitator captures enum value "BbFacilitator"
	PutLearnAPIPublicV1CoursesCourseIDUsersUserIDBodyCourseRoleIDBbFacilitator string = "BbFacilitator"

	// PutLearnAPIPublicV1CoursesCourseIDUsersUserIDBodyCourseRoleIDTeachingAssistant captures enum value "TeachingAssistant"
	PutLearnAPIPublicV1CoursesCourseIDUsersUserIDBodyCourseRoleIDTeachingAssistant string = "TeachingAssistant"

	// PutLearnAPIPublicV1CoursesCourseIDUsersUserIDBodyCourseRoleIDCourseBuilder captures enum value "CourseBuilder"
	PutLearnAPIPublicV1CoursesCourseIDUsersUserIDBodyCourseRoleIDCourseBuilder string = "CourseBuilder"

	// PutLearnAPIPublicV1CoursesCourseIDUsersUserIDBodyCourseRoleIDGrader captures enum value "Grader"
	PutLearnAPIPublicV1CoursesCourseIDUsersUserIDBodyCourseRoleIDGrader string = "Grader"

	// PutLearnAPIPublicV1CoursesCourseIDUsersUserIDBodyCourseRoleIDStudent captures enum value "Student"
	PutLearnAPIPublicV1CoursesCourseIDUsersUserIDBodyCourseRoleIDStudent string = "Student"

	// PutLearnAPIPublicV1CoursesCourseIDUsersUserIDBodyCourseRoleIDGuest captures enum value "Guest"
	PutLearnAPIPublicV1CoursesCourseIDUsersUserIDBodyCourseRoleIDGuest string = "Guest"
)

// prop value enum
func (o *PutLearnAPIPublicV1CoursesCourseIDUsersUserIDBody) validateCourseRoleIDEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, putLearnApiPublicV1CoursesCourseIdUsersUserIdBodyTypeCourseRoleIDPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *PutLearnAPIPublicV1CoursesCourseIDUsersUserIDBody) validateCourseRoleID(formats strfmt.Registry) error {

	if swag.IsZero(o.CourseRoleID) { // not required
		return nil
	}

	// value enum
	if err := o.validateCourseRoleIDEnum("input"+"."+"courseRoleId", "body", o.CourseRoleID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutLearnAPIPublicV1CoursesCourseIDUsersUserIDBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutLearnAPIPublicV1CoursesCourseIDUsersUserIDBody) UnmarshalBinary(b []byte) error {
	var res PutLearnAPIPublicV1CoursesCourseIDUsersUserIDBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
