// Code generated by go-swagger; DO NOT EDIT.

package course_memberships

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new course memberships API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for course memberships API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteLearnAPIPublicV1CoursesCourseIDUsersUserID(params *DeleteLearnAPIPublicV1CoursesCourseIDUsersUserIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLearnAPIPublicV1CoursesCourseIDUsersUserIDNoContent, error)

	GetLearnAPIPublicV1CoursesCourseIDUsers(params *GetLearnAPIPublicV1CoursesCourseIDUsersParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1CoursesCourseIDUsersOK, error)

	GetLearnAPIPublicV1CoursesCourseIDUsersUserID(params *GetLearnAPIPublicV1CoursesCourseIDUsersUserIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1CoursesCourseIDUsersUserIDOK, error)

	GetLearnAPIPublicV1UsersUserIDCourses(params *GetLearnAPIPublicV1UsersUserIDCoursesParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1UsersUserIDCoursesOK, error)

	PatchLearnAPIPublicV1CoursesCourseIDUsersUserID(params *PatchLearnAPIPublicV1CoursesCourseIDUsersUserIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchLearnAPIPublicV1CoursesCourseIDUsersUserIDOK, error)

	PutLearnAPIPublicV1CoursesCourseIDUsersUserID(params *PutLearnAPIPublicV1CoursesCourseIDUsersUserIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutLearnAPIPublicV1CoursesCourseIDUsersUserIDCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteLearnAPIPublicV1CoursesCourseIDUsersUserID deletes membership

  Deletes a user membership from the specified course.

Required entitlements:

- For courses: 'system.enrollment.DELETE' or 'course.user.DELETE'
- For organizations: 'system.enrollment.DELETE' or 'org.enrollment.DELETE'

**Since**: 2015.11.0
*/
func (a *Client) DeleteLearnAPIPublicV1CoursesCourseIDUsersUserID(params *DeleteLearnAPIPublicV1CoursesCourseIDUsersUserIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLearnAPIPublicV1CoursesCourseIDUsersUserIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLearnAPIPublicV1CoursesCourseIDUsersUserIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLearnAPIPublicV1CoursesCourseIDUsersUserID",
		Method:             "DELETE",
		PathPattern:        "/learn/api/public/v1/courses/{courseId}/users/{userId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteLearnAPIPublicV1CoursesCourseIDUsersUserIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLearnAPIPublicV1CoursesCourseIDUsersUserIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLearnAPIPublicV1CoursesCourseIDUsersUserID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnAPIPublicV1CoursesCourseIDUsers gets course memberships

  Returns a list of user memberships for the specified course or organization.

Callers not enrolled in the course must have at least one of the following entitlements:

- For courses: 'course.user.VIEW', 'system.user.course.enrollment.VIEW', or 'system.courseuserlist.VIEW'
- For organizations: 'course.user.VIEW', 'system.user.org.enrollment.VIEW', or 'system.orguserlist.VIEW'
Callers enrolled in the course will only be able to see memberships that are available and that have opted to be included in the course roster.

For callers enrolled in the course as well as those with the 'course.user.VIEW' entitlement, system fields such as externalId and dataSourceId will not be visible.

**Since**: 3000.1.0
*/
func (a *Client) GetLearnAPIPublicV1CoursesCourseIDUsers(params *GetLearnAPIPublicV1CoursesCourseIDUsersParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1CoursesCourseIDUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV1CoursesCourseIDUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV1CoursesCourseIDUsers",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v1/courses/{courseId}/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV1CoursesCourseIDUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV1CoursesCourseIDUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV1CoursesCourseIDUsers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnAPIPublicV1CoursesCourseIDUsersUserID gets membership

  Loads a user membership in the specified course.

Entitlement and field visibility rules are the same as those when loading the memberships collection.

**Since**: 2015.11.0
*/
func (a *Client) GetLearnAPIPublicV1CoursesCourseIDUsersUserID(params *GetLearnAPIPublicV1CoursesCourseIDUsersUserIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1CoursesCourseIDUsersUserIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV1CoursesCourseIDUsersUserIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV1CoursesCourseIDUsersUserID",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v1/courses/{courseId}/users/{userId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV1CoursesCourseIDUsersUserIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV1CoursesCourseIDUsersUserIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV1CoursesCourseIDUsersUserID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnAPIPublicV1UsersUserIDCourses gets user memberships

  Returns a list of course and organization memberships for the specified user.

Users can always view their own memberships.  Callers viewing the memberships of another user require at least one of the following entitlements:

- 'system.user.course.enrollment.VIEW' allows callers to see course memberships
- 'system.user.org.enrollment.VIEW' allows callers to see organization memberships

**Since**: 2015.11.0
*/
func (a *Client) GetLearnAPIPublicV1UsersUserIDCourses(params *GetLearnAPIPublicV1UsersUserIDCoursesParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1UsersUserIDCoursesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV1UsersUserIDCoursesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV1UsersUserIDCourses",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v1/users/{userId}/courses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV1UsersUserIDCoursesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV1UsersUserIDCoursesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV1UsersUserIDCourses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchLearnAPIPublicV1CoursesCourseIDUsersUserID updates membership

  Updates a user membership in the specified course.

 | Field                  | Entitlements Required                                                           |
 |------------------------|---------------------------------------------------------------------------------|
 | dataSourceId           | 'course.user.MODIFY' or 'org.user.MODIFY'                                       |
 | childCourseId          | 'course.user.MODIFY' or 'org.user.MODIFY'                                       |
 | courseRoleId           | 'course.user.MODIFY', 'org.user.MODIFY', or 'course.user-role.MODIFY'           |
 | availability.available | 'course.user.MODIFY', 'org.user.MODIFY', or 'course.course-availability.MODIFY' |


In addition, callers must have standard view entitlements to receive a response.  Without view entitlements the operation will be performed but an empty result object will be returned.

**Since**: 2015.11.0
*/
func (a *Client) PatchLearnAPIPublicV1CoursesCourseIDUsersUserID(params *PatchLearnAPIPublicV1CoursesCourseIDUsersUserIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchLearnAPIPublicV1CoursesCourseIDUsersUserIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchLearnAPIPublicV1CoursesCourseIDUsersUserIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchLearnAPIPublicV1CoursesCourseIDUsersUserID",
		Method:             "PATCH",
		PathPattern:        "/learn/api/public/v1/courses/{courseId}/users/{userId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchLearnAPIPublicV1CoursesCourseIDUsersUserIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchLearnAPIPublicV1CoursesCourseIDUsersUserIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchLearnAPIPublicV1CoursesCourseIDUsersUserID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutLearnAPIPublicV1CoursesCourseIDUsersUserID creates membership

  Creates a user membership in the specified course.

Minimal entitlements required:

- For courses: 'course.user-enroll.EXECUTE', 'system.enrollment.CREATE'
- For organizations: 'course.user-enroll.EXECUTE', 'org.enrollment.CREATE'
- For courses or organizations that have enabled self enrollment: 'system.generic.VIEW'

By default courseRoleId is Student and availability.available is Yes.  Providing different values for these fields requires extra entitlements:

- For courses: 'course.user-role.MODIFY' or 'course.user.MODIFY'
- For organizations: 'course.user-role.MODIFY' or 'org.user.MODIFY'

**Since**: 2015.11.0
*/
func (a *Client) PutLearnAPIPublicV1CoursesCourseIDUsersUserID(params *PutLearnAPIPublicV1CoursesCourseIDUsersUserIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutLearnAPIPublicV1CoursesCourseIDUsersUserIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLearnAPIPublicV1CoursesCourseIDUsersUserIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLearnAPIPublicV1CoursesCourseIDUsersUserID",
		Method:             "PUT",
		PathPattern:        "/learn/api/public/v1/courses/{courseId}/users/{userId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutLearnAPIPublicV1CoursesCourseIDUsersUserIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLearnAPIPublicV1CoursesCourseIDUsersUserIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLearnAPIPublicV1CoursesCourseIDUsersUserID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
