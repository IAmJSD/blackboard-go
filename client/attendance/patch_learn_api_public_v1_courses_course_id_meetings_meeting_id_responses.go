// Code generated by go-swagger; DO NOT EDIT.

package attendance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/jakemakesstuff/blackboard-go/models"
)

// PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDReader is a Reader for the PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingID structure.
type PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDOK creates a PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDOK with default headers values
func NewPatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDOK() *PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDOK {
	return &PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDOK{}
}

/*PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDOK handles this case with default header values.

OK
*/
type PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDOK struct {
	Payload *models.CourseMeeting
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDOK) Error() string {
	return fmt.Sprintf("[PATCH /learn/api/public/v1/courses/{courseId}/meetings/{meetingId}][%d] patchLearnApiPublicV1CoursesCourseIdMeetingsMeetingIdOK  %+v", 200, o.Payload)
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDOK) GetPayload() *models.CourseMeeting {
	return o.Payload
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CourseMeeting)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDBadRequest creates a PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDBadRequest with default headers values
func NewPatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDBadRequest() *PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDBadRequest {
	return &PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDBadRequest{}
}

/*PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDBadRequest handles this case with default header values.

The request did not specify valid data
*/
type PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDBadRequest struct {
	Payload *models.RestException
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /learn/api/public/v1/courses/{courseId}/meetings/{meetingId}][%d] patchLearnApiPublicV1CoursesCourseIdMeetingsMeetingIdBadRequest  %+v", 400, o.Payload)
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDBadRequest) GetPayload() *models.RestException {
	return o.Payload
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDForbidden creates a PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDForbidden with default headers values
func NewPatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDForbidden() *PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDForbidden {
	return &PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDForbidden{}
}

/*PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDForbidden handles this case with default header values.

The user does not have entitlements to update Meetings
*/
type PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDForbidden struct {
	Payload *models.RestException
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDForbidden) Error() string {
	return fmt.Sprintf("[PATCH /learn/api/public/v1/courses/{courseId}/meetings/{meetingId}][%d] patchLearnApiPublicV1CoursesCourseIdMeetingsMeetingIdForbidden  %+v", 403, o.Payload)
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDForbidden) GetPayload() *models.RestException {
	return o.Payload
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDBody patch learn API public v1 courses course ID meetings meeting ID body
swagger:model PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDBody
*/
type PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDBody struct {

	// The primary ID of the course.
	CourseID string `json:"courseId,omitempty"`

	// The description of the meeting
	Description string `json:"description,omitempty"`

	// The end time of meeting
	// Format: date-time
	End strfmt.DateTime `json:"end,omitempty"`

	// The externalLink of course meeting
	ExternalLink string `json:"externalLink,omitempty"`

	// The start time of meeting
	// Format: date-time
	Start strfmt.DateTime `json:"start,omitempty"`

	// The title of the meeting
	Title string `json:"title,omitempty"`
}

// Validate validates this patch learn API public v1 courses course ID meetings meeting ID body
func (o *PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStart(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDBody) validateEnd(formats strfmt.Registry) error {

	if swag.IsZero(o.End) { // not required
		return nil
	}

	if err := validate.FormatOf("input"+"."+"end", "body", "date-time", o.End.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDBody) validateStart(formats strfmt.Registry) error {

	if swag.IsZero(o.Start) { // not required
		return nil
	}

	if err := validate.FormatOf("input"+"."+"start", "body", "date-time", o.Start.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDBody) UnmarshalBinary(b []byte) error {
	var res PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
