// Code generated by go-swagger; DO NOT EDIT.

package attendance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new attendance API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for attendance API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteLearnAPIPublicV1CoursesCourseIDMeetings(params *DeleteLearnAPIPublicV1CoursesCourseIDMeetingsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLearnAPIPublicV1CoursesCourseIDMeetingsNoContent, error)

	DeleteLearnAPIPublicV1CoursesCourseIDMeetingsMeetingID(params *DeleteLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDNoContent, error)

	DeleteLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsers(params *DeleteLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersNoContent, error)

	DeleteLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersUserID(params *DeleteLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersUserIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersUserIDNoContent, error)

	DeleteLearnAPIPublicV1CoursesCourseIDMeetingsUsersUserID(params *DeleteLearnAPIPublicV1CoursesCourseIDMeetingsUsersUserIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLearnAPIPublicV1CoursesCourseIDMeetingsUsersUserIDNoContent, error)

	DeleteLearnAPIPublicV1CoursesCourseIDMeetingsUsersUserIDAll(params *DeleteLearnAPIPublicV1CoursesCourseIDMeetingsUsersUserIDAllParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLearnAPIPublicV1CoursesCourseIDMeetingsUsersUserIDAllNoContent, error)

	GetLearnAPIPublicV1CoursesCourseIDMeetings(params *GetLearnAPIPublicV1CoursesCourseIDMeetingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1CoursesCourseIDMeetingsOK, error)

	GetLearnAPIPublicV1CoursesCourseIDMeetingsDownloadURL(params *GetLearnAPIPublicV1CoursesCourseIDMeetingsDownloadURLParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1CoursesCourseIDMeetingsDownloadURLOK, error)

	GetLearnAPIPublicV1CoursesCourseIDMeetingsMeetingID(params *GetLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDOK, error)

	GetLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsers(params *GetLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersOK, error)

	GetLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersUserID(params *GetLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersUserIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersUserIDOK, error)

	GetLearnAPIPublicV1CoursesCourseIDMeetingsUsersUserID(params *GetLearnAPIPublicV1CoursesCourseIDMeetingsUsersUserIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1CoursesCourseIDMeetingsUsersUserIDOK, error)

	PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingID(params *PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDOK, error)

	PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersUserID(params *PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersUserIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersUserIDOK, error)

	PostLearnAPIPublicV1CoursesCourseIDMeetings(params *PostLearnAPIPublicV1CoursesCourseIDMeetingsParams, authInfo runtime.ClientAuthInfoWriter) (*PostLearnAPIPublicV1CoursesCourseIDMeetingsCreated, error)

	PostLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsers(params *PostLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersParams, authInfo runtime.ClientAuthInfoWriter) (*PostLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersCreated, error)

	PostLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersBulk(params *PostLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersBulkParams, authInfo runtime.ClientAuthInfoWriter) (*PostLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersBulkNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteLearnAPIPublicV1CoursesCourseIDMeetings deletes all meetings in course

  Deletes all course meetings in the course for the given course Id.

The 'course.attendance.DELETE' entitlement is required to delete Course Meetings.

**Since**: 3500.7.0
*/
func (a *Client) DeleteLearnAPIPublicV1CoursesCourseIDMeetings(params *DeleteLearnAPIPublicV1CoursesCourseIDMeetingsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLearnAPIPublicV1CoursesCourseIDMeetingsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLearnAPIPublicV1CoursesCourseIDMeetingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLearnAPIPublicV1CoursesCourseIDMeetings",
		Method:             "DELETE",
		PathPattern:        "/learn/api/public/v1/courses/{courseId}/meetings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteLearnAPIPublicV1CoursesCourseIDMeetingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLearnAPIPublicV1CoursesCourseIDMeetingsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLearnAPIPublicV1CoursesCourseIDMeetings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteLearnAPIPublicV1CoursesCourseIDMeetingsMeetingID deletes course meeting

  Delete the Course Meeting for the given course meeting Id.

The 'course.attendance.DELETE' entitlement is required to delete Course Meetings.

**Since**: 3500.7.0
*/
func (a *Client) DeleteLearnAPIPublicV1CoursesCourseIDMeetingsMeetingID(params *DeleteLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLearnAPIPublicV1CoursesCourseIDMeetingsMeetingID",
		Method:             "DELETE",
		PathPattern:        "/learn/api/public/v1/courses/{courseId}/meetings/{meetingId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLearnAPIPublicV1CoursesCourseIDMeetingsMeetingID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsers deletes all records in meeting

  Deletes all attendance records in the course meeting for a given meeting Id.

The 'course.attendance.DELETE' entitlement is required to delete attendance records.

**Since**: 3500.7.0
*/
func (a *Client) DeleteLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsers(params *DeleteLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsers",
		Method:             "DELETE",
		PathPattern:        "/learn/api/public/v1/courses/{courseId}/meetings/{meetingId}/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersUserID deletes attendance record

  Delete attendance record for meeting.It will delete meeting attendance within a course meeting.

The 'course.attendance.DELETE' entitlement is required to delete Attendance Record.

**Since**: 3500.7.0
*/
func (a *Client) DeleteLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersUserID(params *DeleteLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersUserIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersUserIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersUserIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersUserID",
		Method:             "DELETE",
		PathPattern:        "/learn/api/public/v1/courses/{courseId}/meetings/{meetingId}/users/{userId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersUserIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersUserIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersUserID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteLearnAPIPublicV1CoursesCourseIDMeetingsUsersUserID deletes all attendance records by course and user Id

  Deletes all attendance records for the user in specific course.

The 'course.attendance.DELETE' entitlement is required to delete attendance records.

**Since**: 3500.7.0
*/
func (a *Client) DeleteLearnAPIPublicV1CoursesCourseIDMeetingsUsersUserID(params *DeleteLearnAPIPublicV1CoursesCourseIDMeetingsUsersUserIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLearnAPIPublicV1CoursesCourseIDMeetingsUsersUserIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLearnAPIPublicV1CoursesCourseIDMeetingsUsersUserIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLearnAPIPublicV1CoursesCourseIDMeetingsUsersUserID",
		Method:             "DELETE",
		PathPattern:        "/learn/api/public/v1/courses/{courseId}/meetings/users/{userId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteLearnAPIPublicV1CoursesCourseIDMeetingsUsersUserIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLearnAPIPublicV1CoursesCourseIDMeetingsUsersUserIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLearnAPIPublicV1CoursesCourseIDMeetingsUsersUserID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteLearnAPIPublicV1CoursesCourseIDMeetingsUsersUserIDAll deletes all attendance by user Id

  Deletes all attendance records for the user. It will delete meeting attendance regardless of course.

The 'course.attendance.DELETE' entitlement is required to delete attendance records.

**Since**: 3500.7.0
*/
func (a *Client) DeleteLearnAPIPublicV1CoursesCourseIDMeetingsUsersUserIDAll(params *DeleteLearnAPIPublicV1CoursesCourseIDMeetingsUsersUserIDAllParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLearnAPIPublicV1CoursesCourseIDMeetingsUsersUserIDAllNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLearnAPIPublicV1CoursesCourseIDMeetingsUsersUserIDAllParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLearnAPIPublicV1CoursesCourseIDMeetingsUsersUserIDAll",
		Method:             "DELETE",
		PathPattern:        "/learn/api/public/v1/courses/{courseId}/meetings/users/{userId}/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteLearnAPIPublicV1CoursesCourseIDMeetingsUsersUserIDAllReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLearnAPIPublicV1CoursesCourseIDMeetingsUsersUserIDAllNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLearnAPIPublicV1CoursesCourseIDMeetingsUsersUserIDAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnAPIPublicV1CoursesCourseIDMeetings gets course meetings

  Returns a list of course meetings for a given course id.

The "course.attendance.VIEW" entitlement is required to view a Course Meeting.

**Since**: 3500.7.0
*/
func (a *Client) GetLearnAPIPublicV1CoursesCourseIDMeetings(params *GetLearnAPIPublicV1CoursesCourseIDMeetingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1CoursesCourseIDMeetingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV1CoursesCourseIDMeetingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV1CoursesCourseIDMeetings",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v1/courses/{courseId}/meetings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV1CoursesCourseIDMeetingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV1CoursesCourseIDMeetingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV1CoursesCourseIDMeetings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnAPIPublicV1CoursesCourseIDMeetingsDownloadURL generates attendance data download Url

  Generate Download URL for Attendance Data.

The "course.attendance.CREATE" entitlement is required to generate download URL for attendance data.

**Since**: ????
*/
func (a *Client) GetLearnAPIPublicV1CoursesCourseIDMeetingsDownloadURL(params *GetLearnAPIPublicV1CoursesCourseIDMeetingsDownloadURLParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1CoursesCourseIDMeetingsDownloadURLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV1CoursesCourseIDMeetingsDownloadURLParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV1CoursesCourseIDMeetingsDownloadURL",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v1/courses/{courseId}/meetings/downloadUrl",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV1CoursesCourseIDMeetingsDownloadURLReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV1CoursesCourseIDMeetingsDownloadURLOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV1CoursesCourseIDMeetingsDownloadURL: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnAPIPublicV1CoursesCourseIDMeetingsMeetingID gets course meeting

  Returns a Course Meeting for the given meeting Id.

The "course.attendance.VIEW" entitlement is required to view a Course Meeting.

**Since**: 3500.7.0
*/
func (a *Client) GetLearnAPIPublicV1CoursesCourseIDMeetingsMeetingID(params *GetLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV1CoursesCourseIDMeetingsMeetingID",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v1/courses/{courseId}/meetings/{meetingId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV1CoursesCourseIDMeetingsMeetingID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsers gets attendance records by meeting Id

  Returns a list of Course Meeting Attendance for a given meeting id.

The "course.attendance.VIEW" entitlement is required to view a Course Meeting attendance.

**Since**: 3500.7.0
*/
func (a *Client) GetLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsers(params *GetLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsers",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v1/courses/{courseId}/meetings/{meetingId}/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersUserID gets attendance record

  Returns a Course Meeting Attendance information for the given meeting and user Id.

The "course.attendance.VIEW" entitlement is required to view a Course Meeting Attendance.

**Since**: 3500.7.0
*/
func (a *Client) GetLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersUserID(params *GetLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersUserIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersUserIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersUserIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersUserID",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v1/courses/{courseId}/meetings/{meetingId}/users/{userId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersUserIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersUserIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersUserID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnAPIPublicV1CoursesCourseIDMeetingsUsersUserID gets attendance records by user Id

  Returns a list of Course Meeting Attendance for a given user id regardless of courses and meetings.

The "course.attendance.VIEW" entitlement is required to view a Course Meeting attendance.

**Since**: 3500.7.0
*/
func (a *Client) GetLearnAPIPublicV1CoursesCourseIDMeetingsUsersUserID(params *GetLearnAPIPublicV1CoursesCourseIDMeetingsUsersUserIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1CoursesCourseIDMeetingsUsersUserIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV1CoursesCourseIDMeetingsUsersUserIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV1CoursesCourseIDMeetingsUsersUserID",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v1/courses/{courseId}/meetings/users/{userId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV1CoursesCourseIDMeetingsUsersUserIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV1CoursesCourseIDMeetingsUsersUserIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV1CoursesCourseIDMeetingsUsersUserID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingID updates course meeting

  Update the Course Meeting for the given Course/Organization.

The "course.attendance.MODIFY" entitlement is required to update a Course Meeting. The "course.attendance.VIEW" entitlement is required to view a Course Meeting.

**Since**: 3500.7.0
*/
func (a *Client) PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingID(params *PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingID",
		Method:             "PATCH",
		PathPattern:        "/learn/api/public/v1/courses/{courseId}/meetings/{meetingId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersUserID updates attendance record

  Update the Course Meeting Attendance data for the given Course/Organization.

The "course.attendance.MODIFY" entitlement is required to update a Course Meeting Attendance. The "course.attendance.VIEW" entitlement is required to view a Course Meeting attendance.

**Since**: 3500.7.0
*/
func (a *Client) PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersUserID(params *PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersUserIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersUserIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersUserIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersUserID",
		Method:             "PATCH",
		PathPattern:        "/learn/api/public/v1/courses/{courseId}/meetings/{meetingId}/users/{userId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersUserIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersUserIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersUserID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostLearnAPIPublicV1CoursesCourseIDMeetings creates course meeting

  Creates a new Course Meeting within the provided Course/Organization Id. An attendance grade book column will automatically be generated if one does not exist.

The "course.attendance.CREATE" entitlement is required to create a Course Meeting.

**Since**: 3500.7.0
*/
func (a *Client) PostLearnAPIPublicV1CoursesCourseIDMeetings(params *PostLearnAPIPublicV1CoursesCourseIDMeetingsParams, authInfo runtime.ClientAuthInfoWriter) (*PostLearnAPIPublicV1CoursesCourseIDMeetingsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLearnAPIPublicV1CoursesCourseIDMeetingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLearnAPIPublicV1CoursesCourseIDMeetings",
		Method:             "POST",
		PathPattern:        "/learn/api/public/v1/courses/{courseId}/meetings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostLearnAPIPublicV1CoursesCourseIDMeetingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLearnAPIPublicV1CoursesCourseIDMeetingsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLearnAPIPublicV1CoursesCourseIDMeetings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsers creates attendance record

  Creates a new Course Meeting Attendance within the provided Course/Organization Id.

The "course.attendance.CREATE" entitlement is required to create a Course Meeting Attendance.

**Since**: 3500.7.0
*/
func (a *Client) PostLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsers(params *PostLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersParams, authInfo runtime.ClientAuthInfoWriter) (*PostLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsers",
		Method:             "POST",
		PathPattern:        "/learn/api/public/v1/courses/{courseId}/meetings/{meetingId}/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersBulk updates attendance records

  Creates or updates attendance records for the meeting for all users in the course.

User required both of the entitlements below. If the user does not have the required entitlements,no records are created or modified.  Entitlement | User Access ------------|-----------  course.attendance.CREATE | Create Course/Organization Course Meeting Attendance course.attendance.MODIFY | Update Course/Organization Meeting Attendance

**Since**: 3500.7.0
*/
func (a *Client) PostLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersBulk(params *PostLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersBulkParams, authInfo runtime.ClientAuthInfoWriter) (*PostLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersBulkNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersBulkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersBulk",
		Method:             "POST",
		PathPattern:        "/learn/api/public/v1/courses/{courseId}/meetings/{meetingId}/users/bulk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersBulkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersBulkNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLearnAPIPublicV1CoursesCourseIDMeetingsMeetingIDUsersBulk: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
