// Code generated by go-swagger; DO NOT EDIT.

package course_categories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/jakemakesstuff/blackboard-go/models"
)

// PutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseIDReader is a Reader for the PutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseID structure.
type PutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewPutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseIDCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseIDConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseIDCreated creates a PutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseIDCreated with default headers values
func NewPutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseIDCreated() *PutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseIDCreated {
	return &PutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseIDCreated{}
}

/*PutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseIDCreated handles this case with default header values.

Created
*/
type PutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseIDCreated struct {
	Payload *models.CategoryCourseMembership
}

func (o *PutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseIDCreated) Error() string {
	return fmt.Sprintf("[PUT /learn/api/public/v1/catalog/categories/{categoryType}/{categoryId}/courses/{courseId}][%d] putLearnApiPublicV1CatalogCategoriesCategoryTypeCategoryIdCoursesCourseIdCreated  %+v", 201, o.Payload)
}

func (o *PutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseIDCreated) GetPayload() *models.CategoryCourseMembership {
	return o.Payload
}

func (o *PutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseIDCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CategoryCourseMembership)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseIDBadRequest creates a PutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseIDBadRequest with default headers values
func NewPutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseIDBadRequest() *PutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseIDBadRequest {
	return &PutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseIDBadRequest{}
}

/*PutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseIDBadRequest handles this case with default header values.

Bad Request
*/
type PutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseIDBadRequest struct {
	Payload *models.RestException
}

func (o *PutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseIDBadRequest) Error() string {
	return fmt.Sprintf("[PUT /learn/api/public/v1/catalog/categories/{categoryType}/{categoryId}/courses/{courseId}][%d] putLearnApiPublicV1CatalogCategoriesCategoryTypeCategoryIdCoursesCourseIdBadRequest  %+v", 400, o.Payload)
}

func (o *PutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseIDBadRequest) GetPayload() *models.RestException {
	return o.Payload
}

func (o *PutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseIDForbidden creates a PutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseIDForbidden with default headers values
func NewPutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseIDForbidden() *PutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseIDForbidden {
	return &PutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseIDForbidden{}
}

/*PutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseIDForbidden handles this case with default header values.

Forbidden
*/
type PutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseIDForbidden struct {
	Payload *models.RestException
}

func (o *PutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseIDForbidden) Error() string {
	return fmt.Sprintf("[PUT /learn/api/public/v1/catalog/categories/{categoryType}/{categoryId}/courses/{courseId}][%d] putLearnApiPublicV1CatalogCategoriesCategoryTypeCategoryIdCoursesCourseIdForbidden  %+v", 403, o.Payload)
}

func (o *PutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseIDForbidden) GetPayload() *models.RestException {
	return o.Payload
}

func (o *PutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseIDNotFound creates a PutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseIDNotFound with default headers values
func NewPutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseIDNotFound() *PutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseIDNotFound {
	return &PutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseIDNotFound{}
}

/*PutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseIDNotFound handles this case with default header values.

Not Found
*/
type PutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseIDNotFound struct {
	Payload *models.RestException
}

func (o *PutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseIDNotFound) Error() string {
	return fmt.Sprintf("[PUT /learn/api/public/v1/catalog/categories/{categoryType}/{categoryId}/courses/{courseId}][%d] putLearnApiPublicV1CatalogCategoriesCategoryTypeCategoryIdCoursesCourseIdNotFound  %+v", 404, o.Payload)
}

func (o *PutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseIDNotFound) GetPayload() *models.RestException {
	return o.Payload
}

func (o *PutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseIDConflict creates a PutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseIDConflict with default headers values
func NewPutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseIDConflict() *PutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseIDConflict {
	return &PutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseIDConflict{}
}

/*PutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseIDConflict handles this case with default header values.

Conflict
*/
type PutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseIDConflict struct {
	Payload *models.RestException
}

func (o *PutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseIDConflict) Error() string {
	return fmt.Sprintf("[PUT /learn/api/public/v1/catalog/categories/{categoryType}/{categoryId}/courses/{courseId}][%d] putLearnApiPublicV1CatalogCategoriesCategoryTypeCategoryIdCoursesCourseIdConflict  %+v", 409, o.Payload)
}

func (o *PutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseIDConflict) GetPayload() *models.RestException {
	return o.Payload
}

func (o *PutLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDCoursesCourseIDConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
