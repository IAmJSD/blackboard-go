// Code generated by go-swagger; DO NOT EDIT.

package course_categories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/jakemakesstuff/blackboard-go/models"
)

// PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDReader is a Reader for the PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryID structure.
type PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDOK creates a PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDOK with default headers values
func NewPatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDOK() *PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDOK {
	return &PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDOK{}
}

/*PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDOK handles this case with default header values.

OK
*/
type PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDOK struct {
	Payload *models.Category
}

func (o *PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDOK) Error() string {
	return fmt.Sprintf("[PATCH /learn/api/public/v1/catalog/categories/{categoryType}/{categoryId}][%d] patchLearnApiPublicV1CatalogCategoriesCategoryTypeCategoryIdOK  %+v", 200, o.Payload)
}

func (o *PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDOK) GetPayload() *models.Category {
	return o.Payload
}

func (o *PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Category)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDBadRequest creates a PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDBadRequest with default headers values
func NewPatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDBadRequest() *PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDBadRequest {
	return &PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDBadRequest{}
}

/*PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDBadRequest handles this case with default header values.

The request did not specify valid data
*/
type PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDBadRequest struct {
	Payload *models.RestException
}

func (o *PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /learn/api/public/v1/catalog/categories/{categoryType}/{categoryId}][%d] patchLearnApiPublicV1CatalogCategoriesCategoryTypeCategoryIdBadRequest  %+v", 400, o.Payload)
}

func (o *PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDBadRequest) GetPayload() *models.RestException {
	return o.Payload
}

func (o *PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDForbidden creates a PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDForbidden with default headers values
func NewPatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDForbidden() *PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDForbidden {
	return &PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDForbidden{}
}

/*PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDForbidden handles this case with default header values.

The user does not have entitlements to create categories of the provided type
*/
type PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDForbidden struct {
	Payload *models.RestException
}

func (o *PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDForbidden) Error() string {
	return fmt.Sprintf("[PATCH /learn/api/public/v1/catalog/categories/{categoryType}/{categoryId}][%d] patchLearnApiPublicV1CatalogCategoriesCategoryTypeCategoryIdForbidden  %+v", 403, o.Payload)
}

func (o *PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDForbidden) GetPayload() *models.RestException {
	return o.Payload
}

func (o *PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestException)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDBody patch learn API public v1 catalog categories category type category ID body
swagger:model PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDBody
*/
type PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDBody struct {

	// Boolean indicating whether or not the category is available
	Available bool `json:"available,omitempty"`

	// The description of the category
	Description string `json:"description,omitempty"`

	// Boolean indicating whether or not the category should appear on the catalog front page
	FrontPage bool `json:"frontPage,omitempty"`

	// The roles for which this category is available, if category is set to restricted. Not populated for lists of categories, only for individual category
	InstitutionRoleIds []string `json:"institutionRoleIds"`

	// Boolean indicating whether or not category is available to all roles, or restricted to a specific set of roles.
	Restricted bool `json:"restricted,omitempty"`

	// The title of category
	Title string `json:"title,omitempty"`
}

// Validate validates this patch learn API public v1 catalog categories category type category ID body
func (o *PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDBody) UnmarshalBinary(b []byte) error {
	var res PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
