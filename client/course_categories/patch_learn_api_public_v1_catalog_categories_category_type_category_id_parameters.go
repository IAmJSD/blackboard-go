// Code generated by go-swagger; DO NOT EDIT.

package course_categories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDParams creates a new PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDParams object
// with the default values initialized.
func NewPatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDParams() *PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDParams {
	var ()
	return &PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDParamsWithTimeout creates a new PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDParamsWithTimeout(timeout time.Duration) *PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDParams {
	var ()
	return &PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDParams{

		timeout: timeout,
	}
}

// NewPatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDParamsWithContext creates a new PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewPatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDParamsWithContext(ctx context.Context) *PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDParams {
	var ()
	return &PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDParams{

		Context: ctx,
	}
}

// NewPatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDParamsWithHTTPClient creates a new PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDParamsWithHTTPClient(client *http.Client) *PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDParams {
	var ()
	return &PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDParams{
		HTTPClient: client,
	}
}

/*PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDParams contains all the parameters to send to the API endpoint
for the patch learn API public v1 catalog categories category type category ID operation typically these are written to a http.Request
*/
type PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDParams struct {

	/*Category*/
	Category PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDBody
	/*CategoryID*/
	CategoryID string
	/*CategoryType*/
	CategoryType string
	/*Fields
	  A comma-delimited list of fields to include in the response. If not specified, all fields will be returned.

	*/
	Fields *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the patch learn API public v1 catalog categories category type category ID params
func (o *PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDParams) WithTimeout(timeout time.Duration) *PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the patch learn API public v1 catalog categories category type category ID params
func (o *PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the patch learn API public v1 catalog categories category type category ID params
func (o *PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDParams) WithContext(ctx context.Context) *PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the patch learn API public v1 catalog categories category type category ID params
func (o *PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the patch learn API public v1 catalog categories category type category ID params
func (o *PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDParams) WithHTTPClient(client *http.Client) *PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the patch learn API public v1 catalog categories category type category ID params
func (o *PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCategory adds the category to the patch learn API public v1 catalog categories category type category ID params
func (o *PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDParams) WithCategory(category PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDBody) *PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDParams {
	o.SetCategory(category)
	return o
}

// SetCategory adds the category to the patch learn API public v1 catalog categories category type category ID params
func (o *PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDParams) SetCategory(category PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDBody) {
	o.Category = category
}

// WithCategoryID adds the categoryID to the patch learn API public v1 catalog categories category type category ID params
func (o *PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDParams) WithCategoryID(categoryID string) *PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDParams {
	o.SetCategoryID(categoryID)
	return o
}

// SetCategoryID adds the categoryId to the patch learn API public v1 catalog categories category type category ID params
func (o *PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDParams) SetCategoryID(categoryID string) {
	o.CategoryID = categoryID
}

// WithCategoryType adds the categoryType to the patch learn API public v1 catalog categories category type category ID params
func (o *PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDParams) WithCategoryType(categoryType string) *PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDParams {
	o.SetCategoryType(categoryType)
	return o
}

// SetCategoryType adds the categoryType to the patch learn API public v1 catalog categories category type category ID params
func (o *PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDParams) SetCategoryType(categoryType string) {
	o.CategoryType = categoryType
}

// WithFields adds the fields to the patch learn API public v1 catalog categories category type category ID params
func (o *PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDParams) WithFields(fields *string) *PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the patch learn API public v1 catalog categories category type category ID params
func (o *PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDParams) SetFields(fields *string) {
	o.Fields = fields
}

// WriteToRequest writes these params to a swagger request
func (o *PatchLearnAPIPublicV1CatalogCategoriesCategoryTypeCategoryIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if err := r.SetBodyParam(o.Category); err != nil {
		return err
	}

	// path param categoryId
	if err := r.SetPathParam("categoryId", o.CategoryID); err != nil {
		return err
	}

	// path param categoryType
	if err := r.SetPathParam("categoryType", o.CategoryType); err != nil {
		return err
	}

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
