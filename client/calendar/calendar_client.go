// Code generated by go-swagger; DO NOT EDIT.

package calendar

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new calendar API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for calendar API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteLearnAPIPublicV1CalendarsItemsCalendarItemTypeCalendarItemID(params *DeleteLearnAPIPublicV1CalendarsItemsCalendarItemTypeCalendarItemIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLearnAPIPublicV1CalendarsItemsCalendarItemTypeCalendarItemIDNoContent, error)

	GetLearnAPIPublicV1Calendars(params *GetLearnAPIPublicV1CalendarsParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1CalendarsOK, error)

	GetLearnAPIPublicV1CalendarsItems(params *GetLearnAPIPublicV1CalendarsItemsParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1CalendarsItemsOK, error)

	GetLearnAPIPublicV1CalendarsItemsCalendarItemTypeCalendarItemID(params *GetLearnAPIPublicV1CalendarsItemsCalendarItemTypeCalendarItemIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1CalendarsItemsCalendarItemTypeCalendarItemIDOK, error)

	PatchLearnAPIPublicV1CalendarsItemsCalendarItemTypeCalendarItemID(params *PatchLearnAPIPublicV1CalendarsItemsCalendarItemTypeCalendarItemIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchLearnAPIPublicV1CalendarsItemsCalendarItemTypeCalendarItemIDOK, error)

	PostLearnAPIPublicV1CalendarsItems(params *PostLearnAPIPublicV1CalendarsItemsParams, authInfo runtime.ClientAuthInfoWriter) (*PostLearnAPIPublicV1CalendarsItemsCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteLearnAPIPublicV1CalendarsItemsCalendarItemTypeCalendarItemID deletes calendar item



Delete a calendar item or series. </p> The following must be true in order to delete a calendar item:

- Institution
-

- The user must have the 'system.calendar-item.EXECUTE' entitlement

- Personal
-

- Any user may delete their own calendar items

- Course
-

- The user must be enrolled in the course
- The user must have the 'course.calendar-entry.MODIFY' entitlement
- The course calendar must be enabled for the specified course

- GradebookColumn
-

- GradebookColumns must be deleted using the Gradebook API endpoint: <code>DELETE /learn/api/public/v2/courses/{courseId}/gradebook/columns/{columnId}</code>

- OfficeHours
-

- The user must have the 'course.calendar-entry.MODIFY' entitlement
- The user must own the calendarItem
- The calendar must be enabled if the calendarItem is associated with a course calendar.

**Since**: 3400.9.0
*/
func (a *Client) DeleteLearnAPIPublicV1CalendarsItemsCalendarItemTypeCalendarItemID(params *DeleteLearnAPIPublicV1CalendarsItemsCalendarItemTypeCalendarItemIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLearnAPIPublicV1CalendarsItemsCalendarItemTypeCalendarItemIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLearnAPIPublicV1CalendarsItemsCalendarItemTypeCalendarItemIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLearnAPIPublicV1CalendarsItemsCalendarItemTypeCalendarItemID",
		Method:             "DELETE",
		PathPattern:        "/learn/api/public/v1/calendars/items/{calendarItemType}/{calendarItemId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteLearnAPIPublicV1CalendarsItemsCalendarItemTypeCalendarItemIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLearnAPIPublicV1CalendarsItemsCalendarItemTypeCalendarItemIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLearnAPIPublicV1CalendarsItemsCalendarItemTypeCalendarItemID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnAPIPublicV1Calendars gets calendars

  Get the list of calendars. This endpoint will return all calendars viewable by the user. All users can request a list of calendars viewable to them.

**Since**: 3400.9.0
*/
func (a *Client) GetLearnAPIPublicV1Calendars(params *GetLearnAPIPublicV1CalendarsParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1CalendarsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV1CalendarsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV1Calendars",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v1/calendars",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV1CalendarsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV1CalendarsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV1Calendars: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnAPIPublicV1CalendarsItems gets calendar items

  Get the list of calendar items. This endpoint will return all types of CalendarItems viewable by the user unless a specific <code>type</code> is specified as a query parameter.

If <code>since</code> and <code>since</code> are not provided this endpoint will default to the upcoming two week timeframe from now. </p>

If only <code>since</code> is provided this endpoint will default the <code>until</code> parameter two weeks after <code>since</code>. </p>

If only <code>until</code> is provided this endpoint will default the <code>since</code> parameter two prior to <code>until</code>. </p>

Maximum timespan between <code>since</code> and <code>until</code> is 16 weeks. </p>

CalendarItems of type <code>GradebookColumn</code> are a representation of a specific gradable item and therefore read-only. Modifications to GradebookColumn items performed via the Gradebook Column endpoints will be reflected in the CalendarItems endpoints. </p>

The CalendarItem <code>id</code> can be used as the <code>columnId</code> on the Gradebook Column endpoints found here: <code>/learn/api/public/v2/courses/{courseId}/gradebook/columns/{columnId}</code>. </p> Example requests:

- <code>GET ../items?since=2018-01-01T00:00:00.000Z&until2018-02-01T00:00:00.000Z // all calendar items for a given timeframe</code>
- <code>GET ../items?since=2018-01-01T00:00:00.000Z&until2018-02-01T00:00:00.000Z&courseId=_123_1 // all calendar items for a given course (including Course, OfficeHours, GradebookColumn types)</code>
- <code>GET ../items?since=2018-01-01T00:00:00.000Z&until2018-02-01T00:00:00.000Z&courseId=_123_1&type=GradebookColumn // all GradebookColumn items for a course</code>
- <code>GET ../items?since=2018-01-01T00:00:00.000Z&until2018-02-01T00:00:00.000Z&courseId=_123_1&type=OfficeHours // all OfficeHours for a course</code>
- <code>GET ../items?since=2018-01-01T00:00:00.000Z&until2018-02-01T00:00:00.000Z&type=GradebookColumn // all gradebook columns due within the given timeframe</code>
- <code>GET ../items?since=2018-01-01T00:00:00.000Z&until2018-02-01T00:00:00.000Z&type=OfficeHours // all OfficeHours available to current user for a given timeframe</code>
The following must be true in order to view the following calendar item types:

- Institution
-

- All users can view Institution calendar items

- Personal
-

- Any user may view their own calendar items, but not other user's calendar items

- Course
-

- The user must be enrolled in the course
- The user must have the 'course.calendar-entry.VIEW' entitlement
- The course calendar must be enabled for the course the calendar item is associated with

- GradebookColumn
-

- The user must be enrolled in the course
- The user must have the 'course.calendar-entry.VIEW' entitlement
- The course calendar must be enabled for the course the GradebookColumn is associated with

- OfficeHours
-

- If the OfficeHours are created for a course calendar (calendarId = a course id) the user must be enrolled in the course
- If the OfficeHours are created for a all courses (calendarId = PERSONAL) the user must be enrolled in any course that the user owning the OfficeHours is also enrolled in
- In either case above the course calendar must be enabled

</p>

**Since**: 3400.9.0
*/
func (a *Client) GetLearnAPIPublicV1CalendarsItems(params *GetLearnAPIPublicV1CalendarsItemsParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1CalendarsItemsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV1CalendarsItemsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV1CalendarsItems",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v1/calendars/items",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV1CalendarsItemsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV1CalendarsItemsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV1CalendarsItems: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLearnAPIPublicV1CalendarsItemsCalendarItemTypeCalendarItemID gets calendar item



Get a course calendar item. </p>

CalendarItems of type <code>GradebookColumn</code> are a representation of a specific gradable item and therefore read-only. Modifications to GradebookColumn items performed via the Gradebook Column endpoints will be reflected in the CalendarItems endpoints. </p>

The CalendarItem <code>id</code> can be used as the <code>columnId</code> on the Gradebook Column endpoints found here: <code>/learn/api/public/v2/courses/{courseId}/gradebook/columns/{columnId}</code>. </p> The following must be true in order to view the following calendar items types:

- Institution
-

- All users can view Institution calendar items

- Personal
-

- Any user may view their own calendar items, but not other user's calendar items

- Course
-

- The user must be enrolled in the course
- The user must have the 'course.calendar-entry.VIEW' entitlement
- The course calendar must be enabled for the course the calendar item is associated with

- GradebookColumn
-

- The user must be enrolled in the course
- The user must have the 'course.calendar-entry.VIEW' entitlement
- The course calendar must be enabled for the course the GradebookColumn is associated with

- OfficeHours
-

- If the OfficeHours are created for a course calendar (calendarId = a course id) the user must be enrolled in the course
- If the OfficeHours are created for a all courses (calendarId = PERSONAL) the user must be enrolled in any course that the user owning the OfficeHours is also enrolled in
- In either case above the course calendar must be enabled

**Since**: 3400.9.0
*/
func (a *Client) GetLearnAPIPublicV1CalendarsItemsCalendarItemTypeCalendarItemID(params *GetLearnAPIPublicV1CalendarsItemsCalendarItemTypeCalendarItemIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetLearnAPIPublicV1CalendarsItemsCalendarItemTypeCalendarItemIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLearnAPIPublicV1CalendarsItemsCalendarItemTypeCalendarItemIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLearnAPIPublicV1CalendarsItemsCalendarItemTypeCalendarItemID",
		Method:             "GET",
		PathPattern:        "/learn/api/public/v1/calendars/items/{calendarItemType}/{calendarItemId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLearnAPIPublicV1CalendarsItemsCalendarItemTypeCalendarItemIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLearnAPIPublicV1CalendarsItemsCalendarItemTypeCalendarItemIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLearnAPIPublicV1CalendarsItemsCalendarItemTypeCalendarItemID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchLearnAPIPublicV1CalendarsItemsCalendarItemTypeCalendarItemID updates calendar item



Update a calendar item or series. </p>

When updating the series the existing CalendarItems will be removed and a new set of CalendarItems will be created. This is the same behavior as experienced via the UI. </p> The following must be true in order to update a calendar item:

- Institution
-

- The user must have the 'system.calendar-item.EXECUTE' entitlement

- Personal
-

- Any user may update their own calendar items

- Course
-

- The user must be enrolled in the course
- The user must have the 'course.calendar-entry.MODIFY' entitlement
- The course calendar must be enabled for the specified course

- GradebookColumn
-

- GradebookColumns must be updated using the Gradebook API endpoint: <code>PATCH /learn/api/public/v2/courses/{courseId}/gradebook/columns/{columnId}</code>

- OfficeHours
-

- The user must have the 'course.calendar-entry.MODIFY' entitlement
- If calendarId = a course id the user must be enrolled in the course and the calendar must be enabled

**Since**: 3400.9.0
*/
func (a *Client) PatchLearnAPIPublicV1CalendarsItemsCalendarItemTypeCalendarItemID(params *PatchLearnAPIPublicV1CalendarsItemsCalendarItemTypeCalendarItemIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchLearnAPIPublicV1CalendarsItemsCalendarItemTypeCalendarItemIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchLearnAPIPublicV1CalendarsItemsCalendarItemTypeCalendarItemIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchLearnAPIPublicV1CalendarsItemsCalendarItemTypeCalendarItemID",
		Method:             "PATCH",
		PathPattern:        "/learn/api/public/v1/calendars/items/{calendarItemType}/{calendarItemId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchLearnAPIPublicV1CalendarsItemsCalendarItemTypeCalendarItemIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchLearnAPIPublicV1CalendarsItemsCalendarItemTypeCalendarItemIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchLearnAPIPublicV1CalendarsItemsCalendarItemTypeCalendarItemID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostLearnAPIPublicV1CalendarsItems creates calendar item



Create a calendar item. Calendar items may be single or recurring. </p>

CalendarItems of type <code>OfficeHours</code> will be assigned to the current user. </p> The following must be true in order to create a calendar item:

- Institution
-

- The user must have the 'system.calendar-item.EXECUTE' entitlement

- Personal
-

- Any user may create their own calendar items

- Course
-

- The user must be enrolled in the course
- The user must have the 'course.calendar-entry.CREATE' entitlement
- The specified courseId must not be for an organization
- The course calendar must be enabled for the specified course

- GradebookColumn
-

- GradebookColumns must be created using the Gradebook API endpoint: <code>POST /learn/api/public/v2/courses/{courseId}/gradebook/columns</code>

- OfficeHours
-

- The user must have the 'course.calendar-entry.CREATE' entitlement
- If calendarId = a course id the user must be enrolled in the course and the calendar must be enabled
- Note: To create for all enrolled courses calendarId must be set to PERSONAL

**Since**: 3400.9.0
*/
func (a *Client) PostLearnAPIPublicV1CalendarsItems(params *PostLearnAPIPublicV1CalendarsItemsParams, authInfo runtime.ClientAuthInfoWriter) (*PostLearnAPIPublicV1CalendarsItemsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLearnAPIPublicV1CalendarsItemsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLearnAPIPublicV1CalendarsItems",
		Method:             "POST",
		PathPattern:        "/learn/api/public/v1/calendars/items",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostLearnAPIPublicV1CalendarsItemsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLearnAPIPublicV1CalendarsItemsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLearnAPIPublicV1CalendarsItems: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
