// Code generated by go-swagger; DO NOT EDIT.

package calendar

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetLearnAPIPublicV1CalendarsItemsParams creates a new GetLearnAPIPublicV1CalendarsItemsParams object
// with the default values initialized.
func NewGetLearnAPIPublicV1CalendarsItemsParams() *GetLearnAPIPublicV1CalendarsItemsParams {
	var ()
	return &GetLearnAPIPublicV1CalendarsItemsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetLearnAPIPublicV1CalendarsItemsParamsWithTimeout creates a new GetLearnAPIPublicV1CalendarsItemsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetLearnAPIPublicV1CalendarsItemsParamsWithTimeout(timeout time.Duration) *GetLearnAPIPublicV1CalendarsItemsParams {
	var ()
	return &GetLearnAPIPublicV1CalendarsItemsParams{

		timeout: timeout,
	}
}

// NewGetLearnAPIPublicV1CalendarsItemsParamsWithContext creates a new GetLearnAPIPublicV1CalendarsItemsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetLearnAPIPublicV1CalendarsItemsParamsWithContext(ctx context.Context) *GetLearnAPIPublicV1CalendarsItemsParams {
	var ()
	return &GetLearnAPIPublicV1CalendarsItemsParams{

		Context: ctx,
	}
}

// NewGetLearnAPIPublicV1CalendarsItemsParamsWithHTTPClient creates a new GetLearnAPIPublicV1CalendarsItemsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetLearnAPIPublicV1CalendarsItemsParamsWithHTTPClient(client *http.Client) *GetLearnAPIPublicV1CalendarsItemsParams {
	var ()
	return &GetLearnAPIPublicV1CalendarsItemsParams{
		HTTPClient: client,
	}
}

/*GetLearnAPIPublicV1CalendarsItemsParams contains all the parameters to send to the API endpoint
for the get learn API public v1 calendars items operation typically these are written to a http.Request
*/
type GetLearnAPIPublicV1CalendarsItemsParams struct {

	/*CourseID
	  Specifies only calendar items associated with 'courseId' are to be returned.

	**Since**: 3400.9.0

	*/
	CourseID *string
	/*Fields
	  A comma-delimited list of fields to include in the response. If not specified, all fields will be returned.

	*/
	Fields *string
	/*Limit
	  The maximum number of results to be returned. There may be less if the query returned less than the maximum.

	*/
	Limit *int32
	/*Offset
	  The number of rows to skip before beginning to return rows. An offset of 0 is the same as omitting the offset parameter.

	*/
	Offset *int32
	/*Since
	  Specifies only calendar items after the 'since' date (inclusive) are to be returned. Maximum of 16 weeks after the 'since' date will be returned. ISO-8601 date-time format is expected: [yyyy-MM-dd|yyyyMMdd][T(hh:mm[:ss[.sss]]|hhmm[ss[.sss]])]?[Z|[+-]hh:mm]]

	**Since**: 3400.9.0

	*/
	Since *strfmt.DateTime
	/*Sort
	  Properties to sort by. This is a comma-delimited list of JSON properties, with an optional "(desc)" suffix to request a descending sort for that property. e.g. "title(desc),start" Supported fields are:

	- id
	- calendarId
	- title
	- start
	- end
	- modified

	**Since**: 3400.9.0

	*/
	Sort *string
	/*Type
	  Specifies only calendar items with the given type.

	**Since**: 3400.9.0


	| Type      | Description
	 | --------- | --------- |
	| Course |  |
	| GradebookColumn | Read only. |
	| Institution |  |
	| OfficeHours |  |
	| Personal |  |


	*/
	Type *string
	/*Until
	  Specifies only calendar items before the 'until' date (inclusive) are to be returned. Maximum of 16 weeks prior to the 'until' date will be returned. ISO-8601 date-time format is expected: [yyyy-MM-dd|yyyyMMdd][T(hh:mm[:ss[.sss]]|hhmm[ss[.sss]])]?[Z|[+-]hh:mm]]

	**Since**: 3400.9.0

	*/
	Until *strfmt.DateTime

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get learn API public v1 calendars items params
func (o *GetLearnAPIPublicV1CalendarsItemsParams) WithTimeout(timeout time.Duration) *GetLearnAPIPublicV1CalendarsItemsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get learn API public v1 calendars items params
func (o *GetLearnAPIPublicV1CalendarsItemsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get learn API public v1 calendars items params
func (o *GetLearnAPIPublicV1CalendarsItemsParams) WithContext(ctx context.Context) *GetLearnAPIPublicV1CalendarsItemsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get learn API public v1 calendars items params
func (o *GetLearnAPIPublicV1CalendarsItemsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get learn API public v1 calendars items params
func (o *GetLearnAPIPublicV1CalendarsItemsParams) WithHTTPClient(client *http.Client) *GetLearnAPIPublicV1CalendarsItemsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get learn API public v1 calendars items params
func (o *GetLearnAPIPublicV1CalendarsItemsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCourseID adds the courseID to the get learn API public v1 calendars items params
func (o *GetLearnAPIPublicV1CalendarsItemsParams) WithCourseID(courseID *string) *GetLearnAPIPublicV1CalendarsItemsParams {
	o.SetCourseID(courseID)
	return o
}

// SetCourseID adds the courseId to the get learn API public v1 calendars items params
func (o *GetLearnAPIPublicV1CalendarsItemsParams) SetCourseID(courseID *string) {
	o.CourseID = courseID
}

// WithFields adds the fields to the get learn API public v1 calendars items params
func (o *GetLearnAPIPublicV1CalendarsItemsParams) WithFields(fields *string) *GetLearnAPIPublicV1CalendarsItemsParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the get learn API public v1 calendars items params
func (o *GetLearnAPIPublicV1CalendarsItemsParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithLimit adds the limit to the get learn API public v1 calendars items params
func (o *GetLearnAPIPublicV1CalendarsItemsParams) WithLimit(limit *int32) *GetLearnAPIPublicV1CalendarsItemsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get learn API public v1 calendars items params
func (o *GetLearnAPIPublicV1CalendarsItemsParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithOffset adds the offset to the get learn API public v1 calendars items params
func (o *GetLearnAPIPublicV1CalendarsItemsParams) WithOffset(offset *int32) *GetLearnAPIPublicV1CalendarsItemsParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get learn API public v1 calendars items params
func (o *GetLearnAPIPublicV1CalendarsItemsParams) SetOffset(offset *int32) {
	o.Offset = offset
}

// WithSince adds the since to the get learn API public v1 calendars items params
func (o *GetLearnAPIPublicV1CalendarsItemsParams) WithSince(since *strfmt.DateTime) *GetLearnAPIPublicV1CalendarsItemsParams {
	o.SetSince(since)
	return o
}

// SetSince adds the since to the get learn API public v1 calendars items params
func (o *GetLearnAPIPublicV1CalendarsItemsParams) SetSince(since *strfmt.DateTime) {
	o.Since = since
}

// WithSort adds the sort to the get learn API public v1 calendars items params
func (o *GetLearnAPIPublicV1CalendarsItemsParams) WithSort(sort *string) *GetLearnAPIPublicV1CalendarsItemsParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the get learn API public v1 calendars items params
func (o *GetLearnAPIPublicV1CalendarsItemsParams) SetSort(sort *string) {
	o.Sort = sort
}

// WithType adds the typeVar to the get learn API public v1 calendars items params
func (o *GetLearnAPIPublicV1CalendarsItemsParams) WithType(typeVar *string) *GetLearnAPIPublicV1CalendarsItemsParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the get learn API public v1 calendars items params
func (o *GetLearnAPIPublicV1CalendarsItemsParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WithUntil adds the until to the get learn API public v1 calendars items params
func (o *GetLearnAPIPublicV1CalendarsItemsParams) WithUntil(until *strfmt.DateTime) *GetLearnAPIPublicV1CalendarsItemsParams {
	o.SetUntil(until)
	return o
}

// SetUntil adds the until to the get learn API public v1 calendars items params
func (o *GetLearnAPIPublicV1CalendarsItemsParams) SetUntil(until *strfmt.DateTime) {
	o.Until = until
}

// WriteToRequest writes these params to a swagger request
func (o *GetLearnAPIPublicV1CalendarsItemsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CourseID != nil {

		// query param courseId
		var qrCourseID string
		if o.CourseID != nil {
			qrCourseID = *o.CourseID
		}
		qCourseID := qrCourseID
		if qCourseID != "" {
			if err := r.SetQueryParam("courseId", qCourseID); err != nil {
				return err
			}
		}

	}

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int32
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt32(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.Since != nil {

		// query param since
		var qrSince strfmt.DateTime
		if o.Since != nil {
			qrSince = *o.Since
		}
		qSince := qrSince.String()
		if qSince != "" {
			if err := r.SetQueryParam("since", qSince); err != nil {
				return err
			}
		}

	}

	if o.Sort != nil {

		// query param sort
		var qrSort string
		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {
			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}

	}

	if o.Type != nil {

		// query param type
		var qrType string
		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {
			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}

	}

	if o.Until != nil {

		// query param until
		var qrUntil strfmt.DateTime
		if o.Until != nil {
			qrUntil = *o.Until
		}
		qUntil := qrUntil.String()
		if qUntil != "" {
			if err := r.SetQueryParam("until", qUntil); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
